// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace sally {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Comm {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_sally_Cookie__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.Cookie, global::sally.Cookie.Builder> internal__static_sally_Cookie__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_SwitchToApp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.SwitchToApp, global::sally.SwitchToApp.Builder> internal__static_sally_SwitchToApp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_TheoOpenWindow__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.TheoOpenWindow, global::sally.TheoOpenWindow.Builder> internal__static_sally_TheoOpenWindow__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_TheoChangeWindow__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.TheoChangeWindow, global::sally.TheoChangeWindow.Builder> internal__static_sally_TheoChangeWindow__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_TheoCloseWindow__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.TheoCloseWindow, global::sally.TheoCloseWindow.Builder> internal__static_sally_TheoCloseWindow__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_WhoAmI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.WhoAmI, global::sally.WhoAmI.Builder> internal__static_sally_WhoAmI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_AlexData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.AlexData, global::sally.AlexData.Builder> internal__static_sally_AlexData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_SallyFrame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.SallyFrame, global::sally.SallyFrame.Builder> internal__static_sally_SallyFrame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_Init__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.Init, global::sally.Init.Builder> internal__static_sally_Init__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ScreenCoordinates__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ScreenCoordinates, global::sally.ScreenCoordinates.Builder> internal__static_sally_ScreenCoordinates__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_Parameter__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.Parameter, global::sally.Parameter.Builder> internal__static_sally_Parameter__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_RangeSelection__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.RangeSelection, global::sally.RangeSelection.Builder> internal__static_sally_RangeSelection__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_AlexRangeRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.AlexRangeRequest, global::sally.AlexRangeRequest.Builder> internal__static_sally_AlexRangeRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_AlexClick__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.AlexClick, global::sally.AlexClick.Builder> internal__static_sally_AlexClick__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CADAlexClick__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CADAlexClick, global::sally.CADAlexClick.Builder> internal__static_sally_CADAlexClick__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CADNavigateTo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CADNavigateTo, global::sally.CADNavigateTo.Builder> internal__static_sally_CADNavigateTo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CADNode__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CADNode, global::sally.CADNode.Builder> internal__static_sally_CADNode__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CADSemanticData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CADSemanticData, global::sally.CADSemanticData.Builder> internal__static_sally_CADSemanticData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CellPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CellPosition, global::sally.CellPosition.Builder> internal__static_sally_CellPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ConcreteCellData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ConcreteCellData, global::sally.ConcreteCellData.Builder> internal__static_sally_ConcreteCellData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ConcreteSheetData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ConcreteSheetData, global::sally.ConcreteSheetData.Builder> internal__static_sally_ConcreteSheetData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ConcreteDocumentData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ConcreteDocumentData, global::sally.ConcreteDocumentData.Builder> internal__static_sally_ConcreteDocumentData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CellSpaceInformation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CellSpaceInformation, global::sally.CellSpaceInformation.Builder> internal__static_sally_CellSpaceInformation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CellPositions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CellPositions, global::sally.CellPositions.Builder> internal__static_sally_CellPositions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CellRange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CellRange, global::sally.CellRange.Builder> internal__static_sally_CellRange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CellRanges__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CellRanges, global::sally.CellRanges.Builder> internal__static_sally_CellRanges__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CellData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CellData, global::sally.CellData.Builder> internal__static_sally_CellData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_RangeData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.RangeData, global::sally.RangeData.Builder> internal__static_sally_RangeData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_BorderLine__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.BorderLine, global::sally.BorderLine.Builder> internal__static_sally_BorderLine__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CellBorder__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CellBorder, global::sally.CellBorder.Builder> internal__static_sally_CellBorder__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_Font__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.Font, global::sally.Font.Builder> internal__static_sally_Font__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_Cell__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.Cell, global::sally.Cell.Builder> internal__static_sally_Cell__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_Sheet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.Sheet, global::sally.Sheet.Builder> internal__static_sally_Sheet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ParsingParameter__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ParsingParameter, global::sally.ParsingParameter.Builder> internal__static_sally_ParsingParameter__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_Data__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.Data, global::sally.Data.Builder> internal__static_sally_Data__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FBCreateData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FBCreateData, global::sally.FBCreateData.Builder> internal__static_sally_FBCreateData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_LegendCreateData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.LegendCreateData, global::sally.LegendCreateData.Builder> internal__static_sally_LegendCreateData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_AbstractElementMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.AbstractElementMsg, global::sally.AbstractElementMsg.Builder> internal__static_sally_AbstractElementMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_AbstractDataModelMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.AbstractDataModelMsg, global::sally.AbstractDataModelMsg.Builder> internal__static_sally_AbstractDataModelMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_LegendMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.LegendMsg, global::sally.LegendMsg.Builder> internal__static_sally_LegendMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_LegendProductEntryMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.LegendProductEntryMsg, global::sally.LegendProductEntryMsg.Builder> internal__static_sally_LegendProductEntryMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_LegendProductMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.LegendProductMsg, global::sally.LegendProductMsg.Builder> internal__static_sally_LegendProductMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FBEntryMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FBEntryMsg, global::sally.FBEntryMsg.Builder> internal__static_sally_FBEntryMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FunctionalBlockMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FunctionalBlockMsg, global::sally.FunctionalBlockMsg.Builder> internal__static_sally_FunctionalBlockMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_AbstractSpreadsheetMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.AbstractSpreadsheetMsg, global::sally.AbstractSpreadsheetMsg.Builder> internal__static_sally_AbstractSpreadsheetMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_CellSpaceInformationMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.CellSpaceInformationMsg, global::sally.CellSpaceInformationMsg.Builder> internal__static_sally_CellSpaceInformationMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ElementMappingMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ElementMappingMsg, global::sally.ElementMappingMsg.Builder> internal__static_sally_ElementMappingMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_LegendMappingMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.LegendMappingMsg, global::sally.LegendMappingMsg.Builder> internal__static_sally_LegendMappingMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_DomainMappingMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.DomainMappingMsg, global::sally.DomainMappingMsg.Builder> internal__static_sally_DomainMappingMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FunctionalBlockMappingMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FunctionalBlockMappingMsg, global::sally.FunctionalBlockMappingMsg.Builder> internal__static_sally_FunctionalBlockMappingMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_MappingMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.MappingMsg, global::sally.MappingMsg.Builder> internal__static_sally_MappingMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ModelDataMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ModelDataMsg, global::sally.ModelDataMsg.Builder> internal__static_sally_ModelDataMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_AreaInformationMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.AreaInformationMsg, global::sally.AreaInformationMsg.Builder> internal__static_sally_AreaInformationMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_AmbiguousInformationMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.AmbiguousInformationMsg, global::sally.AmbiguousInformationMsg.Builder> internal__static_sally_AmbiguousInformationMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_AffiliationInformationMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.AffiliationInformationMsg, global::sally.AffiliationInformationMsg.Builder> internal__static_sally_AffiliationInformationMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ParsingResultMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ParsingResultMsg, global::sally.ParsingResultMsg.Builder> internal__static_sally_ParsingResultMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_SemanticActionData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.SemanticActionData, global::sally.SemanticActionData.Builder> internal__static_sally_SemanticActionData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_SemanticData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.SemanticData, global::sally.SemanticData.Builder> internal__static_sally_SemanticData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_SpreadsheetModel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.SpreadsheetModel, global::sally.SpreadsheetModel.Builder> internal__static_sally_SpreadsheetModel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_WorksheetIDPair__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.WorksheetIDPair, global::sally.WorksheetIDPair.Builder> internal__static_sally_WorksheetIDPair__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_SpreadsheetOntologyPair__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.SpreadsheetOntologyPair, global::sally.SpreadsheetOntologyPair.Builder> internal__static_sally_SpreadsheetOntologyPair__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_MMTUri__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.MMTUri, global::sally.MMTUri.Builder> internal__static_sally_MMTUri__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_OntologyData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.OntologyData, global::sally.OntologyData.Builder> internal__static_sally_OntologyData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_OntologyConcept__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.OntologyConcept, global::sally.OntologyConcept.Builder> internal__static_sally_OntologyConcept__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_OntologyRelation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.OntologyRelation, global::sally.OntologyRelation.Builder> internal__static_sally_OntologyRelation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_StringMap__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.StringMap, global::sally.StringMap.Builder> internal__static_sally_StringMap__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_KnowledgeObject__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.KnowledgeObject, global::sally.KnowledgeObject.Builder> internal__static_sally_KnowledgeObject__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_KnowledgeBase__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.KnowledgeBase, global::sally.KnowledgeBase.Builder> internal__static_sally_KnowledgeBase__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_OntologyItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.OntologyItem, global::sally.OntologyItem.Builder> internal__static_sally_OntologyItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ResourceContext__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ResourceContext, global::sally.ResourceContext.Builder> internal__static_sally_ResourceContext__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ContextKnowledge__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ContextKnowledge, global::sally.ContextKnowledge.Builder> internal__static_sally_ContextKnowledge__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FormulaRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FormulaRequest, global::sally.FormulaRequest.Builder> internal__static_sally_FormulaRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FormulaInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FormulaInfo, global::sally.FormulaInfo.Builder> internal__static_sally_FormulaInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_TheoNavigateTo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.TheoNavigateTo, global::sally.TheoNavigateTo.Builder> internal__static_sally_TheoNavigateTo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_Frame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.Frame, global::sally.Frame.Builder> internal__static_sally_Frame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_ServiceCall__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.ServiceCall, global::sally.ServiceCall.Builder> internal__static_sally_ServiceCall__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FormulaCell__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FormulaCell, global::sally.FormulaCell.Builder> internal__static_sally_FormulaCell__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FormulaSheetData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FormulaSheetData, global::sally.FormulaSheetData.Builder> internal__static_sally_FormulaSheetData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FormulaMap__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FormulaMap, global::sally.FormulaMap.Builder> internal__static_sally_FormulaMap__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_RequestASM__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.RequestASM, global::sally.RequestASM.Builder> internal__static_sally_RequestASM__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_SaveASM__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.SaveASM, global::sally.SaveASM.Builder> internal__static_sally_SaveASM__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FileRef__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FileRef, global::sally.FileRef.Builder> internal__static_sally_FileRef__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_FileContents__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.FileContents, global::sally.FileContents.Builder> internal__static_sally_FileContents__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_TextPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.TextPosition, global::sally.TextPosition.Builder> internal__static_sally_TextPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_XMLPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.XMLPosition, global::sally.XMLPosition.Builder> internal__static_sally_XMLPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_XMLNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.XMLNotification, global::sally.XMLNotification.Builder> internal__static_sally_XMLNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_TextNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.TextNotification, global::sally.TextNotification.Builder> internal__static_sally_TextNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_TextFileNotifications__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.TextFileNotifications, global::sally.TextFileNotifications.Builder> internal__static_sally_TextFileNotifications__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_sally_TextAutocomplete__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::sally.TextAutocomplete, global::sally.TextAutocomplete.Builder> internal__static_sally_TextAutocomplete__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Comm() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cgpjb21tLnByb3RvEgVzYWxseSIlCgZDb29raWUSCwoDdXJsGAEgAigJEg4K" + 
          "BmNvb2tpZRgCIAIoCSIfCgtTd2l0Y2hUb0FwcBIQCghmaWxlTmFtZRgBIAIo" + 
          "CSKVAQoOVGhlb09wZW5XaW5kb3cSKgoIcG9zaXRpb24YASACKAsyGC5zYWxs" + 
          "eS5TY3JlZW5Db29yZGluYXRlcxILCgN1cmwYAiACKAkSDQoFc2l6ZVgYAyAB" + 
          "KAUSDQoFc2l6ZVkYBCABKAUSDQoFdGl0bGUYBSABKAkSHQoGY29va2llGAYg" + 
          "ASgLMg0uc2FsbHkuQ29va2llIqkBChBUaGVvQ2hhbmdlV2luZG93EioKCHBv" + 
          "c2l0aW9uGAEgASgLMhguc2FsbHkuU2NyZWVuQ29vcmRpbmF0ZXMSCwoDdXJs" + 
          "GAIgASgJEg0KBXNpemVYGAMgASgFEg0KBXNpemVZGAQgASgFEg0KBXRpdGxl" + 
          "GAUgASgJEh0KBmNvb2tpZRgGIAEoCzINLnNhbGx5LkNvb2tpZRIQCgh3aW5k" + 
          "b3dpZBgHIAIoBSIjCg9UaGVvQ2xvc2VXaW5kb3cSEAoId2luZG93aWQYASAC" + 
          "KAUilQIKBldob0FtSRIsCgpjbGllbnRUeXBlGAEgAigOMhguc2FsbHkuV2hv" + 
          "QW1JLkNsaWVudFR5cGUSNgoPZW52aXJvbm1lbnRUeXBlGAIgAigOMh0uc2Fs" + 
          "bHkuV2hvQW1JLkVudmlyb25tZW50VHlwZRIrCgxkb2N1bWVudFR5cGUYAyAC" + 
          "KA4yFS5zYWxseS5XaG9BbUkuRG9jVHlwZSIgCgpDbGllbnRUeXBlEggKBEFs" + 
          "ZXgQABIICgRUaGVvEAEiJwoPRW52aXJvbm1lbnRUeXBlEgsKB0Rlc2t0b3AQ" + 
          "ABIHCgNXZWIQASItCgdEb2NUeXBlEg8KC1NwcmVhZHNoZWV0EAASCAoEVGV4" + 
          "dBABEgcKA0NBRBACIioKCEFsZXhEYXRhEhAKCGZpbGVOYW1lGAEgASgJEgwK" + 
          "BGRhdGEYAiABKAkiHgoKU2FsbHlGcmFtZRIQCghmaWxlTmFtZRgBIAEoCSIX" + 
          "CgRJbml0Eg8KB29wdGlvbnMYASABKAkiKQoRU2NyZWVuQ29vcmRpbmF0ZXMS" + 
          "CQoBeBgBIAIoBRIJCgF5GAIgAigFIicKCVBhcmFtZXRlchILCgNrZXkYASAC" + 
          "KAkSDQoFdmFsdWUYAiACKAkiYwoOUmFuZ2VTZWxlY3Rpb24SEAoIc3RhcnRS" + 
          "b3cYASACKAUSEAoIc3RhcnRDb2wYAiACKAUSDgoGZW5kUm93GAMgAigFEg4K" + 
          "BmVuZENvbBgEIAIoBRINCgVzaGVldBgFIAEoCSJOChBBbGV4UmFuZ2VSZXF1" + 
          "ZXN0EhAKCGZpbGVOYW1lGAEgAigJEigKCXNlbGVjdGlvbhgCIAMoCzIVLnNh" + 
          "bGx5LlJhbmdlU2VsZWN0aW9uIn4KCUFsZXhDbGljaxINCgVTaGVldBgBIAIo" + 
          "CRIkCgVyYW5nZRgCIAIoCzIVLnNhbGx5LlJhbmdlU2VsZWN0aW9uEioKCHBv" + 
          "c2l0aW9uGAMgAigLMhguc2FsbHkuU2NyZWVuQ29vcmRpbmF0ZXMSEAoIZmls" + 
          "ZU5hbWUYBCACKAkiXwoMQ0FEQWxleENsaWNrEhEKCWNhZE5vZGVJZBgBIAIo" + 
          "CRIqCghwb3NpdGlvbhgCIAIoCzIYLnNhbGx5LlNjcmVlbkNvb3JkaW5hdGVz" + 
          "EhAKCGZpbGVOYW1lGAMgAigJIjQKDUNBRE5hdmlnYXRlVG8SEAoIZmlsZU5h" + 
          "bWUYASACKAkSEQoJY2FkTm9kZUlkGAIgAigJIm0KB0NBRE5vZGUSCgoCaWQY" + 
          "ASACKAkSDgoGaW1fdXJpGAIgASgJEiAKCGNoaWxkcmVuGAMgAygLMg4uc2Fs" + 
          "bHkuQ0FETm9kZRIkCgpwYXJhbWV0ZXJzGAQgAygLMhAuc2FsbHkuUGFyYW1l" + 
          "dGVyIkYKD0NBRFNlbWFudGljRGF0YRIQCghmaWxlTmFtZRgBIAIoCRIhCgly" + 
          "b290X25vZGUYAiACKAsyDi5zYWxseS5DQUROb2RlIjcKDENlbGxQb3NpdGlv" + 
          "bhINCgVzaGVldBgBIAIoBRILCgNyb3cYAiACKAUSCwoDY29sGAMgAigFIkwK" + 
          "EENvbmNyZXRlQ2VsbERhdGESCwoDcm93GAMgAigFEgsKA2NvbBgEIAIoBRIP" + 
          "Cgdmb3JtdWxhGAEgAigJEg0KBXZhbHVlGAIgAigJIpQBChFDb25jcmV0ZVNo" + 
          "ZWV0RGF0YRIRCglzaGVldG5hbWUYASACKAkSEAoIc3RhcnRSb3cYAyACKAUS" + 
          "EAoIc3RhcnRDb2wYBCACKAUSDgoGZW5kUm93GAUgAigFEg4KBmVuZENvbBgG" + 
          "IAIoBRIoCgdjZWxsaW5mGAIgAygLMhcuc2FsbHkuQ29uY3JldGVDZWxsRGF0" + 
          "YSJSChRDb25jcmV0ZURvY3VtZW50RGF0YRIQCghmaWxlbmFtZRgBIAIoCRIo" + 
          "CgZzaGVldHMYAiADKAsyGC5zYWxseS5Db25jcmV0ZVNoZWV0RGF0YSJcChRD" + 
          "ZWxsU3BhY2VJbmZvcm1hdGlvbhIlCghwb3NpdGlvbhgBIAIoCzITLnNhbGx5" + 
          "LkNlbGxQb3NpdGlvbhINCgV3aWR0aBgCIAIoBRIOCgZoZWlnaHQYAyACKAUi" + 
          "QwoNQ2VsbFBvc2l0aW9ucxIyCg1jZWxsUG9zaXRpb25zGAEgAygLMhsuc2Fs" + 
          "bHkuQ2VsbFNwYWNlSW5mb3JtYXRpb24iUQoJQ2VsbFJhbmdlEiIKBXN0YXJ0" + 
          "GAEgAigLMhMuc2FsbHkuQ2VsbFBvc2l0aW9uEiAKA2VuZBgCIAIoCzITLnNh" + 
          "bGx5LkNlbGxQb3NpdGlvbiItCgpDZWxsUmFuZ2VzEh8KBXJhbmdlGAEgAygL" + 
          "MhAuc2FsbHkuQ2VsbFJhbmdlIlkKCENlbGxEYXRhEi0KCHBvc2l0aW9uGAEg" + 
          "AigLMhsuc2FsbHkuQ2VsbFNwYWNlSW5mb3JtYXRpb24SDQoFdmFsdWUYAiAB" + 
          "KAkSDwoHZm9ybXVsYRgDIAEoCSIrCglSYW5nZURhdGESHgoFY2VsbHMYASAD" + 
          "KAsyDy5zYWxseS5DZWxsRGF0YSK3AQoKQm9yZGVyTGluZRITCgtib3JkZXJD" + 
          "b2xvchgBIAIoAxITCgtmb3JtYXRTdHlsZRgCIAIoBRIYChBleGNlbEJvcmRl" + 
          "clN0eWxlGAMgASgFEhkKEWV4Y2VsQm9yZGVyV2VpZ2h0GAQgASgFEhgKEG9v" + 
          "SW5uZXJMaW5lV2lkdGgYBSABKAUSGAoQb29PdXRlckxpbmVXaWR0aBgGIAEo" + 
          "BRIWCg5vb0xpbmVEaXN0YW5jZRgHIAEoBSKSAQoKQ2VsbEJvcmRlchIeCgN0" + 
          "b3AYASABKAsyES5zYWxseS5Cb3JkZXJMaW5lEiEKBmJvdHRvbRgCIAEoCzIR" + 
          "LnNhbGx5LkJvcmRlckxpbmUSHwoEbGVmdBgDIAEoCzIRLnNhbGx5LkJvcmRl" + 
          "ckxpbmUSIAoFcmlnaHQYBCABKAsyES5zYWxseS5Cb3JkZXJMaW5lInUKBEZv" + 
          "bnQSEAoIZm9udE5hbWUYASACKAkSEQoJZm9udENvbG9yGAIgAigFEhAKCGZv" + 
          "bnRTaXplGAMgAigCEhAKCGlzSXRhbGljGAQgASgIEg4KBmlzQm9sZBgFIAEo" + 
          "CBIUCgxpc1VuZGVybGluZWQYBiABKAgidgoEQ2VsbBIdCgRkYXRhGAEgAigL" + 
          "Mg8uc2FsbHkuQ2VsbERhdGESEQoJYmFja0NvbG9yGAIgAigFEhkKBGZvbnQY" + 
          "AyABKAsyCy5zYWxseS5Gb250EiEKBmJvcmRlchgEIAIoCzIRLnNhbGx5LkNl" + 
          "bGxCb3JkZXIiLwoFU2hlZXQSCgoCaWQYASACKAUSGgoFY2VsbHMYAiADKAsy" + 
          "Cy5zYWxseS5DZWxsIoIBChBQYXJzaW5nUGFyYW1ldGVyEhcKD3VzZVRleHRB" + 
          "c0xlZ2VuZBgBIAIoCBIbChN1c2VDb2xvckFzU3RydWN0dXJlGAIgAigIEhwK" + 
          "FHVzZUJvcmRlckFzU3RydWN0dXJlGAMgAigIEhoKEnVzZUZvbnRBc1N0cnVj" + 
          "dHVyZRgEIAIoCCJiCgREYXRhEhwKBnNoZWV0cxgBIAMoCzIMLnNhbGx5LlNo" + 
          "ZWV0EhAKCGZpbGVOYW1lGAIgAigJEioKCXBhcmFtZXRlchgDIAIoCzIXLnNh" + 
          "bGx5LlBhcnNpbmdQYXJhbWV0ZXIifwoMRkJDcmVhdGVEYXRhEh8KBXJhbmdl" + 
          "GAEgAigLMhAuc2FsbHkuUmFuZ2VEYXRhEg8KB2xlZ2VuZHMYAiADKAUSJwoJ" + 
          "cGFyYW1ldGVyGAMgASgOMhQuc2FsbHkuRGF0YVBhcmFtZXRlchIUCgxjb25u" + 
          "ZWN0VG9BbGwYBCADKAUijwEKEExlZ2VuZENyZWF0ZURhdGESHwoFaXRlbXMY" + 
          "ASACKAsyEC5zYWxseS5SYW5nZURhdGESHwoGaGVhZGVyGAIgASgLMg8uc2Fs" + 
          "bHkuQ2VsbERhdGESEAoIZmlsZU5hbWUYAyACKAkSJwoJcGFyYW1ldGVyGAQg" + 
          "ASgOMhQuc2FsbHkuRGF0YVBhcmFtZXRlciJUChJBYnN0cmFjdEVsZW1lbnRN" + 
          "c2cSCgoCaWQYASACKAUSDQoFdmFsdWUYAiACKAkSDwoHZm9ybXVsYRgDIAEo" + 
          "CRISCgpwYXJhbWV0ZXJzGAQgAygFIkMKFEFic3RyYWN0RGF0YU1vZGVsTXNn" + 
          "EisKCGVsZW1lbnRzGAEgAygLMhkuc2FsbHkuQWJzdHJhY3RFbGVtZW50TXNn" + 
          "IjYKCUxlZ2VuZE1zZxIKCgJpZBgBIAIoBRINCgVpdGVtcxgCIAMoBRIOCgZo" + 
          "ZWFkZXIYAyABKAUiOgoVTGVnZW5kUHJvZHVjdEVudHJ5TXNnEg8KB2xlZ2Vu" + 
          "ZHMYASADKAUSEAoIZWxlbWVudHMYAiADKAUiUgoQTGVnZW5kUHJvZHVjdE1z" + 
          "ZxIPCgdsZWdlbmRzGAEgAygFEi0KB2VudHJpZXMYAiADKAsyHC5zYWxseS5M" + 
          "ZWdlbmRQcm9kdWN0RW50cnlNc2ciUQoKRkJFbnRyeU1zZxIwCgpkb21haW5F" + 
          "bGVtGAEgAigLMhwuc2FsbHkuTGVnZW5kUHJvZHVjdEVudHJ5TXNnEhEKCWFi" + 
          "c0VsZW1JZBgCIAIoBSJrChJGdW5jdGlvbmFsQmxvY2tNc2cSCgoCaWQYASAC" + 
          "KAUSJwoGZG9tYWluGAIgAigLMhcuc2FsbHkuTGVnZW5kUHJvZHVjdE1zZxIg" + 
          "CgVlbnRyeRgDIAMoCzIRLnNhbGx5LkZCRW50cnlNc2cinwEKFkFic3RyYWN0" + 
          "U3ByZWFkc2hlZXRNc2cSLQoIZWxlbWVudHMYASACKAsyGy5zYWxseS5BYnN0" + 
          "cmFjdERhdGFNb2RlbE1zZxIhCgdsZWdlbmRzGAIgAygLMhAuc2FsbHkuTGVn" + 
          "ZW5kTXNnEjMKEGZ1bmN0aW9uYWxCbG9ja3MYAyADKAsyGS5zYWxseS5GdW5j" + 
          "dGlvbmFsQmxvY2tNc2ciSQoXQ2VsbFNwYWNlSW5mb3JtYXRpb25Nc2cSEQoJ" + 
          "d29ya3NoZWV0GAEgAigFEgsKA3JvdxgCIAIoBRIOCgZjb2x1bW4YAyACKAUi" + 
          "VQoRRWxlbWVudE1hcHBpbmdNc2cSLQoIcG9zaXRpb24YASACKAsyGy5zYWxs" + 
          "eS5DZWxsU3BhY2VJbmZvcm1hdGlvbhIRCglhYnNFbGVtSWQYAiACKAUipgEK" + 
          "EExlZ2VuZE1hcHBpbmdNc2cSMgoQZWxlbWVudFBvc2l0aW9ucxgBIAMoCzIY" + 
          "LnNhbGx5LkVsZW1lbnRNYXBwaW5nTXNnEjMKDmhlYWRlclBvc2l0aW9uGAIg" + 
          "ASgLMhsuc2FsbHkuQ2VsbFNwYWNlSW5mb3JtYXRpb24SFwoPaGVhZGVyRWxl" + 
          "bWVudElkGAMgASgFEhAKCGxlZ2VuZElkGAQgAigFInYKEERvbWFpbk1hcHBp" + 
          "bmdNc2cSLQoIcG9zaXRpb24YASACKAsyGy5zYWxseS5DZWxsU3BhY2VJbmZv" + 
          "cm1hdGlvbhIzCg1kb21haW5FbGVtZW50GAIgAigLMhwuc2FsbHkuTGVnZW5k" + 
          "UHJvZHVjdEVudHJ5TXNnIrQBChlGdW5jdGlvbmFsQmxvY2tNYXBwaW5nTXNn" + 
          "EicKBmRvbWFpbhgBIAIoCzIXLnNhbGx5LkxlZ2VuZFByb2R1Y3RNc2cSMAoO" + 
          "ZWxlbWVudE1hcHBpbmcYAiADKAsyGC5zYWxseS5FbGVtZW50TWFwcGluZ01z" + 
          "ZxIuCg1kb21haW5NYXBwaW5nGAMgAygLMhcuc2FsbHkuRG9tYWluTWFwcGlu" + 
          "Z01zZxIMCgRmYklkGAQgAigFInMKCk1hcHBpbmdNc2cSLwoObGVnZW5kTWFw" + 
          "cGluZ3MYASADKAsyFy5zYWxseS5MZWdlbmRNYXBwaW5nTXNnEjQKCmZiTWFw" + 
          "cGluZ3MYAiADKAsyIC5zYWxseS5GdW5jdGlvbmFsQmxvY2tNYXBwaW5nTXNn" + 
          "Il4KDE1vZGVsRGF0YU1zZxIqCgNhc20YASACKAsyHS5zYWxseS5BYnN0cmFj" + 
          "dFNwcmVhZHNoZWV0TXNnEiIKB21hcHBpbmcYAiACKAsyES5zYWxseS5NYXBw" + 
          "aW5nTXNnIqcBChJBcmVhSW5mb3JtYXRpb25Nc2cSCgoCaWQYASACKAUSMAoE" + 
          "dHlwZRgCIAIoDjIiLnNhbGx5LkFyZWFJbmZvcm1hdGlvbk1zZy5UeXBlRW51" + 
          "bRIhCgZyYW5nZXMYAyACKAsyES5zYWxseS5DZWxsUmFuZ2VzIjAKCFR5cGVF" + 
          "bnVtEgoKBkxFR0VORBAAEhAKDExFR0VOREhFQURFUhABEgYKAkZCEAMiWAoX" + 
          "QW1iaWd1b3VzSW5mb3JtYXRpb25Nc2cSJQoIcG9zaXRpb24YASACKAsyEy5z" + 
          "YWxseS5DZWxsUG9zaXRpb24SFgoOcmVsYXRlZEFyZWFJZHMYAiADKAUiPgoZ" + 
          "QWZmaWxpYXRpb25JbmZvcm1hdGlvbk1zZxIKCgJpZBgBIAIoBRIVCg1hZmZp" + 
          "bGlhdGVkSWRzGAIgAygFIqIBChBQYXJzaW5nUmVzdWx0TXNnEigKBWFyZWFz" + 
          "GAEgAygLMhkuc2FsbHkuQXJlYUluZm9ybWF0aW9uTXNnEi0KBWFtYmlnGAIg" + 
          "AygLMh4uc2FsbHkuQW1iaWd1b3VzSW5mb3JtYXRpb25Nc2cSNQoLYWZmaWxp" + 
          "YXRpb24YAyADKAsyIC5zYWxseS5BZmZpbGlhdGlvbkluZm9ybWF0aW9uTXNn" + 
          "Iq4BChJTZW1hbnRpY0FjdGlvbkRhdGESCgoCY2QYASABKAkSDAoEbmFtZRgC" + 
          "IAEoCRIQCghmaWxlTmFtZRgDIAEoCRIQCghzZW5kZXJJZBgEIAEoCRIRCglz" + 
          "aGVldE5hbWUYBSABKAkSCwoDcm93GAYgASgNEgsKA2NvbBgHIAEoDRItCgtj" + 
          "b29yZGluYXRlcxgIIAEoCzIYLnNhbGx5LlNjcmVlbkNvb3JkaW5hdGVzIlMK" + 
          "DFNlbWFudGljRGF0YRIQCghmaWxlTmFtZRgBIAIoCRIxChBTcHJlYWRzaGVl" + 
          "dE1vZGVsGAIgAigLMhcuc2FsbHkuU3ByZWFkc2hlZXRNb2RlbCKXAQoQU3By" + 
          "ZWFkc2hlZXRNb2RlbBIgCgNhc20YASACKAsyEy5zYWxseS5Nb2RlbERhdGFN" + 
          "c2cSMwoLb250b21hcHBpbmcYAiADKAsyHi5zYWxseS5TcHJlYWRzaGVldE9u" + 
          "dG9sb2d5UGFpchIsCgxzaGVldE1hcHBpbmcYAyADKAsyFi5zYWxseS5Xb3Jr" + 
          "c2hlZXRJRFBhaXIiMAoPV29ya3NoZWV0SURQYWlyEhEKCXdvcmtzaGVldBgB" + 
          "IAIoCRIKCgJpZBgCIAIoBSI1ChdTcHJlYWRzaGVldE9udG9sb2d5UGFpchIN" + 
          "CgVhc21pZBgBIAIoBRILCgN1cmkYAiACKAkiFQoGTU1UVXJpEgsKA3VyaRgB" + 
          "IAIoCSJkCgxPbnRvbG9neURhdGESKAoIY29uY2VwdHMYASADKAsyFi5zYWxs" + 
          "eS5PbnRvbG9neUNvbmNlcHQSKgoJcmVsYXRpb25zGAIgAygLMhcuc2FsbHku" + 
          "T250b2xvZ3lSZWxhdGlvbiIuCg9PbnRvbG9neUNvbmNlcHQSCwoDdXJpGAEg" + 
          "AigJEg4KBnBhcmFtcxgCIAMoCSJIChBPbnRvbG9neVJlbGF0aW9uEgsKA3Vy" + 
          "aRgBIAIoCRISCgpzcmNDb25jZXB0GAIgAigJEhMKC2Rlc3RDb25jZXB0GAMg" + 
          "AigJIicKCVN0cmluZ01hcBILCgNrZXkYASACKAkSDQoFdmFsdWUYAiACKAki" + 
          "QAoPS25vd2xlZGdlT2JqZWN0EgsKA3VyaRgBIAIoCRIgCgZ2YWx1ZXMYAiAD" + 
          "KAsyEC5zYWxseS5TdHJpbmdNYXAiSgoNS25vd2xlZGdlQmFzZRInCgdvYmpl" + 
          "Y3RzGAEgAygLMhYuc2FsbHkuS25vd2xlZGdlT2JqZWN0EhAKCGZpbGVOYW1l" + 
          "GAIgAigJIi4KDE9udG9sb2d5SXRlbRIOCgZ0aGVvcnkYASACKAkSDgoGc3lt" + 
          "Ym9sGAIgAigJIiMKD1Jlc291cmNlQ29udGV4dBIQCghhY3Rpb25JZBgBIAIo" + 
          "CSI4ChBDb250ZXh0S25vd2xlZGdlEiQKB2NvbnRleHQYASADKAsyEy5zYWxs" + 
          "eS5PbnRvbG9neUl0ZW0iIgoORm9ybXVsYVJlcXVlc3QSEAoIYWN0aW9uSWQY" + 
          "ASACKAkiGwoLRm9ybXVsYUluZm8SDAoEanNvbhgBIAIoCSJFCg5UaGVvTmF2" + 
          "aWdhdGVUbxIhCgR0ZXJtGAEgAigLMhMuc2FsbHkuT250b2xvZ3lJdGVtEhAK" + 
          "CGFjdGlvbklkGAIgAigJIiYKBUZyYW1lEgsKA3VpZBgBIAIoCRIQCghhY3Rp" + 
          "b25JZBgCIAIoCSIaCgtTZXJ2aWNlQ2FsbBILCgN1aWQYASACKAkiRwoLRm9y" + 
          "bXVsYUNlbGwSCwoDcm93GAMgAigFEgsKA2NvbBgEIAIoBRIPCgdmb3JtdWxh" + 
          "GAEgAigJEg0KBXZhbHVlGAIgAigJIo4BChBGb3JtdWxhU2hlZXREYXRhEhEK" + 
          "CXNoZWV0bmFtZRgBIAIoCRIQCghzdGFydFJvdxgDIAIoBRIQCghzdGFydENv" + 
          "bBgEIAIoBRIOCgZlbmRSb3cYBSACKAUSDgoGZW5kQ29sGAYgAigFEiMKB2Nl" + 
          "bGxpbmYYAiADKAsyEi5zYWxseS5Gb3JtdWxhQ2VsbCJHCgpGb3JtdWxhTWFw" + 
          "EhAKCGZpbGVuYW1lGAEgAigJEicKBnNoZWV0cxgCIAMoCzIXLnNhbGx5LkZv" + 
          "cm11bGFTaGVldERhdGEiHgoKUmVxdWVzdEFTTRIQCghmaWxlbmFtZRgBIAIo" + 
          "CSIfCgdTYXZlQVNNEhQKDHNlbWFudGljRGF0YRgBIAIoCSIsCgdGaWxlUmVm" + 
          "EhMKC3Jlc291cmNlVVJJGAEgAigJEgwKBG1pbWUYAiACKAkiPgoMRmlsZUNv" + 
          "bnRlbnRzEhwKBGZpbGUYASACKAsyDi5zYWxseS5GaWxlUmVmEhAKCGNvbnRl" + 
          "bnRzGAIgAigJIikKDFRleHRQb3NpdGlvbhIMCgRsaW5lGAEgAigFEgsKA2Nv" + 
          "bBgCIAIoBSIcCgtYTUxQb3NpdGlvbhINCgV4cGF0aBgBIAIoCSJMCg9YTUxO" + 
          "b3RpZmljYXRpb24SHwoDcG9zGAEgAigLMhIuc2FsbHkuWE1MUG9zaXRpb24S" + 
          "CwoDbXNnGAIgAigJEgsKA3VyaRgDIAIoCSJOChBUZXh0Tm90aWZpY2F0aW9u" + 
          "EiAKA3BvcxgBIAIoCzITLnNhbGx5LlRleHRQb3NpdGlvbhILCgNtc2cYAiAC" + 
          "KAkSCwoDdXJpGAMgAigJImUKFVRleHRGaWxlTm90aWZpY2F0aW9ucxIcCgRm" + 
          "aWxlGAEgAigLMg4uc2FsbHkuRmlsZVJlZhIuCg1ub3RpZmljYXRpb25zGAIg" + 
          "AygLMhcuc2FsbHkuVGV4dE5vdGlmaWNhdGlvbiJWChBUZXh0QXV0b2NvbXBs" + 
          "ZXRlEhwKBGZpbGUYASACKAsyDi5zYWxseS5GaWxlUmVmEg4KBm9mZnNldBgC" + 
          "IAIoBRIUCgxmaWxlQ29udGVudHMYAyABKAkqUwoNRGF0YVBhcmFtZXRlchIL" + 
          "CgdBbGxEaWZmEAESGQoVU2FtZVN0cmluZ1NhbWVFbGVtZW50EAISGgoWU2Ft" + 
          "ZUNvbnRlbnRTYW1lRWxlbWVudBADQgJQAQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_sally_Cookie__Descriptor = Descriptor.MessageTypes[0];
        internal__static_sally_Cookie__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.Cookie, global::sally.Cookie.Builder>(internal__static_sally_Cookie__Descriptor,
                new string[] { "Url", "Cookie_", });
        internal__static_sally_SwitchToApp__Descriptor = Descriptor.MessageTypes[1];
        internal__static_sally_SwitchToApp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.SwitchToApp, global::sally.SwitchToApp.Builder>(internal__static_sally_SwitchToApp__Descriptor,
                new string[] { "FileName", });
        internal__static_sally_TheoOpenWindow__Descriptor = Descriptor.MessageTypes[2];
        internal__static_sally_TheoOpenWindow__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.TheoOpenWindow, global::sally.TheoOpenWindow.Builder>(internal__static_sally_TheoOpenWindow__Descriptor,
                new string[] { "Position", "Url", "SizeX", "SizeY", "Title", "Cookie", });
        internal__static_sally_TheoChangeWindow__Descriptor = Descriptor.MessageTypes[3];
        internal__static_sally_TheoChangeWindow__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.TheoChangeWindow, global::sally.TheoChangeWindow.Builder>(internal__static_sally_TheoChangeWindow__Descriptor,
                new string[] { "Position", "Url", "SizeX", "SizeY", "Title", "Cookie", "Windowid", });
        internal__static_sally_TheoCloseWindow__Descriptor = Descriptor.MessageTypes[4];
        internal__static_sally_TheoCloseWindow__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.TheoCloseWindow, global::sally.TheoCloseWindow.Builder>(internal__static_sally_TheoCloseWindow__Descriptor,
                new string[] { "Windowid", });
        internal__static_sally_WhoAmI__Descriptor = Descriptor.MessageTypes[5];
        internal__static_sally_WhoAmI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.WhoAmI, global::sally.WhoAmI.Builder>(internal__static_sally_WhoAmI__Descriptor,
                new string[] { "ClientType", "EnvironmentType", "DocumentType", });
        internal__static_sally_AlexData__Descriptor = Descriptor.MessageTypes[6];
        internal__static_sally_AlexData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.AlexData, global::sally.AlexData.Builder>(internal__static_sally_AlexData__Descriptor,
                new string[] { "FileName", "Data", });
        internal__static_sally_SallyFrame__Descriptor = Descriptor.MessageTypes[7];
        internal__static_sally_SallyFrame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.SallyFrame, global::sally.SallyFrame.Builder>(internal__static_sally_SallyFrame__Descriptor,
                new string[] { "FileName", });
        internal__static_sally_Init__Descriptor = Descriptor.MessageTypes[8];
        internal__static_sally_Init__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.Init, global::sally.Init.Builder>(internal__static_sally_Init__Descriptor,
                new string[] { "Options", });
        internal__static_sally_ScreenCoordinates__Descriptor = Descriptor.MessageTypes[9];
        internal__static_sally_ScreenCoordinates__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ScreenCoordinates, global::sally.ScreenCoordinates.Builder>(internal__static_sally_ScreenCoordinates__Descriptor,
                new string[] { "X", "Y", });
        internal__static_sally_Parameter__Descriptor = Descriptor.MessageTypes[10];
        internal__static_sally_Parameter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.Parameter, global::sally.Parameter.Builder>(internal__static_sally_Parameter__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_sally_RangeSelection__Descriptor = Descriptor.MessageTypes[11];
        internal__static_sally_RangeSelection__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.RangeSelection, global::sally.RangeSelection.Builder>(internal__static_sally_RangeSelection__Descriptor,
                new string[] { "StartRow", "StartCol", "EndRow", "EndCol", "Sheet", });
        internal__static_sally_AlexRangeRequest__Descriptor = Descriptor.MessageTypes[12];
        internal__static_sally_AlexRangeRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.AlexRangeRequest, global::sally.AlexRangeRequest.Builder>(internal__static_sally_AlexRangeRequest__Descriptor,
                new string[] { "FileName", "Selection", });
        internal__static_sally_AlexClick__Descriptor = Descriptor.MessageTypes[13];
        internal__static_sally_AlexClick__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.AlexClick, global::sally.AlexClick.Builder>(internal__static_sally_AlexClick__Descriptor,
                new string[] { "Sheet", "Range", "Position", "FileName", });
        internal__static_sally_CADAlexClick__Descriptor = Descriptor.MessageTypes[14];
        internal__static_sally_CADAlexClick__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CADAlexClick, global::sally.CADAlexClick.Builder>(internal__static_sally_CADAlexClick__Descriptor,
                new string[] { "CadNodeId", "Position", "FileName", });
        internal__static_sally_CADNavigateTo__Descriptor = Descriptor.MessageTypes[15];
        internal__static_sally_CADNavigateTo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CADNavigateTo, global::sally.CADNavigateTo.Builder>(internal__static_sally_CADNavigateTo__Descriptor,
                new string[] { "FileName", "CadNodeId", });
        internal__static_sally_CADNode__Descriptor = Descriptor.MessageTypes[16];
        internal__static_sally_CADNode__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CADNode, global::sally.CADNode.Builder>(internal__static_sally_CADNode__Descriptor,
                new string[] { "Id", "ImUri", "Children", "Parameters", });
        internal__static_sally_CADSemanticData__Descriptor = Descriptor.MessageTypes[17];
        internal__static_sally_CADSemanticData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CADSemanticData, global::sally.CADSemanticData.Builder>(internal__static_sally_CADSemanticData__Descriptor,
                new string[] { "FileName", "RootNode", });
        internal__static_sally_CellPosition__Descriptor = Descriptor.MessageTypes[18];
        internal__static_sally_CellPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CellPosition, global::sally.CellPosition.Builder>(internal__static_sally_CellPosition__Descriptor,
                new string[] { "Sheet", "Row", "Col", });
        internal__static_sally_ConcreteCellData__Descriptor = Descriptor.MessageTypes[19];
        internal__static_sally_ConcreteCellData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ConcreteCellData, global::sally.ConcreteCellData.Builder>(internal__static_sally_ConcreteCellData__Descriptor,
                new string[] { "Row", "Col", "Formula", "Value", });
        internal__static_sally_ConcreteSheetData__Descriptor = Descriptor.MessageTypes[20];
        internal__static_sally_ConcreteSheetData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ConcreteSheetData, global::sally.ConcreteSheetData.Builder>(internal__static_sally_ConcreteSheetData__Descriptor,
                new string[] { "Sheetname", "StartRow", "StartCol", "EndRow", "EndCol", "Cellinf", });
        internal__static_sally_ConcreteDocumentData__Descriptor = Descriptor.MessageTypes[21];
        internal__static_sally_ConcreteDocumentData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ConcreteDocumentData, global::sally.ConcreteDocumentData.Builder>(internal__static_sally_ConcreteDocumentData__Descriptor,
                new string[] { "Filename", "Sheets", });
        internal__static_sally_CellSpaceInformation__Descriptor = Descriptor.MessageTypes[22];
        internal__static_sally_CellSpaceInformation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CellSpaceInformation, global::sally.CellSpaceInformation.Builder>(internal__static_sally_CellSpaceInformation__Descriptor,
                new string[] { "Position", "Width", "Height", });
        internal__static_sally_CellPositions__Descriptor = Descriptor.MessageTypes[23];
        internal__static_sally_CellPositions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CellPositions, global::sally.CellPositions.Builder>(internal__static_sally_CellPositions__Descriptor,
                new string[] { "CellPositions_", });
        internal__static_sally_CellRange__Descriptor = Descriptor.MessageTypes[24];
        internal__static_sally_CellRange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CellRange, global::sally.CellRange.Builder>(internal__static_sally_CellRange__Descriptor,
                new string[] { "Start", "End", });
        internal__static_sally_CellRanges__Descriptor = Descriptor.MessageTypes[25];
        internal__static_sally_CellRanges__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CellRanges, global::sally.CellRanges.Builder>(internal__static_sally_CellRanges__Descriptor,
                new string[] { "Range", });
        internal__static_sally_CellData__Descriptor = Descriptor.MessageTypes[26];
        internal__static_sally_CellData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CellData, global::sally.CellData.Builder>(internal__static_sally_CellData__Descriptor,
                new string[] { "Position", "Value", "Formula", });
        internal__static_sally_RangeData__Descriptor = Descriptor.MessageTypes[27];
        internal__static_sally_RangeData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.RangeData, global::sally.RangeData.Builder>(internal__static_sally_RangeData__Descriptor,
                new string[] { "Cells", });
        internal__static_sally_BorderLine__Descriptor = Descriptor.MessageTypes[28];
        internal__static_sally_BorderLine__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.BorderLine, global::sally.BorderLine.Builder>(internal__static_sally_BorderLine__Descriptor,
                new string[] { "BorderColor", "FormatStyle", "ExcelBorderStyle", "ExcelBorderWeight", "OoInnerLineWidth", "OoOuterLineWidth", "OoLineDistance", });
        internal__static_sally_CellBorder__Descriptor = Descriptor.MessageTypes[29];
        internal__static_sally_CellBorder__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CellBorder, global::sally.CellBorder.Builder>(internal__static_sally_CellBorder__Descriptor,
                new string[] { "Top", "Bottom", "Left", "Right", });
        internal__static_sally_Font__Descriptor = Descriptor.MessageTypes[30];
        internal__static_sally_Font__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.Font, global::sally.Font.Builder>(internal__static_sally_Font__Descriptor,
                new string[] { "FontName", "FontColor", "FontSize", "IsItalic", "IsBold", "IsUnderlined", });
        internal__static_sally_Cell__Descriptor = Descriptor.MessageTypes[31];
        internal__static_sally_Cell__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.Cell, global::sally.Cell.Builder>(internal__static_sally_Cell__Descriptor,
                new string[] { "Data", "BackColor", "Font", "Border", });
        internal__static_sally_Sheet__Descriptor = Descriptor.MessageTypes[32];
        internal__static_sally_Sheet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.Sheet, global::sally.Sheet.Builder>(internal__static_sally_Sheet__Descriptor,
                new string[] { "Id", "Cells", });
        internal__static_sally_ParsingParameter__Descriptor = Descriptor.MessageTypes[33];
        internal__static_sally_ParsingParameter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ParsingParameter, global::sally.ParsingParameter.Builder>(internal__static_sally_ParsingParameter__Descriptor,
                new string[] { "UseTextAsLegend", "UseColorAsStructure", "UseBorderAsStructure", "UseFontAsStructure", });
        internal__static_sally_Data__Descriptor = Descriptor.MessageTypes[34];
        internal__static_sally_Data__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.Data, global::sally.Data.Builder>(internal__static_sally_Data__Descriptor,
                new string[] { "Sheets", "FileName", "Parameter", });
        internal__static_sally_FBCreateData__Descriptor = Descriptor.MessageTypes[35];
        internal__static_sally_FBCreateData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FBCreateData, global::sally.FBCreateData.Builder>(internal__static_sally_FBCreateData__Descriptor,
                new string[] { "Range", "Legends", "Parameter", "ConnectToAll", });
        internal__static_sally_LegendCreateData__Descriptor = Descriptor.MessageTypes[36];
        internal__static_sally_LegendCreateData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.LegendCreateData, global::sally.LegendCreateData.Builder>(internal__static_sally_LegendCreateData__Descriptor,
                new string[] { "Items", "Header", "FileName", "Parameter", });
        internal__static_sally_AbstractElementMsg__Descriptor = Descriptor.MessageTypes[37];
        internal__static_sally_AbstractElementMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.AbstractElementMsg, global::sally.AbstractElementMsg.Builder>(internal__static_sally_AbstractElementMsg__Descriptor,
                new string[] { "Id", "Value", "Formula", "Parameters", });
        internal__static_sally_AbstractDataModelMsg__Descriptor = Descriptor.MessageTypes[38];
        internal__static_sally_AbstractDataModelMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.AbstractDataModelMsg, global::sally.AbstractDataModelMsg.Builder>(internal__static_sally_AbstractDataModelMsg__Descriptor,
                new string[] { "Elements", });
        internal__static_sally_LegendMsg__Descriptor = Descriptor.MessageTypes[39];
        internal__static_sally_LegendMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.LegendMsg, global::sally.LegendMsg.Builder>(internal__static_sally_LegendMsg__Descriptor,
                new string[] { "Id", "Items", "Header", });
        internal__static_sally_LegendProductEntryMsg__Descriptor = Descriptor.MessageTypes[40];
        internal__static_sally_LegendProductEntryMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.LegendProductEntryMsg, global::sally.LegendProductEntryMsg.Builder>(internal__static_sally_LegendProductEntryMsg__Descriptor,
                new string[] { "Legends", "Elements", });
        internal__static_sally_LegendProductMsg__Descriptor = Descriptor.MessageTypes[41];
        internal__static_sally_LegendProductMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.LegendProductMsg, global::sally.LegendProductMsg.Builder>(internal__static_sally_LegendProductMsg__Descriptor,
                new string[] { "Legends", "Entries", });
        internal__static_sally_FBEntryMsg__Descriptor = Descriptor.MessageTypes[42];
        internal__static_sally_FBEntryMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FBEntryMsg, global::sally.FBEntryMsg.Builder>(internal__static_sally_FBEntryMsg__Descriptor,
                new string[] { "DomainElem", "AbsElemId", });
        internal__static_sally_FunctionalBlockMsg__Descriptor = Descriptor.MessageTypes[43];
        internal__static_sally_FunctionalBlockMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FunctionalBlockMsg, global::sally.FunctionalBlockMsg.Builder>(internal__static_sally_FunctionalBlockMsg__Descriptor,
                new string[] { "Id", "Domain", "Entry", });
        internal__static_sally_AbstractSpreadsheetMsg__Descriptor = Descriptor.MessageTypes[44];
        internal__static_sally_AbstractSpreadsheetMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.AbstractSpreadsheetMsg, global::sally.AbstractSpreadsheetMsg.Builder>(internal__static_sally_AbstractSpreadsheetMsg__Descriptor,
                new string[] { "Elements", "Legends", "FunctionalBlocks", });
        internal__static_sally_CellSpaceInformationMsg__Descriptor = Descriptor.MessageTypes[45];
        internal__static_sally_CellSpaceInformationMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.CellSpaceInformationMsg, global::sally.CellSpaceInformationMsg.Builder>(internal__static_sally_CellSpaceInformationMsg__Descriptor,
                new string[] { "Worksheet", "Row", "Column", });
        internal__static_sally_ElementMappingMsg__Descriptor = Descriptor.MessageTypes[46];
        internal__static_sally_ElementMappingMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ElementMappingMsg, global::sally.ElementMappingMsg.Builder>(internal__static_sally_ElementMappingMsg__Descriptor,
                new string[] { "Position", "AbsElemId", });
        internal__static_sally_LegendMappingMsg__Descriptor = Descriptor.MessageTypes[47];
        internal__static_sally_LegendMappingMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.LegendMappingMsg, global::sally.LegendMappingMsg.Builder>(internal__static_sally_LegendMappingMsg__Descriptor,
                new string[] { "ElementPositions", "HeaderPosition", "HeaderElementId", "LegendId", });
        internal__static_sally_DomainMappingMsg__Descriptor = Descriptor.MessageTypes[48];
        internal__static_sally_DomainMappingMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.DomainMappingMsg, global::sally.DomainMappingMsg.Builder>(internal__static_sally_DomainMappingMsg__Descriptor,
                new string[] { "Position", "DomainElement", });
        internal__static_sally_FunctionalBlockMappingMsg__Descriptor = Descriptor.MessageTypes[49];
        internal__static_sally_FunctionalBlockMappingMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FunctionalBlockMappingMsg, global::sally.FunctionalBlockMappingMsg.Builder>(internal__static_sally_FunctionalBlockMappingMsg__Descriptor,
                new string[] { "Domain", "ElementMapping", "DomainMapping", "FbId", });
        internal__static_sally_MappingMsg__Descriptor = Descriptor.MessageTypes[50];
        internal__static_sally_MappingMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.MappingMsg, global::sally.MappingMsg.Builder>(internal__static_sally_MappingMsg__Descriptor,
                new string[] { "LegendMappings", "FbMappings", });
        internal__static_sally_ModelDataMsg__Descriptor = Descriptor.MessageTypes[51];
        internal__static_sally_ModelDataMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ModelDataMsg, global::sally.ModelDataMsg.Builder>(internal__static_sally_ModelDataMsg__Descriptor,
                new string[] { "Asm", "Mapping", });
        internal__static_sally_AreaInformationMsg__Descriptor = Descriptor.MessageTypes[52];
        internal__static_sally_AreaInformationMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.AreaInformationMsg, global::sally.AreaInformationMsg.Builder>(internal__static_sally_AreaInformationMsg__Descriptor,
                new string[] { "Id", "Type", "Ranges", });
        internal__static_sally_AmbiguousInformationMsg__Descriptor = Descriptor.MessageTypes[53];
        internal__static_sally_AmbiguousInformationMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.AmbiguousInformationMsg, global::sally.AmbiguousInformationMsg.Builder>(internal__static_sally_AmbiguousInformationMsg__Descriptor,
                new string[] { "Position", "RelatedAreaIds", });
        internal__static_sally_AffiliationInformationMsg__Descriptor = Descriptor.MessageTypes[54];
        internal__static_sally_AffiliationInformationMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.AffiliationInformationMsg, global::sally.AffiliationInformationMsg.Builder>(internal__static_sally_AffiliationInformationMsg__Descriptor,
                new string[] { "Id", "AffiliatedIds", });
        internal__static_sally_ParsingResultMsg__Descriptor = Descriptor.MessageTypes[55];
        internal__static_sally_ParsingResultMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ParsingResultMsg, global::sally.ParsingResultMsg.Builder>(internal__static_sally_ParsingResultMsg__Descriptor,
                new string[] { "Areas", "Ambig", "Affiliation", });
        internal__static_sally_SemanticActionData__Descriptor = Descriptor.MessageTypes[56];
        internal__static_sally_SemanticActionData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.SemanticActionData, global::sally.SemanticActionData.Builder>(internal__static_sally_SemanticActionData__Descriptor,
                new string[] { "Cd", "Name", "FileName", "SenderId", "SheetName", "Row", "Col", "Coordinates", });
        internal__static_sally_SemanticData__Descriptor = Descriptor.MessageTypes[57];
        internal__static_sally_SemanticData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.SemanticData, global::sally.SemanticData.Builder>(internal__static_sally_SemanticData__Descriptor,
                new string[] { "FileName", "SpreadsheetModel", });
        internal__static_sally_SpreadsheetModel__Descriptor = Descriptor.MessageTypes[58];
        internal__static_sally_SpreadsheetModel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.SpreadsheetModel, global::sally.SpreadsheetModel.Builder>(internal__static_sally_SpreadsheetModel__Descriptor,
                new string[] { "Asm", "Ontomapping", "SheetMapping", });
        internal__static_sally_WorksheetIDPair__Descriptor = Descriptor.MessageTypes[59];
        internal__static_sally_WorksheetIDPair__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.WorksheetIDPair, global::sally.WorksheetIDPair.Builder>(internal__static_sally_WorksheetIDPair__Descriptor,
                new string[] { "Worksheet", "Id", });
        internal__static_sally_SpreadsheetOntologyPair__Descriptor = Descriptor.MessageTypes[60];
        internal__static_sally_SpreadsheetOntologyPair__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.SpreadsheetOntologyPair, global::sally.SpreadsheetOntologyPair.Builder>(internal__static_sally_SpreadsheetOntologyPair__Descriptor,
                new string[] { "Asmid", "Uri", });
        internal__static_sally_MMTUri__Descriptor = Descriptor.MessageTypes[61];
        internal__static_sally_MMTUri__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.MMTUri, global::sally.MMTUri.Builder>(internal__static_sally_MMTUri__Descriptor,
                new string[] { "Uri", });
        internal__static_sally_OntologyData__Descriptor = Descriptor.MessageTypes[62];
        internal__static_sally_OntologyData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.OntologyData, global::sally.OntologyData.Builder>(internal__static_sally_OntologyData__Descriptor,
                new string[] { "Concepts", "Relations", });
        internal__static_sally_OntologyConcept__Descriptor = Descriptor.MessageTypes[63];
        internal__static_sally_OntologyConcept__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.OntologyConcept, global::sally.OntologyConcept.Builder>(internal__static_sally_OntologyConcept__Descriptor,
                new string[] { "Uri", "Params", });
        internal__static_sally_OntologyRelation__Descriptor = Descriptor.MessageTypes[64];
        internal__static_sally_OntologyRelation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.OntologyRelation, global::sally.OntologyRelation.Builder>(internal__static_sally_OntologyRelation__Descriptor,
                new string[] { "Uri", "SrcConcept", "DestConcept", });
        internal__static_sally_StringMap__Descriptor = Descriptor.MessageTypes[65];
        internal__static_sally_StringMap__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.StringMap, global::sally.StringMap.Builder>(internal__static_sally_StringMap__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_sally_KnowledgeObject__Descriptor = Descriptor.MessageTypes[66];
        internal__static_sally_KnowledgeObject__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.KnowledgeObject, global::sally.KnowledgeObject.Builder>(internal__static_sally_KnowledgeObject__Descriptor,
                new string[] { "Uri", "Values", });
        internal__static_sally_KnowledgeBase__Descriptor = Descriptor.MessageTypes[67];
        internal__static_sally_KnowledgeBase__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.KnowledgeBase, global::sally.KnowledgeBase.Builder>(internal__static_sally_KnowledgeBase__Descriptor,
                new string[] { "Objects", "FileName", });
        internal__static_sally_OntologyItem__Descriptor = Descriptor.MessageTypes[68];
        internal__static_sally_OntologyItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.OntologyItem, global::sally.OntologyItem.Builder>(internal__static_sally_OntologyItem__Descriptor,
                new string[] { "Theory", "Symbol", });
        internal__static_sally_ResourceContext__Descriptor = Descriptor.MessageTypes[69];
        internal__static_sally_ResourceContext__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ResourceContext, global::sally.ResourceContext.Builder>(internal__static_sally_ResourceContext__Descriptor,
                new string[] { "ActionId", });
        internal__static_sally_ContextKnowledge__Descriptor = Descriptor.MessageTypes[70];
        internal__static_sally_ContextKnowledge__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ContextKnowledge, global::sally.ContextKnowledge.Builder>(internal__static_sally_ContextKnowledge__Descriptor,
                new string[] { "Context", });
        internal__static_sally_FormulaRequest__Descriptor = Descriptor.MessageTypes[71];
        internal__static_sally_FormulaRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FormulaRequest, global::sally.FormulaRequest.Builder>(internal__static_sally_FormulaRequest__Descriptor,
                new string[] { "ActionId", });
        internal__static_sally_FormulaInfo__Descriptor = Descriptor.MessageTypes[72];
        internal__static_sally_FormulaInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FormulaInfo, global::sally.FormulaInfo.Builder>(internal__static_sally_FormulaInfo__Descriptor,
                new string[] { "Json", });
        internal__static_sally_TheoNavigateTo__Descriptor = Descriptor.MessageTypes[73];
        internal__static_sally_TheoNavigateTo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.TheoNavigateTo, global::sally.TheoNavigateTo.Builder>(internal__static_sally_TheoNavigateTo__Descriptor,
                new string[] { "Term", "ActionId", });
        internal__static_sally_Frame__Descriptor = Descriptor.MessageTypes[74];
        internal__static_sally_Frame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.Frame, global::sally.Frame.Builder>(internal__static_sally_Frame__Descriptor,
                new string[] { "Uid", "ActionId", });
        internal__static_sally_ServiceCall__Descriptor = Descriptor.MessageTypes[75];
        internal__static_sally_ServiceCall__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.ServiceCall, global::sally.ServiceCall.Builder>(internal__static_sally_ServiceCall__Descriptor,
                new string[] { "Uid", });
        internal__static_sally_FormulaCell__Descriptor = Descriptor.MessageTypes[76];
        internal__static_sally_FormulaCell__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FormulaCell, global::sally.FormulaCell.Builder>(internal__static_sally_FormulaCell__Descriptor,
                new string[] { "Row", "Col", "Formula", "Value", });
        internal__static_sally_FormulaSheetData__Descriptor = Descriptor.MessageTypes[77];
        internal__static_sally_FormulaSheetData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FormulaSheetData, global::sally.FormulaSheetData.Builder>(internal__static_sally_FormulaSheetData__Descriptor,
                new string[] { "Sheetname", "StartRow", "StartCol", "EndRow", "EndCol", "Cellinf", });
        internal__static_sally_FormulaMap__Descriptor = Descriptor.MessageTypes[78];
        internal__static_sally_FormulaMap__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FormulaMap, global::sally.FormulaMap.Builder>(internal__static_sally_FormulaMap__Descriptor,
                new string[] { "Filename", "Sheets", });
        internal__static_sally_RequestASM__Descriptor = Descriptor.MessageTypes[79];
        internal__static_sally_RequestASM__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.RequestASM, global::sally.RequestASM.Builder>(internal__static_sally_RequestASM__Descriptor,
                new string[] { "Filename", });
        internal__static_sally_SaveASM__Descriptor = Descriptor.MessageTypes[80];
        internal__static_sally_SaveASM__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.SaveASM, global::sally.SaveASM.Builder>(internal__static_sally_SaveASM__Descriptor,
                new string[] { "SemanticData", });
        internal__static_sally_FileRef__Descriptor = Descriptor.MessageTypes[81];
        internal__static_sally_FileRef__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FileRef, global::sally.FileRef.Builder>(internal__static_sally_FileRef__Descriptor,
                new string[] { "ResourceURI", "Mime", });
        internal__static_sally_FileContents__Descriptor = Descriptor.MessageTypes[82];
        internal__static_sally_FileContents__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.FileContents, global::sally.FileContents.Builder>(internal__static_sally_FileContents__Descriptor,
                new string[] { "File", "Contents", });
        internal__static_sally_TextPosition__Descriptor = Descriptor.MessageTypes[83];
        internal__static_sally_TextPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.TextPosition, global::sally.TextPosition.Builder>(internal__static_sally_TextPosition__Descriptor,
                new string[] { "Line", "Col", });
        internal__static_sally_XMLPosition__Descriptor = Descriptor.MessageTypes[84];
        internal__static_sally_XMLPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.XMLPosition, global::sally.XMLPosition.Builder>(internal__static_sally_XMLPosition__Descriptor,
                new string[] { "Xpath", });
        internal__static_sally_XMLNotification__Descriptor = Descriptor.MessageTypes[85];
        internal__static_sally_XMLNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.XMLNotification, global::sally.XMLNotification.Builder>(internal__static_sally_XMLNotification__Descriptor,
                new string[] { "Pos", "Msg", "Uri", });
        internal__static_sally_TextNotification__Descriptor = Descriptor.MessageTypes[86];
        internal__static_sally_TextNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.TextNotification, global::sally.TextNotification.Builder>(internal__static_sally_TextNotification__Descriptor,
                new string[] { "Pos", "Msg", "Uri", });
        internal__static_sally_TextFileNotifications__Descriptor = Descriptor.MessageTypes[87];
        internal__static_sally_TextFileNotifications__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.TextFileNotifications, global::sally.TextFileNotifications.Builder>(internal__static_sally_TextFileNotifications__Descriptor,
                new string[] { "File", "Notifications", });
        internal__static_sally_TextAutocomplete__Descriptor = Descriptor.MessageTypes[88];
        internal__static_sally_TextAutocomplete__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::sally.TextAutocomplete, global::sally.TextAutocomplete.Builder>(internal__static_sally_TextAutocomplete__Descriptor,
                new string[] { "File", "Offset", "FileContents", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public enum DataParameter {
    AllDiff = 1,
    SameStringSameElement = 2,
    SameContentSameElement = 3,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Cookie : pb::GeneratedMessage<Cookie, Cookie.Builder> {
    private Cookie() { }
    private static readonly Cookie defaultInstance = new Cookie().MakeReadOnly();
    private static readonly string[] _cookieFieldNames = new string[] { "cookie", "url" };
    private static readonly uint[] _cookieFieldTags = new uint[] { 18, 10 };
    public static Cookie DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Cookie DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Cookie ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_Cookie__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Cookie, Cookie.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_Cookie__FieldAccessorTable; }
    }
    
    public const int UrlFieldNumber = 1;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int Cookie_FieldNumber = 2;
    private bool hasCookie_;
    private string cookie_ = "";
    public bool HasCookie_ {
      get { return hasCookie_; }
    }
    public string Cookie_ {
      get { return cookie_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUrl) return false;
        if (!hasCookie_) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cookieFieldNames;
      if (hasUrl) {
        output.WriteString(1, field_names[1], Url);
      }
      if (hasCookie_) {
        output.WriteString(2, field_names[0], Cookie_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Url);
        }
        if (hasCookie_) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Cookie_);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Cookie ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cookie ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cookie ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cookie ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cookie ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cookie ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Cookie ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Cookie ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Cookie ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cookie ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Cookie MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Cookie prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Cookie, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Cookie cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Cookie result;
      
      private Cookie PrepareBuilder() {
        if (resultIsReadOnly) {
          Cookie original = result;
          result = new Cookie();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Cookie MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.Cookie.Descriptor; }
      }
      
      public override Cookie DefaultInstanceForType {
        get { return global::sally.Cookie.DefaultInstance; }
      }
      
      public override Cookie BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Cookie) {
          return MergeFrom((Cookie) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Cookie other) {
        if (other == global::sally.Cookie.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasCookie_) {
          Cookie_ = other.Cookie_;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cookieFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cookieFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 18: {
              result.hasCookie_ = input.ReadString(ref result.cookie_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasCookie_ {
        get { return result.hasCookie_; }
      }
      public string Cookie_ {
        get { return result.Cookie_; }
        set { SetCookie_(value); }
      }
      public Builder SetCookie_(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCookie_ = true;
        result.cookie_ = value;
        return this;
      }
      public Builder ClearCookie_() {
        PrepareBuilder();
        result.hasCookie_ = false;
        result.cookie_ = "";
        return this;
      }
    }
    static Cookie() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SwitchToApp : pb::GeneratedMessage<SwitchToApp, SwitchToApp.Builder> {
    private SwitchToApp() { }
    private static readonly SwitchToApp defaultInstance = new SwitchToApp().MakeReadOnly();
    private static readonly string[] _switchToAppFieldNames = new string[] { "fileName" };
    private static readonly uint[] _switchToAppFieldTags = new uint[] { 10 };
    public static SwitchToApp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SwitchToApp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SwitchToApp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_SwitchToApp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SwitchToApp, SwitchToApp.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_SwitchToApp__FieldAccessorTable; }
    }
    
    public const int FileNameFieldNumber = 1;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _switchToAppFieldNames;
      if (hasFileName) {
        output.WriteString(1, field_names[0], FileName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FileName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SwitchToApp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SwitchToApp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SwitchToApp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SwitchToApp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SwitchToApp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SwitchToApp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SwitchToApp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SwitchToApp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SwitchToApp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SwitchToApp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SwitchToApp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SwitchToApp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SwitchToApp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SwitchToApp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SwitchToApp result;
      
      private SwitchToApp PrepareBuilder() {
        if (resultIsReadOnly) {
          SwitchToApp original = result;
          result = new SwitchToApp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SwitchToApp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.SwitchToApp.Descriptor; }
      }
      
      public override SwitchToApp DefaultInstanceForType {
        get { return global::sally.SwitchToApp.DefaultInstance; }
      }
      
      public override SwitchToApp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SwitchToApp) {
          return MergeFrom((SwitchToApp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SwitchToApp other) {
        if (other == global::sally.SwitchToApp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_switchToAppFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _switchToAppFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
    }
    static SwitchToApp() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TheoOpenWindow : pb::GeneratedMessage<TheoOpenWindow, TheoOpenWindow.Builder> {
    private TheoOpenWindow() { }
    private static readonly TheoOpenWindow defaultInstance = new TheoOpenWindow().MakeReadOnly();
    private static readonly string[] _theoOpenWindowFieldNames = new string[] { "cookie", "position", "sizeX", "sizeY", "title", "url" };
    private static readonly uint[] _theoOpenWindowFieldTags = new uint[] { 50, 10, 24, 32, 42, 18 };
    public static TheoOpenWindow DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TheoOpenWindow DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TheoOpenWindow ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_TheoOpenWindow__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TheoOpenWindow, TheoOpenWindow.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_TheoOpenWindow__FieldAccessorTable; }
    }
    
    public const int PositionFieldNumber = 1;
    private bool hasPosition;
    private global::sally.ScreenCoordinates position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::sally.ScreenCoordinates Position {
      get { return position_ ?? global::sally.ScreenCoordinates.DefaultInstance; }
    }
    
    public const int UrlFieldNumber = 2;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int SizeXFieldNumber = 3;
    private bool hasSizeX;
    private int sizeX_;
    public bool HasSizeX {
      get { return hasSizeX; }
    }
    public int SizeX {
      get { return sizeX_; }
    }
    
    public const int SizeYFieldNumber = 4;
    private bool hasSizeY;
    private int sizeY_;
    public bool HasSizeY {
      get { return hasSizeY; }
    }
    public int SizeY {
      get { return sizeY_; }
    }
    
    public const int TitleFieldNumber = 5;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int CookieFieldNumber = 6;
    private bool hasCookie;
    private global::sally.Cookie cookie_;
    public bool HasCookie {
      get { return hasCookie; }
    }
    public global::sally.Cookie Cookie {
      get { return cookie_ ?? global::sally.Cookie.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPosition) return false;
        if (!hasUrl) return false;
        if (!Position.IsInitialized) return false;
        if (HasCookie) {
          if (!Cookie.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _theoOpenWindowFieldNames;
      if (hasPosition) {
        output.WriteMessage(1, field_names[1], Position);
      }
      if (hasUrl) {
        output.WriteString(2, field_names[5], Url);
      }
      if (hasSizeX) {
        output.WriteInt32(3, field_names[2], SizeX);
      }
      if (hasSizeY) {
        output.WriteInt32(4, field_names[3], SizeY);
      }
      if (hasTitle) {
        output.WriteString(5, field_names[4], Title);
      }
      if (hasCookie) {
        output.WriteMessage(6, field_names[0], Cookie);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Position);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Url);
        }
        if (hasSizeX) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, SizeX);
        }
        if (hasSizeY) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, SizeY);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Title);
        }
        if (hasCookie) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Cookie);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TheoOpenWindow ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TheoOpenWindow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TheoOpenWindow ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TheoOpenWindow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TheoOpenWindow ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TheoOpenWindow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TheoOpenWindow ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TheoOpenWindow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TheoOpenWindow ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TheoOpenWindow ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TheoOpenWindow MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TheoOpenWindow prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TheoOpenWindow, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TheoOpenWindow cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TheoOpenWindow result;
      
      private TheoOpenWindow PrepareBuilder() {
        if (resultIsReadOnly) {
          TheoOpenWindow original = result;
          result = new TheoOpenWindow();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TheoOpenWindow MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.TheoOpenWindow.Descriptor; }
      }
      
      public override TheoOpenWindow DefaultInstanceForType {
        get { return global::sally.TheoOpenWindow.DefaultInstance; }
      }
      
      public override TheoOpenWindow BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TheoOpenWindow) {
          return MergeFrom((TheoOpenWindow) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TheoOpenWindow other) {
        if (other == global::sally.TheoOpenWindow.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasSizeX) {
          SizeX = other.SizeX;
        }
        if (other.HasSizeY) {
          SizeY = other.SizeY;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasCookie) {
          MergeCookie(other.Cookie);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_theoOpenWindowFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _theoOpenWindowFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.ScreenCoordinates.Builder subBuilder = global::sally.ScreenCoordinates.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 24: {
              result.hasSizeX = input.ReadInt32(ref result.sizeX_);
              break;
            }
            case 32: {
              result.hasSizeY = input.ReadInt32(ref result.sizeY_);
              break;
            }
            case 42: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 50: {
              global::sally.Cookie.Builder subBuilder = global::sally.Cookie.CreateBuilder();
              if (result.hasCookie) {
                subBuilder.MergeFrom(Cookie);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Cookie = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::sally.ScreenCoordinates Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::sally.ScreenCoordinates.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::sally.ScreenCoordinates.DefaultInstance) {
            result.position_ = global::sally.ScreenCoordinates.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasSizeX {
        get { return result.hasSizeX; }
      }
      public int SizeX {
        get { return result.SizeX; }
        set { SetSizeX(value); }
      }
      public Builder SetSizeX(int value) {
        PrepareBuilder();
        result.hasSizeX = true;
        result.sizeX_ = value;
        return this;
      }
      public Builder ClearSizeX() {
        PrepareBuilder();
        result.hasSizeX = false;
        result.sizeX_ = 0;
        return this;
      }
      
      public bool HasSizeY {
        get { return result.hasSizeY; }
      }
      public int SizeY {
        get { return result.SizeY; }
        set { SetSizeY(value); }
      }
      public Builder SetSizeY(int value) {
        PrepareBuilder();
        result.hasSizeY = true;
        result.sizeY_ = value;
        return this;
      }
      public Builder ClearSizeY() {
        PrepareBuilder();
        result.hasSizeY = false;
        result.sizeY_ = 0;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasCookie {
       get { return result.hasCookie; }
      }
      public global::sally.Cookie Cookie {
        get { return result.Cookie; }
        set { SetCookie(value); }
      }
      public Builder SetCookie(global::sally.Cookie value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCookie = true;
        result.cookie_ = value;
        return this;
      }
      public Builder SetCookie(global::sally.Cookie.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCookie = true;
        result.cookie_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCookie(global::sally.Cookie value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCookie &&
            result.cookie_ != global::sally.Cookie.DefaultInstance) {
            result.cookie_ = global::sally.Cookie.CreateBuilder(result.cookie_).MergeFrom(value).BuildPartial();
        } else {
          result.cookie_ = value;
        }
        result.hasCookie = true;
        return this;
      }
      public Builder ClearCookie() {
        PrepareBuilder();
        result.hasCookie = false;
        result.cookie_ = null;
        return this;
      }
    }
    static TheoOpenWindow() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TheoChangeWindow : pb::GeneratedMessage<TheoChangeWindow, TheoChangeWindow.Builder> {
    private TheoChangeWindow() { }
    private static readonly TheoChangeWindow defaultInstance = new TheoChangeWindow().MakeReadOnly();
    private static readonly string[] _theoChangeWindowFieldNames = new string[] { "cookie", "position", "sizeX", "sizeY", "title", "url", "windowid" };
    private static readonly uint[] _theoChangeWindowFieldTags = new uint[] { 50, 10, 24, 32, 42, 18, 56 };
    public static TheoChangeWindow DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TheoChangeWindow DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TheoChangeWindow ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_TheoChangeWindow__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TheoChangeWindow, TheoChangeWindow.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_TheoChangeWindow__FieldAccessorTable; }
    }
    
    public const int PositionFieldNumber = 1;
    private bool hasPosition;
    private global::sally.ScreenCoordinates position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::sally.ScreenCoordinates Position {
      get { return position_ ?? global::sally.ScreenCoordinates.DefaultInstance; }
    }
    
    public const int UrlFieldNumber = 2;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int SizeXFieldNumber = 3;
    private bool hasSizeX;
    private int sizeX_;
    public bool HasSizeX {
      get { return hasSizeX; }
    }
    public int SizeX {
      get { return sizeX_; }
    }
    
    public const int SizeYFieldNumber = 4;
    private bool hasSizeY;
    private int sizeY_;
    public bool HasSizeY {
      get { return hasSizeY; }
    }
    public int SizeY {
      get { return sizeY_; }
    }
    
    public const int TitleFieldNumber = 5;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int CookieFieldNumber = 6;
    private bool hasCookie;
    private global::sally.Cookie cookie_;
    public bool HasCookie {
      get { return hasCookie; }
    }
    public global::sally.Cookie Cookie {
      get { return cookie_ ?? global::sally.Cookie.DefaultInstance; }
    }
    
    public const int WindowidFieldNumber = 7;
    private bool hasWindowid;
    private int windowid_;
    public bool HasWindowid {
      get { return hasWindowid; }
    }
    public int Windowid {
      get { return windowid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWindowid) return false;
        if (HasPosition) {
          if (!Position.IsInitialized) return false;
        }
        if (HasCookie) {
          if (!Cookie.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _theoChangeWindowFieldNames;
      if (hasPosition) {
        output.WriteMessage(1, field_names[1], Position);
      }
      if (hasUrl) {
        output.WriteString(2, field_names[5], Url);
      }
      if (hasSizeX) {
        output.WriteInt32(3, field_names[2], SizeX);
      }
      if (hasSizeY) {
        output.WriteInt32(4, field_names[3], SizeY);
      }
      if (hasTitle) {
        output.WriteString(5, field_names[4], Title);
      }
      if (hasCookie) {
        output.WriteMessage(6, field_names[0], Cookie);
      }
      if (hasWindowid) {
        output.WriteInt32(7, field_names[6], Windowid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Position);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Url);
        }
        if (hasSizeX) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, SizeX);
        }
        if (hasSizeY) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, SizeY);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Title);
        }
        if (hasCookie) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Cookie);
        }
        if (hasWindowid) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Windowid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TheoChangeWindow ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TheoChangeWindow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TheoChangeWindow ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TheoChangeWindow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TheoChangeWindow ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TheoChangeWindow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TheoChangeWindow ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TheoChangeWindow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TheoChangeWindow ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TheoChangeWindow ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TheoChangeWindow MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TheoChangeWindow prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TheoChangeWindow, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TheoChangeWindow cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TheoChangeWindow result;
      
      private TheoChangeWindow PrepareBuilder() {
        if (resultIsReadOnly) {
          TheoChangeWindow original = result;
          result = new TheoChangeWindow();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TheoChangeWindow MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.TheoChangeWindow.Descriptor; }
      }
      
      public override TheoChangeWindow DefaultInstanceForType {
        get { return global::sally.TheoChangeWindow.DefaultInstance; }
      }
      
      public override TheoChangeWindow BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TheoChangeWindow) {
          return MergeFrom((TheoChangeWindow) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TheoChangeWindow other) {
        if (other == global::sally.TheoChangeWindow.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasSizeX) {
          SizeX = other.SizeX;
        }
        if (other.HasSizeY) {
          SizeY = other.SizeY;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasCookie) {
          MergeCookie(other.Cookie);
        }
        if (other.HasWindowid) {
          Windowid = other.Windowid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_theoChangeWindowFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _theoChangeWindowFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.ScreenCoordinates.Builder subBuilder = global::sally.ScreenCoordinates.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 24: {
              result.hasSizeX = input.ReadInt32(ref result.sizeX_);
              break;
            }
            case 32: {
              result.hasSizeY = input.ReadInt32(ref result.sizeY_);
              break;
            }
            case 42: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 50: {
              global::sally.Cookie.Builder subBuilder = global::sally.Cookie.CreateBuilder();
              if (result.hasCookie) {
                subBuilder.MergeFrom(Cookie);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Cookie = subBuilder.BuildPartial();
              break;
            }
            case 56: {
              result.hasWindowid = input.ReadInt32(ref result.windowid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::sally.ScreenCoordinates Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::sally.ScreenCoordinates.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::sally.ScreenCoordinates.DefaultInstance) {
            result.position_ = global::sally.ScreenCoordinates.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasSizeX {
        get { return result.hasSizeX; }
      }
      public int SizeX {
        get { return result.SizeX; }
        set { SetSizeX(value); }
      }
      public Builder SetSizeX(int value) {
        PrepareBuilder();
        result.hasSizeX = true;
        result.sizeX_ = value;
        return this;
      }
      public Builder ClearSizeX() {
        PrepareBuilder();
        result.hasSizeX = false;
        result.sizeX_ = 0;
        return this;
      }
      
      public bool HasSizeY {
        get { return result.hasSizeY; }
      }
      public int SizeY {
        get { return result.SizeY; }
        set { SetSizeY(value); }
      }
      public Builder SetSizeY(int value) {
        PrepareBuilder();
        result.hasSizeY = true;
        result.sizeY_ = value;
        return this;
      }
      public Builder ClearSizeY() {
        PrepareBuilder();
        result.hasSizeY = false;
        result.sizeY_ = 0;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasCookie {
       get { return result.hasCookie; }
      }
      public global::sally.Cookie Cookie {
        get { return result.Cookie; }
        set { SetCookie(value); }
      }
      public Builder SetCookie(global::sally.Cookie value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCookie = true;
        result.cookie_ = value;
        return this;
      }
      public Builder SetCookie(global::sally.Cookie.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCookie = true;
        result.cookie_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCookie(global::sally.Cookie value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCookie &&
            result.cookie_ != global::sally.Cookie.DefaultInstance) {
            result.cookie_ = global::sally.Cookie.CreateBuilder(result.cookie_).MergeFrom(value).BuildPartial();
        } else {
          result.cookie_ = value;
        }
        result.hasCookie = true;
        return this;
      }
      public Builder ClearCookie() {
        PrepareBuilder();
        result.hasCookie = false;
        result.cookie_ = null;
        return this;
      }
      
      public bool HasWindowid {
        get { return result.hasWindowid; }
      }
      public int Windowid {
        get { return result.Windowid; }
        set { SetWindowid(value); }
      }
      public Builder SetWindowid(int value) {
        PrepareBuilder();
        result.hasWindowid = true;
        result.windowid_ = value;
        return this;
      }
      public Builder ClearWindowid() {
        PrepareBuilder();
        result.hasWindowid = false;
        result.windowid_ = 0;
        return this;
      }
    }
    static TheoChangeWindow() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TheoCloseWindow : pb::GeneratedMessage<TheoCloseWindow, TheoCloseWindow.Builder> {
    private TheoCloseWindow() { }
    private static readonly TheoCloseWindow defaultInstance = new TheoCloseWindow().MakeReadOnly();
    private static readonly string[] _theoCloseWindowFieldNames = new string[] { "windowid" };
    private static readonly uint[] _theoCloseWindowFieldTags = new uint[] { 8 };
    public static TheoCloseWindow DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TheoCloseWindow DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TheoCloseWindow ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_TheoCloseWindow__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TheoCloseWindow, TheoCloseWindow.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_TheoCloseWindow__FieldAccessorTable; }
    }
    
    public const int WindowidFieldNumber = 1;
    private bool hasWindowid;
    private int windowid_;
    public bool HasWindowid {
      get { return hasWindowid; }
    }
    public int Windowid {
      get { return windowid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWindowid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _theoCloseWindowFieldNames;
      if (hasWindowid) {
        output.WriteInt32(1, field_names[0], Windowid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWindowid) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Windowid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TheoCloseWindow ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TheoCloseWindow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TheoCloseWindow ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TheoCloseWindow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TheoCloseWindow ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TheoCloseWindow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TheoCloseWindow ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TheoCloseWindow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TheoCloseWindow ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TheoCloseWindow ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TheoCloseWindow MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TheoCloseWindow prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TheoCloseWindow, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TheoCloseWindow cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TheoCloseWindow result;
      
      private TheoCloseWindow PrepareBuilder() {
        if (resultIsReadOnly) {
          TheoCloseWindow original = result;
          result = new TheoCloseWindow();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TheoCloseWindow MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.TheoCloseWindow.Descriptor; }
      }
      
      public override TheoCloseWindow DefaultInstanceForType {
        get { return global::sally.TheoCloseWindow.DefaultInstance; }
      }
      
      public override TheoCloseWindow BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TheoCloseWindow) {
          return MergeFrom((TheoCloseWindow) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TheoCloseWindow other) {
        if (other == global::sally.TheoCloseWindow.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWindowid) {
          Windowid = other.Windowid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_theoCloseWindowFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _theoCloseWindowFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWindowid = input.ReadInt32(ref result.windowid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWindowid {
        get { return result.hasWindowid; }
      }
      public int Windowid {
        get { return result.Windowid; }
        set { SetWindowid(value); }
      }
      public Builder SetWindowid(int value) {
        PrepareBuilder();
        result.hasWindowid = true;
        result.windowid_ = value;
        return this;
      }
      public Builder ClearWindowid() {
        PrepareBuilder();
        result.hasWindowid = false;
        result.windowid_ = 0;
        return this;
      }
    }
    static TheoCloseWindow() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class WhoAmI : pb::GeneratedMessage<WhoAmI, WhoAmI.Builder> {
    private WhoAmI() { }
    private static readonly WhoAmI defaultInstance = new WhoAmI().MakeReadOnly();
    private static readonly string[] _whoAmIFieldNames = new string[] { "clientType", "documentType", "environmentType" };
    private static readonly uint[] _whoAmIFieldTags = new uint[] { 8, 24, 16 };
    public static WhoAmI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WhoAmI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WhoAmI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_WhoAmI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WhoAmI, WhoAmI.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_WhoAmI__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum ClientType {
        Alex = 0,
        Theo = 1,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum EnvironmentType {
        Desktop = 0,
        Web = 1,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum DocType {
        Spreadsheet = 0,
        Text = 1,
        CAD = 2,
      }
      
    }
    #endregion
    
    public const int ClientTypeFieldNumber = 1;
    private bool hasClientType;
    private global::sally.WhoAmI.Types.ClientType clientType_ = global::sally.WhoAmI.Types.ClientType.Alex;
    public bool HasClientType {
      get { return hasClientType; }
    }
    public global::sally.WhoAmI.Types.ClientType ClientType {
      get { return clientType_; }
    }
    
    public const int EnvironmentTypeFieldNumber = 2;
    private bool hasEnvironmentType;
    private global::sally.WhoAmI.Types.EnvironmentType environmentType_ = global::sally.WhoAmI.Types.EnvironmentType.Desktop;
    public bool HasEnvironmentType {
      get { return hasEnvironmentType; }
    }
    public global::sally.WhoAmI.Types.EnvironmentType EnvironmentType {
      get { return environmentType_; }
    }
    
    public const int DocumentTypeFieldNumber = 3;
    private bool hasDocumentType;
    private global::sally.WhoAmI.Types.DocType documentType_ = global::sally.WhoAmI.Types.DocType.Spreadsheet;
    public bool HasDocumentType {
      get { return hasDocumentType; }
    }
    public global::sally.WhoAmI.Types.DocType DocumentType {
      get { return documentType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClientType) return false;
        if (!hasEnvironmentType) return false;
        if (!hasDocumentType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _whoAmIFieldNames;
      if (hasClientType) {
        output.WriteEnum(1, field_names[0], (int) ClientType, ClientType);
      }
      if (hasEnvironmentType) {
        output.WriteEnum(2, field_names[2], (int) EnvironmentType, EnvironmentType);
      }
      if (hasDocumentType) {
        output.WriteEnum(3, field_names[1], (int) DocumentType, DocumentType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClientType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ClientType);
        }
        if (hasEnvironmentType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) EnvironmentType);
        }
        if (hasDocumentType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) DocumentType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WhoAmI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WhoAmI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WhoAmI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WhoAmI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WhoAmI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WhoAmI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WhoAmI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WhoAmI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WhoAmI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WhoAmI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WhoAmI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WhoAmI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<WhoAmI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WhoAmI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WhoAmI result;
      
      private WhoAmI PrepareBuilder() {
        if (resultIsReadOnly) {
          WhoAmI original = result;
          result = new WhoAmI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WhoAmI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.WhoAmI.Descriptor; }
      }
      
      public override WhoAmI DefaultInstanceForType {
        get { return global::sally.WhoAmI.DefaultInstance; }
      }
      
      public override WhoAmI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WhoAmI) {
          return MergeFrom((WhoAmI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WhoAmI other) {
        if (other == global::sally.WhoAmI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClientType) {
          ClientType = other.ClientType;
        }
        if (other.HasEnvironmentType) {
          EnvironmentType = other.EnvironmentType;
        }
        if (other.HasDocumentType) {
          DocumentType = other.DocumentType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_whoAmIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _whoAmIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.clientType_, out unknown)) {
                result.hasClientType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.environmentType_, out unknown)) {
                result.hasEnvironmentType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.documentType_, out unknown)) {
                result.hasDocumentType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClientType {
       get { return result.hasClientType; }
      }
      public global::sally.WhoAmI.Types.ClientType ClientType {
        get { return result.ClientType; }
        set { SetClientType(value); }
      }
      public Builder SetClientType(global::sally.WhoAmI.Types.ClientType value) {
        PrepareBuilder();
        result.hasClientType = true;
        result.clientType_ = value;
        return this;
      }
      public Builder ClearClientType() {
        PrepareBuilder();
        result.hasClientType = false;
        result.clientType_ = global::sally.WhoAmI.Types.ClientType.Alex;
        return this;
      }
      
      public bool HasEnvironmentType {
       get { return result.hasEnvironmentType; }
      }
      public global::sally.WhoAmI.Types.EnvironmentType EnvironmentType {
        get { return result.EnvironmentType; }
        set { SetEnvironmentType(value); }
      }
      public Builder SetEnvironmentType(global::sally.WhoAmI.Types.EnvironmentType value) {
        PrepareBuilder();
        result.hasEnvironmentType = true;
        result.environmentType_ = value;
        return this;
      }
      public Builder ClearEnvironmentType() {
        PrepareBuilder();
        result.hasEnvironmentType = false;
        result.environmentType_ = global::sally.WhoAmI.Types.EnvironmentType.Desktop;
        return this;
      }
      
      public bool HasDocumentType {
       get { return result.hasDocumentType; }
      }
      public global::sally.WhoAmI.Types.DocType DocumentType {
        get { return result.DocumentType; }
        set { SetDocumentType(value); }
      }
      public Builder SetDocumentType(global::sally.WhoAmI.Types.DocType value) {
        PrepareBuilder();
        result.hasDocumentType = true;
        result.documentType_ = value;
        return this;
      }
      public Builder ClearDocumentType() {
        PrepareBuilder();
        result.hasDocumentType = false;
        result.documentType_ = global::sally.WhoAmI.Types.DocType.Spreadsheet;
        return this;
      }
    }
    static WhoAmI() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AlexData : pb::GeneratedMessage<AlexData, AlexData.Builder> {
    private AlexData() { }
    private static readonly AlexData defaultInstance = new AlexData().MakeReadOnly();
    private static readonly string[] _alexDataFieldNames = new string[] { "data", "fileName" };
    private static readonly uint[] _alexDataFieldTags = new uint[] { 18, 10 };
    public static AlexData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AlexData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AlexData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_AlexData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AlexData, AlexData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_AlexData__FieldAccessorTable; }
    }
    
    public const int FileNameFieldNumber = 1;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private string data_ = "";
    public bool HasData {
      get { return hasData; }
    }
    public string Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _alexDataFieldNames;
      if (hasFileName) {
        output.WriteString(1, field_names[1], FileName);
      }
      if (hasData) {
        output.WriteString(2, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FileName);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AlexData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AlexData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AlexData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AlexData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AlexData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AlexData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AlexData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AlexData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AlexData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AlexData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AlexData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AlexData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AlexData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AlexData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AlexData result;
      
      private AlexData PrepareBuilder() {
        if (resultIsReadOnly) {
          AlexData original = result;
          result = new AlexData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AlexData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.AlexData.Descriptor; }
      }
      
      public override AlexData DefaultInstanceForType {
        get { return global::sally.AlexData.DefaultInstance; }
      }
      
      public override AlexData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AlexData) {
          return MergeFrom((AlexData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AlexData other) {
        if (other == global::sally.AlexData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_alexDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _alexDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 18: {
              result.hasData = input.ReadString(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public string Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = "";
        return this;
      }
    }
    static AlexData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SallyFrame : pb::GeneratedMessage<SallyFrame, SallyFrame.Builder> {
    private SallyFrame() { }
    private static readonly SallyFrame defaultInstance = new SallyFrame().MakeReadOnly();
    private static readonly string[] _sallyFrameFieldNames = new string[] { "fileName" };
    private static readonly uint[] _sallyFrameFieldTags = new uint[] { 10 };
    public static SallyFrame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SallyFrame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SallyFrame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_SallyFrame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SallyFrame, SallyFrame.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_SallyFrame__FieldAccessorTable; }
    }
    
    public const int FileNameFieldNumber = 1;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sallyFrameFieldNames;
      if (hasFileName) {
        output.WriteString(1, field_names[0], FileName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FileName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SallyFrame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SallyFrame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SallyFrame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SallyFrame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SallyFrame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SallyFrame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SallyFrame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SallyFrame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SallyFrame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SallyFrame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SallyFrame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SallyFrame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SallyFrame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SallyFrame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SallyFrame result;
      
      private SallyFrame PrepareBuilder() {
        if (resultIsReadOnly) {
          SallyFrame original = result;
          result = new SallyFrame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SallyFrame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.SallyFrame.Descriptor; }
      }
      
      public override SallyFrame DefaultInstanceForType {
        get { return global::sally.SallyFrame.DefaultInstance; }
      }
      
      public override SallyFrame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SallyFrame) {
          return MergeFrom((SallyFrame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SallyFrame other) {
        if (other == global::sally.SallyFrame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sallyFrameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sallyFrameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
    }
    static SallyFrame() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Init : pb::GeneratedMessage<Init, Init.Builder> {
    private Init() { }
    private static readonly Init defaultInstance = new Init().MakeReadOnly();
    private static readonly string[] _initFieldNames = new string[] { "options" };
    private static readonly uint[] _initFieldTags = new uint[] { 10 };
    public static Init DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Init DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Init ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_Init__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Init, Init.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_Init__FieldAccessorTable; }
    }
    
    public const int OptionsFieldNumber = 1;
    private bool hasOptions;
    private string options_ = "";
    public bool HasOptions {
      get { return hasOptions; }
    }
    public string Options {
      get { return options_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initFieldNames;
      if (hasOptions) {
        output.WriteString(1, field_names[0], Options);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOptions) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Options);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Init ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Init ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Init ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Init ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Init ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Init ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Init ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Init ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Init ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Init ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Init MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Init prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Init, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Init cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Init result;
      
      private Init PrepareBuilder() {
        if (resultIsReadOnly) {
          Init original = result;
          result = new Init();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Init MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.Init.Descriptor; }
      }
      
      public override Init DefaultInstanceForType {
        get { return global::sally.Init.DefaultInstance; }
      }
      
      public override Init BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Init) {
          return MergeFrom((Init) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Init other) {
        if (other == global::sally.Init.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOptions) {
          Options = other.Options;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasOptions = input.ReadString(ref result.options_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOptions {
        get { return result.hasOptions; }
      }
      public string Options {
        get { return result.Options; }
        set { SetOptions(value); }
      }
      public Builder SetOptions(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOptions = true;
        result.options_ = value;
        return this;
      }
      public Builder ClearOptions() {
        PrepareBuilder();
        result.hasOptions = false;
        result.options_ = "";
        return this;
      }
    }
    static Init() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ScreenCoordinates : pb::GeneratedMessage<ScreenCoordinates, ScreenCoordinates.Builder> {
    private ScreenCoordinates() { }
    private static readonly ScreenCoordinates defaultInstance = new ScreenCoordinates().MakeReadOnly();
    private static readonly string[] _screenCoordinatesFieldNames = new string[] { "x", "y" };
    private static readonly uint[] _screenCoordinatesFieldTags = new uint[] { 8, 16 };
    public static ScreenCoordinates DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ScreenCoordinates DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ScreenCoordinates ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ScreenCoordinates__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ScreenCoordinates, ScreenCoordinates.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ScreenCoordinates__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _screenCoordinatesFieldNames;
      if (hasX) {
        output.WriteInt32(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteInt32(2, field_names[1], Y);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ScreenCoordinates ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScreenCoordinates ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScreenCoordinates ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScreenCoordinates ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScreenCoordinates ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScreenCoordinates ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ScreenCoordinates ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ScreenCoordinates ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ScreenCoordinates ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScreenCoordinates ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ScreenCoordinates MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ScreenCoordinates prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ScreenCoordinates, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ScreenCoordinates cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ScreenCoordinates result;
      
      private ScreenCoordinates PrepareBuilder() {
        if (resultIsReadOnly) {
          ScreenCoordinates original = result;
          result = new ScreenCoordinates();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ScreenCoordinates MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ScreenCoordinates.Descriptor; }
      }
      
      public override ScreenCoordinates DefaultInstanceForType {
        get { return global::sally.ScreenCoordinates.DefaultInstance; }
      }
      
      public override ScreenCoordinates BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ScreenCoordinates) {
          return MergeFrom((ScreenCoordinates) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ScreenCoordinates other) {
        if (other == global::sally.ScreenCoordinates.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_screenCoordinatesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _screenCoordinatesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
    }
    static ScreenCoordinates() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Parameter : pb::GeneratedMessage<Parameter, Parameter.Builder> {
    private Parameter() { }
    private static readonly Parameter defaultInstance = new Parameter().MakeReadOnly();
    private static readonly string[] _parameterFieldNames = new string[] { "key", "value" };
    private static readonly uint[] _parameterFieldTags = new uint[] { 10, 18 };
    public static Parameter DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Parameter DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Parameter ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_Parameter__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Parameter, Parameter.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_Parameter__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _parameterFieldNames;
      if (hasKey) {
        output.WriteString(1, field_names[0], Key);
      }
      if (hasValue) {
        output.WriteString(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Key);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Parameter ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Parameter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Parameter ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Parameter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Parameter ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Parameter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Parameter ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Parameter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Parameter ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Parameter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Parameter MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Parameter prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Parameter, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Parameter cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Parameter result;
      
      private Parameter PrepareBuilder() {
        if (resultIsReadOnly) {
          Parameter original = result;
          result = new Parameter();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Parameter MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.Parameter.Descriptor; }
      }
      
      public override Parameter DefaultInstanceForType {
        get { return global::sally.Parameter.DefaultInstance; }
      }
      
      public override Parameter BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Parameter) {
          return MergeFrom((Parameter) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Parameter other) {
        if (other == global::sally.Parameter.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_parameterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _parameterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static Parameter() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RangeSelection : pb::GeneratedMessage<RangeSelection, RangeSelection.Builder> {
    private RangeSelection() { }
    private static readonly RangeSelection defaultInstance = new RangeSelection().MakeReadOnly();
    private static readonly string[] _rangeSelectionFieldNames = new string[] { "endCol", "endRow", "sheet", "startCol", "startRow" };
    private static readonly uint[] _rangeSelectionFieldTags = new uint[] { 32, 24, 42, 16, 8 };
    public static RangeSelection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RangeSelection DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RangeSelection ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_RangeSelection__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RangeSelection, RangeSelection.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_RangeSelection__FieldAccessorTable; }
    }
    
    public const int StartRowFieldNumber = 1;
    private bool hasStartRow;
    private int startRow_;
    public bool HasStartRow {
      get { return hasStartRow; }
    }
    public int StartRow {
      get { return startRow_; }
    }
    
    public const int StartColFieldNumber = 2;
    private bool hasStartCol;
    private int startCol_;
    public bool HasStartCol {
      get { return hasStartCol; }
    }
    public int StartCol {
      get { return startCol_; }
    }
    
    public const int EndRowFieldNumber = 3;
    private bool hasEndRow;
    private int endRow_;
    public bool HasEndRow {
      get { return hasEndRow; }
    }
    public int EndRow {
      get { return endRow_; }
    }
    
    public const int EndColFieldNumber = 4;
    private bool hasEndCol;
    private int endCol_;
    public bool HasEndCol {
      get { return hasEndCol; }
    }
    public int EndCol {
      get { return endCol_; }
    }
    
    public const int SheetFieldNumber = 5;
    private bool hasSheet;
    private string sheet_ = "";
    public bool HasSheet {
      get { return hasSheet; }
    }
    public string Sheet {
      get { return sheet_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStartRow) return false;
        if (!hasStartCol) return false;
        if (!hasEndRow) return false;
        if (!hasEndCol) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rangeSelectionFieldNames;
      if (hasStartRow) {
        output.WriteInt32(1, field_names[4], StartRow);
      }
      if (hasStartCol) {
        output.WriteInt32(2, field_names[3], StartCol);
      }
      if (hasEndRow) {
        output.WriteInt32(3, field_names[1], EndRow);
      }
      if (hasEndCol) {
        output.WriteInt32(4, field_names[0], EndCol);
      }
      if (hasSheet) {
        output.WriteString(5, field_names[2], Sheet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStartRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, StartRow);
        }
        if (hasStartCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, StartCol);
        }
        if (hasEndRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, EndRow);
        }
        if (hasEndCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, EndCol);
        }
        if (hasSheet) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Sheet);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RangeSelection ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RangeSelection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RangeSelection ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RangeSelection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RangeSelection ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RangeSelection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RangeSelection ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RangeSelection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RangeSelection ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RangeSelection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RangeSelection MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RangeSelection prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RangeSelection, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RangeSelection cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RangeSelection result;
      
      private RangeSelection PrepareBuilder() {
        if (resultIsReadOnly) {
          RangeSelection original = result;
          result = new RangeSelection();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RangeSelection MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.RangeSelection.Descriptor; }
      }
      
      public override RangeSelection DefaultInstanceForType {
        get { return global::sally.RangeSelection.DefaultInstance; }
      }
      
      public override RangeSelection BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RangeSelection) {
          return MergeFrom((RangeSelection) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RangeSelection other) {
        if (other == global::sally.RangeSelection.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartRow) {
          StartRow = other.StartRow;
        }
        if (other.HasStartCol) {
          StartCol = other.StartCol;
        }
        if (other.HasEndRow) {
          EndRow = other.EndRow;
        }
        if (other.HasEndCol) {
          EndCol = other.EndCol;
        }
        if (other.HasSheet) {
          Sheet = other.Sheet;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rangeSelectionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rangeSelectionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartRow = input.ReadInt32(ref result.startRow_);
              break;
            }
            case 16: {
              result.hasStartCol = input.ReadInt32(ref result.startCol_);
              break;
            }
            case 24: {
              result.hasEndRow = input.ReadInt32(ref result.endRow_);
              break;
            }
            case 32: {
              result.hasEndCol = input.ReadInt32(ref result.endCol_);
              break;
            }
            case 42: {
              result.hasSheet = input.ReadString(ref result.sheet_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStartRow {
        get { return result.hasStartRow; }
      }
      public int StartRow {
        get { return result.StartRow; }
        set { SetStartRow(value); }
      }
      public Builder SetStartRow(int value) {
        PrepareBuilder();
        result.hasStartRow = true;
        result.startRow_ = value;
        return this;
      }
      public Builder ClearStartRow() {
        PrepareBuilder();
        result.hasStartRow = false;
        result.startRow_ = 0;
        return this;
      }
      
      public bool HasStartCol {
        get { return result.hasStartCol; }
      }
      public int StartCol {
        get { return result.StartCol; }
        set { SetStartCol(value); }
      }
      public Builder SetStartCol(int value) {
        PrepareBuilder();
        result.hasStartCol = true;
        result.startCol_ = value;
        return this;
      }
      public Builder ClearStartCol() {
        PrepareBuilder();
        result.hasStartCol = false;
        result.startCol_ = 0;
        return this;
      }
      
      public bool HasEndRow {
        get { return result.hasEndRow; }
      }
      public int EndRow {
        get { return result.EndRow; }
        set { SetEndRow(value); }
      }
      public Builder SetEndRow(int value) {
        PrepareBuilder();
        result.hasEndRow = true;
        result.endRow_ = value;
        return this;
      }
      public Builder ClearEndRow() {
        PrepareBuilder();
        result.hasEndRow = false;
        result.endRow_ = 0;
        return this;
      }
      
      public bool HasEndCol {
        get { return result.hasEndCol; }
      }
      public int EndCol {
        get { return result.EndCol; }
        set { SetEndCol(value); }
      }
      public Builder SetEndCol(int value) {
        PrepareBuilder();
        result.hasEndCol = true;
        result.endCol_ = value;
        return this;
      }
      public Builder ClearEndCol() {
        PrepareBuilder();
        result.hasEndCol = false;
        result.endCol_ = 0;
        return this;
      }
      
      public bool HasSheet {
        get { return result.hasSheet; }
      }
      public string Sheet {
        get { return result.Sheet; }
        set { SetSheet(value); }
      }
      public Builder SetSheet(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSheet = true;
        result.sheet_ = value;
        return this;
      }
      public Builder ClearSheet() {
        PrepareBuilder();
        result.hasSheet = false;
        result.sheet_ = "";
        return this;
      }
    }
    static RangeSelection() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AlexRangeRequest : pb::GeneratedMessage<AlexRangeRequest, AlexRangeRequest.Builder> {
    private AlexRangeRequest() { }
    private static readonly AlexRangeRequest defaultInstance = new AlexRangeRequest().MakeReadOnly();
    private static readonly string[] _alexRangeRequestFieldNames = new string[] { "fileName", "selection" };
    private static readonly uint[] _alexRangeRequestFieldTags = new uint[] { 10, 18 };
    public static AlexRangeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AlexRangeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AlexRangeRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_AlexRangeRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AlexRangeRequest, AlexRangeRequest.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_AlexRangeRequest__FieldAccessorTable; }
    }
    
    public const int FileNameFieldNumber = 1;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int SelectionFieldNumber = 2;
    private pbc::PopsicleList<global::sally.RangeSelection> selection_ = new pbc::PopsicleList<global::sally.RangeSelection>();
    public scg::IList<global::sally.RangeSelection> SelectionList {
      get { return selection_; }
    }
    public int SelectionCount {
      get { return selection_.Count; }
    }
    public global::sally.RangeSelection GetSelection(int index) {
      return selection_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileName) return false;
        foreach (global::sally.RangeSelection element in SelectionList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _alexRangeRequestFieldNames;
      if (hasFileName) {
        output.WriteString(1, field_names[0], FileName);
      }
      if (selection_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], selection_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FileName);
        }
        foreach (global::sally.RangeSelection element in SelectionList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AlexRangeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AlexRangeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AlexRangeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AlexRangeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AlexRangeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AlexRangeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AlexRangeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AlexRangeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AlexRangeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AlexRangeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AlexRangeRequest MakeReadOnly() {
      selection_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AlexRangeRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AlexRangeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AlexRangeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AlexRangeRequest result;
      
      private AlexRangeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          AlexRangeRequest original = result;
          result = new AlexRangeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AlexRangeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.AlexRangeRequest.Descriptor; }
      }
      
      public override AlexRangeRequest DefaultInstanceForType {
        get { return global::sally.AlexRangeRequest.DefaultInstance; }
      }
      
      public override AlexRangeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AlexRangeRequest) {
          return MergeFrom((AlexRangeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AlexRangeRequest other) {
        if (other == global::sally.AlexRangeRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.selection_.Count != 0) {
          result.selection_.Add(other.selection_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_alexRangeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _alexRangeRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.selection_, global::sally.RangeSelection.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.RangeSelection> SelectionList {
        get { return PrepareBuilder().selection_; }
      }
      public int SelectionCount {
        get { return result.SelectionCount; }
      }
      public global::sally.RangeSelection GetSelection(int index) {
        return result.GetSelection(index);
      }
      public Builder SetSelection(int index, global::sally.RangeSelection value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.selection_[index] = value;
        return this;
      }
      public Builder SetSelection(int index, global::sally.RangeSelection.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.selection_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSelection(global::sally.RangeSelection value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.selection_.Add(value);
        return this;
      }
      public Builder AddSelection(global::sally.RangeSelection.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.selection_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSelection(scg::IEnumerable<global::sally.RangeSelection> values) {
        PrepareBuilder();
        result.selection_.Add(values);
        return this;
      }
      public Builder ClearSelection() {
        PrepareBuilder();
        result.selection_.Clear();
        return this;
      }
    }
    static AlexRangeRequest() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AlexClick : pb::GeneratedMessage<AlexClick, AlexClick.Builder> {
    private AlexClick() { }
    private static readonly AlexClick defaultInstance = new AlexClick().MakeReadOnly();
    private static readonly string[] _alexClickFieldNames = new string[] { "Sheet", "fileName", "position", "range" };
    private static readonly uint[] _alexClickFieldTags = new uint[] { 10, 34, 26, 18 };
    public static AlexClick DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AlexClick DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AlexClick ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_AlexClick__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AlexClick, AlexClick.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_AlexClick__FieldAccessorTable; }
    }
    
    public const int SheetFieldNumber = 1;
    private bool hasSheet;
    private string sheet_ = "";
    public bool HasSheet {
      get { return hasSheet; }
    }
    public string Sheet {
      get { return sheet_; }
    }
    
    public const int RangeFieldNumber = 2;
    private bool hasRange;
    private global::sally.RangeSelection range_;
    public bool HasRange {
      get { return hasRange; }
    }
    public global::sally.RangeSelection Range {
      get { return range_ ?? global::sally.RangeSelection.DefaultInstance; }
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private global::sally.ScreenCoordinates position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::sally.ScreenCoordinates Position {
      get { return position_ ?? global::sally.ScreenCoordinates.DefaultInstance; }
    }
    
    public const int FileNameFieldNumber = 4;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSheet) return false;
        if (!hasRange) return false;
        if (!hasPosition) return false;
        if (!hasFileName) return false;
        if (!Range.IsInitialized) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _alexClickFieldNames;
      if (hasSheet) {
        output.WriteString(1, field_names[0], Sheet);
      }
      if (hasRange) {
        output.WriteMessage(2, field_names[3], Range);
      }
      if (hasPosition) {
        output.WriteMessage(3, field_names[2], Position);
      }
      if (hasFileName) {
        output.WriteString(4, field_names[1], FileName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSheet) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Sheet);
        }
        if (hasRange) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Range);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
        }
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, FileName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AlexClick ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AlexClick ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AlexClick ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AlexClick ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AlexClick ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AlexClick ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AlexClick ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AlexClick ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AlexClick ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AlexClick ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AlexClick MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AlexClick prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AlexClick, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AlexClick cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AlexClick result;
      
      private AlexClick PrepareBuilder() {
        if (resultIsReadOnly) {
          AlexClick original = result;
          result = new AlexClick();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AlexClick MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.AlexClick.Descriptor; }
      }
      
      public override AlexClick DefaultInstanceForType {
        get { return global::sally.AlexClick.DefaultInstance; }
      }
      
      public override AlexClick BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AlexClick) {
          return MergeFrom((AlexClick) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AlexClick other) {
        if (other == global::sally.AlexClick.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSheet) {
          Sheet = other.Sheet;
        }
        if (other.HasRange) {
          MergeRange(other.Range);
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_alexClickFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _alexClickFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSheet = input.ReadString(ref result.sheet_);
              break;
            }
            case 18: {
              global::sally.RangeSelection.Builder subBuilder = global::sally.RangeSelection.CreateBuilder();
              if (result.hasRange) {
                subBuilder.MergeFrom(Range);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Range = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::sally.ScreenCoordinates.Builder subBuilder = global::sally.ScreenCoordinates.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSheet {
        get { return result.hasSheet; }
      }
      public string Sheet {
        get { return result.Sheet; }
        set { SetSheet(value); }
      }
      public Builder SetSheet(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSheet = true;
        result.sheet_ = value;
        return this;
      }
      public Builder ClearSheet() {
        PrepareBuilder();
        result.hasSheet = false;
        result.sheet_ = "";
        return this;
      }
      
      public bool HasRange {
       get { return result.hasRange; }
      }
      public global::sally.RangeSelection Range {
        get { return result.Range; }
        set { SetRange(value); }
      }
      public Builder SetRange(global::sally.RangeSelection value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRange = true;
        result.range_ = value;
        return this;
      }
      public Builder SetRange(global::sally.RangeSelection.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRange = true;
        result.range_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRange(global::sally.RangeSelection value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRange &&
            result.range_ != global::sally.RangeSelection.DefaultInstance) {
            result.range_ = global::sally.RangeSelection.CreateBuilder(result.range_).MergeFrom(value).BuildPartial();
        } else {
          result.range_ = value;
        }
        result.hasRange = true;
        return this;
      }
      public Builder ClearRange() {
        PrepareBuilder();
        result.hasRange = false;
        result.range_ = null;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::sally.ScreenCoordinates Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::sally.ScreenCoordinates.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::sally.ScreenCoordinates.DefaultInstance) {
            result.position_ = global::sally.ScreenCoordinates.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
    }
    static AlexClick() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CADAlexClick : pb::GeneratedMessage<CADAlexClick, CADAlexClick.Builder> {
    private CADAlexClick() { }
    private static readonly CADAlexClick defaultInstance = new CADAlexClick().MakeReadOnly();
    private static readonly string[] _cADAlexClickFieldNames = new string[] { "cadNodeId", "fileName", "position" };
    private static readonly uint[] _cADAlexClickFieldTags = new uint[] { 10, 26, 18 };
    public static CADAlexClick DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CADAlexClick DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CADAlexClick ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CADAlexClick__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CADAlexClick, CADAlexClick.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CADAlexClick__FieldAccessorTable; }
    }
    
    public const int CadNodeIdFieldNumber = 1;
    private bool hasCadNodeId;
    private string cadNodeId_ = "";
    public bool HasCadNodeId {
      get { return hasCadNodeId; }
    }
    public string CadNodeId {
      get { return cadNodeId_; }
    }
    
    public const int PositionFieldNumber = 2;
    private bool hasPosition;
    private global::sally.ScreenCoordinates position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::sally.ScreenCoordinates Position {
      get { return position_ ?? global::sally.ScreenCoordinates.DefaultInstance; }
    }
    
    public const int FileNameFieldNumber = 3;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCadNodeId) return false;
        if (!hasPosition) return false;
        if (!hasFileName) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cADAlexClickFieldNames;
      if (hasCadNodeId) {
        output.WriteString(1, field_names[0], CadNodeId);
      }
      if (hasPosition) {
        output.WriteMessage(2, field_names[2], Position);
      }
      if (hasFileName) {
        output.WriteString(3, field_names[1], FileName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCadNodeId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, CadNodeId);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
        }
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, FileName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CADAlexClick ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CADAlexClick ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CADAlexClick ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CADAlexClick ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CADAlexClick ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CADAlexClick ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CADAlexClick ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CADAlexClick ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CADAlexClick ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CADAlexClick ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CADAlexClick MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CADAlexClick prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CADAlexClick, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CADAlexClick cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CADAlexClick result;
      
      private CADAlexClick PrepareBuilder() {
        if (resultIsReadOnly) {
          CADAlexClick original = result;
          result = new CADAlexClick();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CADAlexClick MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CADAlexClick.Descriptor; }
      }
      
      public override CADAlexClick DefaultInstanceForType {
        get { return global::sally.CADAlexClick.DefaultInstance; }
      }
      
      public override CADAlexClick BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CADAlexClick) {
          return MergeFrom((CADAlexClick) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CADAlexClick other) {
        if (other == global::sally.CADAlexClick.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCadNodeId) {
          CadNodeId = other.CadNodeId;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cADAlexClickFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cADAlexClickFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCadNodeId = input.ReadString(ref result.cadNodeId_);
              break;
            }
            case 18: {
              global::sally.ScreenCoordinates.Builder subBuilder = global::sally.ScreenCoordinates.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCadNodeId {
        get { return result.hasCadNodeId; }
      }
      public string CadNodeId {
        get { return result.CadNodeId; }
        set { SetCadNodeId(value); }
      }
      public Builder SetCadNodeId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCadNodeId = true;
        result.cadNodeId_ = value;
        return this;
      }
      public Builder ClearCadNodeId() {
        PrepareBuilder();
        result.hasCadNodeId = false;
        result.cadNodeId_ = "";
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::sally.ScreenCoordinates Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::sally.ScreenCoordinates.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::sally.ScreenCoordinates.DefaultInstance) {
            result.position_ = global::sally.ScreenCoordinates.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
    }
    static CADAlexClick() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CADNavigateTo : pb::GeneratedMessage<CADNavigateTo, CADNavigateTo.Builder> {
    private CADNavigateTo() { }
    private static readonly CADNavigateTo defaultInstance = new CADNavigateTo().MakeReadOnly();
    private static readonly string[] _cADNavigateToFieldNames = new string[] { "cadNodeId", "fileName" };
    private static readonly uint[] _cADNavigateToFieldTags = new uint[] { 18, 10 };
    public static CADNavigateTo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CADNavigateTo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CADNavigateTo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CADNavigateTo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CADNavigateTo, CADNavigateTo.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CADNavigateTo__FieldAccessorTable; }
    }
    
    public const int FileNameFieldNumber = 1;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int CadNodeIdFieldNumber = 2;
    private bool hasCadNodeId;
    private string cadNodeId_ = "";
    public bool HasCadNodeId {
      get { return hasCadNodeId; }
    }
    public string CadNodeId {
      get { return cadNodeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileName) return false;
        if (!hasCadNodeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cADNavigateToFieldNames;
      if (hasFileName) {
        output.WriteString(1, field_names[1], FileName);
      }
      if (hasCadNodeId) {
        output.WriteString(2, field_names[0], CadNodeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FileName);
        }
        if (hasCadNodeId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, CadNodeId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CADNavigateTo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CADNavigateTo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CADNavigateTo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CADNavigateTo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CADNavigateTo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CADNavigateTo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CADNavigateTo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CADNavigateTo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CADNavigateTo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CADNavigateTo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CADNavigateTo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CADNavigateTo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CADNavigateTo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CADNavigateTo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CADNavigateTo result;
      
      private CADNavigateTo PrepareBuilder() {
        if (resultIsReadOnly) {
          CADNavigateTo original = result;
          result = new CADNavigateTo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CADNavigateTo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CADNavigateTo.Descriptor; }
      }
      
      public override CADNavigateTo DefaultInstanceForType {
        get { return global::sally.CADNavigateTo.DefaultInstance; }
      }
      
      public override CADNavigateTo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CADNavigateTo) {
          return MergeFrom((CADNavigateTo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CADNavigateTo other) {
        if (other == global::sally.CADNavigateTo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasCadNodeId) {
          CadNodeId = other.CadNodeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cADNavigateToFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cADNavigateToFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 18: {
              result.hasCadNodeId = input.ReadString(ref result.cadNodeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public bool HasCadNodeId {
        get { return result.hasCadNodeId; }
      }
      public string CadNodeId {
        get { return result.CadNodeId; }
        set { SetCadNodeId(value); }
      }
      public Builder SetCadNodeId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCadNodeId = true;
        result.cadNodeId_ = value;
        return this;
      }
      public Builder ClearCadNodeId() {
        PrepareBuilder();
        result.hasCadNodeId = false;
        result.cadNodeId_ = "";
        return this;
      }
    }
    static CADNavigateTo() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CADNode : pb::GeneratedMessage<CADNode, CADNode.Builder> {
    private CADNode() { }
    private static readonly CADNode defaultInstance = new CADNode().MakeReadOnly();
    private static readonly string[] _cADNodeFieldNames = new string[] { "children", "id", "im_uri", "parameters" };
    private static readonly uint[] _cADNodeFieldTags = new uint[] { 26, 10, 18, 34 };
    public static CADNode DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CADNode DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CADNode ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CADNode__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CADNode, CADNode.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CADNode__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ImUriFieldNumber = 2;
    private bool hasImUri;
    private string imUri_ = "";
    public bool HasImUri {
      get { return hasImUri; }
    }
    public string ImUri {
      get { return imUri_; }
    }
    
    public const int ChildrenFieldNumber = 3;
    private pbc::PopsicleList<global::sally.CADNode> children_ = new pbc::PopsicleList<global::sally.CADNode>();
    public scg::IList<global::sally.CADNode> ChildrenList {
      get { return children_; }
    }
    public int ChildrenCount {
      get { return children_.Count; }
    }
    public global::sally.CADNode GetChildren(int index) {
      return children_[index];
    }
    
    public const int ParametersFieldNumber = 4;
    private pbc::PopsicleList<global::sally.Parameter> parameters_ = new pbc::PopsicleList<global::sally.Parameter>();
    public scg::IList<global::sally.Parameter> ParametersList {
      get { return parameters_; }
    }
    public int ParametersCount {
      get { return parameters_.Count; }
    }
    public global::sally.Parameter GetParameters(int index) {
      return parameters_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::sally.CADNode element in ChildrenList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::sally.Parameter element in ParametersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cADNodeFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasImUri) {
        output.WriteString(2, field_names[2], ImUri);
      }
      if (children_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], children_);
      }
      if (parameters_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], parameters_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasImUri) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ImUri);
        }
        foreach (global::sally.CADNode element in ChildrenList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::sally.Parameter element in ParametersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CADNode ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CADNode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CADNode ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CADNode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CADNode ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CADNode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CADNode ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CADNode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CADNode ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CADNode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CADNode MakeReadOnly() {
      children_.MakeReadOnly();
      parameters_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CADNode prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CADNode, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CADNode cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CADNode result;
      
      private CADNode PrepareBuilder() {
        if (resultIsReadOnly) {
          CADNode original = result;
          result = new CADNode();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CADNode MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CADNode.Descriptor; }
      }
      
      public override CADNode DefaultInstanceForType {
        get { return global::sally.CADNode.DefaultInstance; }
      }
      
      public override CADNode BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CADNode) {
          return MergeFrom((CADNode) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CADNode other) {
        if (other == global::sally.CADNode.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasImUri) {
          ImUri = other.ImUri;
        }
        if (other.children_.Count != 0) {
          result.children_.Add(other.children_);
        }
        if (other.parameters_.Count != 0) {
          result.parameters_.Add(other.parameters_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cADNodeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cADNodeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasImUri = input.ReadString(ref result.imUri_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.children_, global::sally.CADNode.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.parameters_, global::sally.Parameter.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasImUri {
        get { return result.hasImUri; }
      }
      public string ImUri {
        get { return result.ImUri; }
        set { SetImUri(value); }
      }
      public Builder SetImUri(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImUri = true;
        result.imUri_ = value;
        return this;
      }
      public Builder ClearImUri() {
        PrepareBuilder();
        result.hasImUri = false;
        result.imUri_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.CADNode> ChildrenList {
        get { return PrepareBuilder().children_; }
      }
      public int ChildrenCount {
        get { return result.ChildrenCount; }
      }
      public global::sally.CADNode GetChildren(int index) {
        return result.GetChildren(index);
      }
      public Builder SetChildren(int index, global::sally.CADNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.children_[index] = value;
        return this;
      }
      public Builder SetChildren(int index, global::sally.CADNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.children_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChildren(global::sally.CADNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.children_.Add(value);
        return this;
      }
      public Builder AddChildren(global::sally.CADNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.children_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChildren(scg::IEnumerable<global::sally.CADNode> values) {
        PrepareBuilder();
        result.children_.Add(values);
        return this;
      }
      public Builder ClearChildren() {
        PrepareBuilder();
        result.children_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.Parameter> ParametersList {
        get { return PrepareBuilder().parameters_; }
      }
      public int ParametersCount {
        get { return result.ParametersCount; }
      }
      public global::sally.Parameter GetParameters(int index) {
        return result.GetParameters(index);
      }
      public Builder SetParameters(int index, global::sally.Parameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameters_[index] = value;
        return this;
      }
      public Builder SetParameters(int index, global::sally.Parameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.parameters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParameters(global::sally.Parameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameters_.Add(value);
        return this;
      }
      public Builder AddParameters(global::sally.Parameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.parameters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParameters(scg::IEnumerable<global::sally.Parameter> values) {
        PrepareBuilder();
        result.parameters_.Add(values);
        return this;
      }
      public Builder ClearParameters() {
        PrepareBuilder();
        result.parameters_.Clear();
        return this;
      }
    }
    static CADNode() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CADSemanticData : pb::GeneratedMessage<CADSemanticData, CADSemanticData.Builder> {
    private CADSemanticData() { }
    private static readonly CADSemanticData defaultInstance = new CADSemanticData().MakeReadOnly();
    private static readonly string[] _cADSemanticDataFieldNames = new string[] { "fileName", "root_node" };
    private static readonly uint[] _cADSemanticDataFieldTags = new uint[] { 10, 18 };
    public static CADSemanticData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CADSemanticData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CADSemanticData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CADSemanticData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CADSemanticData, CADSemanticData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CADSemanticData__FieldAccessorTable; }
    }
    
    public const int FileNameFieldNumber = 1;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int RootNodeFieldNumber = 2;
    private bool hasRootNode;
    private global::sally.CADNode rootNode_;
    public bool HasRootNode {
      get { return hasRootNode; }
    }
    public global::sally.CADNode RootNode {
      get { return rootNode_ ?? global::sally.CADNode.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileName) return false;
        if (!hasRootNode) return false;
        if (!RootNode.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cADSemanticDataFieldNames;
      if (hasFileName) {
        output.WriteString(1, field_names[0], FileName);
      }
      if (hasRootNode) {
        output.WriteMessage(2, field_names[1], RootNode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FileName);
        }
        if (hasRootNode) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, RootNode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CADSemanticData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CADSemanticData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CADSemanticData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CADSemanticData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CADSemanticData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CADSemanticData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CADSemanticData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CADSemanticData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CADSemanticData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CADSemanticData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CADSemanticData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CADSemanticData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CADSemanticData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CADSemanticData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CADSemanticData result;
      
      private CADSemanticData PrepareBuilder() {
        if (resultIsReadOnly) {
          CADSemanticData original = result;
          result = new CADSemanticData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CADSemanticData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CADSemanticData.Descriptor; }
      }
      
      public override CADSemanticData DefaultInstanceForType {
        get { return global::sally.CADSemanticData.DefaultInstance; }
      }
      
      public override CADSemanticData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CADSemanticData) {
          return MergeFrom((CADSemanticData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CADSemanticData other) {
        if (other == global::sally.CADSemanticData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasRootNode) {
          MergeRootNode(other.RootNode);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cADSemanticDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cADSemanticDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 18: {
              global::sally.CADNode.Builder subBuilder = global::sally.CADNode.CreateBuilder();
              if (result.hasRootNode) {
                subBuilder.MergeFrom(RootNode);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RootNode = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public bool HasRootNode {
       get { return result.hasRootNode; }
      }
      public global::sally.CADNode RootNode {
        get { return result.RootNode; }
        set { SetRootNode(value); }
      }
      public Builder SetRootNode(global::sally.CADNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRootNode = true;
        result.rootNode_ = value;
        return this;
      }
      public Builder SetRootNode(global::sally.CADNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRootNode = true;
        result.rootNode_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRootNode(global::sally.CADNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRootNode &&
            result.rootNode_ != global::sally.CADNode.DefaultInstance) {
            result.rootNode_ = global::sally.CADNode.CreateBuilder(result.rootNode_).MergeFrom(value).BuildPartial();
        } else {
          result.rootNode_ = value;
        }
        result.hasRootNode = true;
        return this;
      }
      public Builder ClearRootNode() {
        PrepareBuilder();
        result.hasRootNode = false;
        result.rootNode_ = null;
        return this;
      }
    }
    static CADSemanticData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CellPosition : pb::GeneratedMessage<CellPosition, CellPosition.Builder> {
    private CellPosition() { }
    private static readonly CellPosition defaultInstance = new CellPosition().MakeReadOnly();
    private static readonly string[] _cellPositionFieldNames = new string[] { "col", "row", "sheet" };
    private static readonly uint[] _cellPositionFieldTags = new uint[] { 24, 16, 8 };
    public static CellPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CellPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CellPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CellPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CellPosition, CellPosition.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CellPosition__FieldAccessorTable; }
    }
    
    public const int SheetFieldNumber = 1;
    private bool hasSheet;
    private int sheet_;
    public bool HasSheet {
      get { return hasSheet; }
    }
    public int Sheet {
      get { return sheet_; }
    }
    
    public const int RowFieldNumber = 2;
    private bool hasRow;
    private int row_;
    public bool HasRow {
      get { return hasRow; }
    }
    public int Row {
      get { return row_; }
    }
    
    public const int ColFieldNumber = 3;
    private bool hasCol;
    private int col_;
    public bool HasCol {
      get { return hasCol; }
    }
    public int Col {
      get { return col_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSheet) return false;
        if (!hasRow) return false;
        if (!hasCol) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cellPositionFieldNames;
      if (hasSheet) {
        output.WriteInt32(1, field_names[2], Sheet);
      }
      if (hasRow) {
        output.WriteInt32(2, field_names[1], Row);
      }
      if (hasCol) {
        output.WriteInt32(3, field_names[0], Col);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSheet) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Sheet);
        }
        if (hasRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Row);
        }
        if (hasCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Col);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CellPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CellPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CellPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CellPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CellPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CellPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CellPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CellPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CellPosition result;
      
      private CellPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          CellPosition original = result;
          result = new CellPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CellPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CellPosition.Descriptor; }
      }
      
      public override CellPosition DefaultInstanceForType {
        get { return global::sally.CellPosition.DefaultInstance; }
      }
      
      public override CellPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CellPosition) {
          return MergeFrom((CellPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CellPosition other) {
        if (other == global::sally.CellPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSheet) {
          Sheet = other.Sheet;
        }
        if (other.HasRow) {
          Row = other.Row;
        }
        if (other.HasCol) {
          Col = other.Col;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cellPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cellPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSheet = input.ReadInt32(ref result.sheet_);
              break;
            }
            case 16: {
              result.hasRow = input.ReadInt32(ref result.row_);
              break;
            }
            case 24: {
              result.hasCol = input.ReadInt32(ref result.col_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSheet {
        get { return result.hasSheet; }
      }
      public int Sheet {
        get { return result.Sheet; }
        set { SetSheet(value); }
      }
      public Builder SetSheet(int value) {
        PrepareBuilder();
        result.hasSheet = true;
        result.sheet_ = value;
        return this;
      }
      public Builder ClearSheet() {
        PrepareBuilder();
        result.hasSheet = false;
        result.sheet_ = 0;
        return this;
      }
      
      public bool HasRow {
        get { return result.hasRow; }
      }
      public int Row {
        get { return result.Row; }
        set { SetRow(value); }
      }
      public Builder SetRow(int value) {
        PrepareBuilder();
        result.hasRow = true;
        result.row_ = value;
        return this;
      }
      public Builder ClearRow() {
        PrepareBuilder();
        result.hasRow = false;
        result.row_ = 0;
        return this;
      }
      
      public bool HasCol {
        get { return result.hasCol; }
      }
      public int Col {
        get { return result.Col; }
        set { SetCol(value); }
      }
      public Builder SetCol(int value) {
        PrepareBuilder();
        result.hasCol = true;
        result.col_ = value;
        return this;
      }
      public Builder ClearCol() {
        PrepareBuilder();
        result.hasCol = false;
        result.col_ = 0;
        return this;
      }
    }
    static CellPosition() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConcreteCellData : pb::GeneratedMessage<ConcreteCellData, ConcreteCellData.Builder> {
    private ConcreteCellData() { }
    private static readonly ConcreteCellData defaultInstance = new ConcreteCellData().MakeReadOnly();
    private static readonly string[] _concreteCellDataFieldNames = new string[] { "col", "formula", "row", "value" };
    private static readonly uint[] _concreteCellDataFieldTags = new uint[] { 32, 10, 24, 18 };
    public static ConcreteCellData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConcreteCellData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConcreteCellData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ConcreteCellData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConcreteCellData, ConcreteCellData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ConcreteCellData__FieldAccessorTable; }
    }
    
    public const int RowFieldNumber = 3;
    private bool hasRow;
    private int row_;
    public bool HasRow {
      get { return hasRow; }
    }
    public int Row {
      get { return row_; }
    }
    
    public const int ColFieldNumber = 4;
    private bool hasCol;
    private int col_;
    public bool HasCol {
      get { return hasCol; }
    }
    public int Col {
      get { return col_; }
    }
    
    public const int FormulaFieldNumber = 1;
    private bool hasFormula;
    private string formula_ = "";
    public bool HasFormula {
      get { return hasFormula; }
    }
    public string Formula {
      get { return formula_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRow) return false;
        if (!hasCol) return false;
        if (!hasFormula) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _concreteCellDataFieldNames;
      if (hasFormula) {
        output.WriteString(1, field_names[1], Formula);
      }
      if (hasValue) {
        output.WriteString(2, field_names[3], Value);
      }
      if (hasRow) {
        output.WriteInt32(3, field_names[2], Row);
      }
      if (hasCol) {
        output.WriteInt32(4, field_names[0], Col);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Row);
        }
        if (hasCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Col);
        }
        if (hasFormula) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Formula);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConcreteCellData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConcreteCellData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConcreteCellData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConcreteCellData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConcreteCellData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConcreteCellData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConcreteCellData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConcreteCellData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConcreteCellData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConcreteCellData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConcreteCellData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConcreteCellData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConcreteCellData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConcreteCellData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConcreteCellData result;
      
      private ConcreteCellData PrepareBuilder() {
        if (resultIsReadOnly) {
          ConcreteCellData original = result;
          result = new ConcreteCellData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConcreteCellData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ConcreteCellData.Descriptor; }
      }
      
      public override ConcreteCellData DefaultInstanceForType {
        get { return global::sally.ConcreteCellData.DefaultInstance; }
      }
      
      public override ConcreteCellData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConcreteCellData) {
          return MergeFrom((ConcreteCellData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConcreteCellData other) {
        if (other == global::sally.ConcreteCellData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRow) {
          Row = other.Row;
        }
        if (other.HasCol) {
          Col = other.Col;
        }
        if (other.HasFormula) {
          Formula = other.Formula;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_concreteCellDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _concreteCellDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFormula = input.ReadString(ref result.formula_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
            case 24: {
              result.hasRow = input.ReadInt32(ref result.row_);
              break;
            }
            case 32: {
              result.hasCol = input.ReadInt32(ref result.col_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRow {
        get { return result.hasRow; }
      }
      public int Row {
        get { return result.Row; }
        set { SetRow(value); }
      }
      public Builder SetRow(int value) {
        PrepareBuilder();
        result.hasRow = true;
        result.row_ = value;
        return this;
      }
      public Builder ClearRow() {
        PrepareBuilder();
        result.hasRow = false;
        result.row_ = 0;
        return this;
      }
      
      public bool HasCol {
        get { return result.hasCol; }
      }
      public int Col {
        get { return result.Col; }
        set { SetCol(value); }
      }
      public Builder SetCol(int value) {
        PrepareBuilder();
        result.hasCol = true;
        result.col_ = value;
        return this;
      }
      public Builder ClearCol() {
        PrepareBuilder();
        result.hasCol = false;
        result.col_ = 0;
        return this;
      }
      
      public bool HasFormula {
        get { return result.hasFormula; }
      }
      public string Formula {
        get { return result.Formula; }
        set { SetFormula(value); }
      }
      public Builder SetFormula(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFormula = true;
        result.formula_ = value;
        return this;
      }
      public Builder ClearFormula() {
        PrepareBuilder();
        result.hasFormula = false;
        result.formula_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static ConcreteCellData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConcreteSheetData : pb::GeneratedMessage<ConcreteSheetData, ConcreteSheetData.Builder> {
    private ConcreteSheetData() { }
    private static readonly ConcreteSheetData defaultInstance = new ConcreteSheetData().MakeReadOnly();
    private static readonly string[] _concreteSheetDataFieldNames = new string[] { "cellinf", "endCol", "endRow", "sheetname", "startCol", "startRow" };
    private static readonly uint[] _concreteSheetDataFieldTags = new uint[] { 18, 48, 40, 10, 32, 24 };
    public static ConcreteSheetData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConcreteSheetData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConcreteSheetData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ConcreteSheetData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConcreteSheetData, ConcreteSheetData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ConcreteSheetData__FieldAccessorTable; }
    }
    
    public const int SheetnameFieldNumber = 1;
    private bool hasSheetname;
    private string sheetname_ = "";
    public bool HasSheetname {
      get { return hasSheetname; }
    }
    public string Sheetname {
      get { return sheetname_; }
    }
    
    public const int StartRowFieldNumber = 3;
    private bool hasStartRow;
    private int startRow_;
    public bool HasStartRow {
      get { return hasStartRow; }
    }
    public int StartRow {
      get { return startRow_; }
    }
    
    public const int StartColFieldNumber = 4;
    private bool hasStartCol;
    private int startCol_;
    public bool HasStartCol {
      get { return hasStartCol; }
    }
    public int StartCol {
      get { return startCol_; }
    }
    
    public const int EndRowFieldNumber = 5;
    private bool hasEndRow;
    private int endRow_;
    public bool HasEndRow {
      get { return hasEndRow; }
    }
    public int EndRow {
      get { return endRow_; }
    }
    
    public const int EndColFieldNumber = 6;
    private bool hasEndCol;
    private int endCol_;
    public bool HasEndCol {
      get { return hasEndCol; }
    }
    public int EndCol {
      get { return endCol_; }
    }
    
    public const int CellinfFieldNumber = 2;
    private pbc::PopsicleList<global::sally.ConcreteCellData> cellinf_ = new pbc::PopsicleList<global::sally.ConcreteCellData>();
    public scg::IList<global::sally.ConcreteCellData> CellinfList {
      get { return cellinf_; }
    }
    public int CellinfCount {
      get { return cellinf_.Count; }
    }
    public global::sally.ConcreteCellData GetCellinf(int index) {
      return cellinf_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSheetname) return false;
        if (!hasStartRow) return false;
        if (!hasStartCol) return false;
        if (!hasEndRow) return false;
        if (!hasEndCol) return false;
        foreach (global::sally.ConcreteCellData element in CellinfList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _concreteSheetDataFieldNames;
      if (hasSheetname) {
        output.WriteString(1, field_names[3], Sheetname);
      }
      if (cellinf_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], cellinf_);
      }
      if (hasStartRow) {
        output.WriteInt32(3, field_names[5], StartRow);
      }
      if (hasStartCol) {
        output.WriteInt32(4, field_names[4], StartCol);
      }
      if (hasEndRow) {
        output.WriteInt32(5, field_names[2], EndRow);
      }
      if (hasEndCol) {
        output.WriteInt32(6, field_names[1], EndCol);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSheetname) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Sheetname);
        }
        if (hasStartRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, StartRow);
        }
        if (hasStartCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, StartCol);
        }
        if (hasEndRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, EndRow);
        }
        if (hasEndCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, EndCol);
        }
        foreach (global::sally.ConcreteCellData element in CellinfList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConcreteSheetData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConcreteSheetData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConcreteSheetData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConcreteSheetData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConcreteSheetData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConcreteSheetData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConcreteSheetData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConcreteSheetData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConcreteSheetData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConcreteSheetData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConcreteSheetData MakeReadOnly() {
      cellinf_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConcreteSheetData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConcreteSheetData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConcreteSheetData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConcreteSheetData result;
      
      private ConcreteSheetData PrepareBuilder() {
        if (resultIsReadOnly) {
          ConcreteSheetData original = result;
          result = new ConcreteSheetData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConcreteSheetData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ConcreteSheetData.Descriptor; }
      }
      
      public override ConcreteSheetData DefaultInstanceForType {
        get { return global::sally.ConcreteSheetData.DefaultInstance; }
      }
      
      public override ConcreteSheetData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConcreteSheetData) {
          return MergeFrom((ConcreteSheetData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConcreteSheetData other) {
        if (other == global::sally.ConcreteSheetData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSheetname) {
          Sheetname = other.Sheetname;
        }
        if (other.HasStartRow) {
          StartRow = other.StartRow;
        }
        if (other.HasStartCol) {
          StartCol = other.StartCol;
        }
        if (other.HasEndRow) {
          EndRow = other.EndRow;
        }
        if (other.HasEndCol) {
          EndCol = other.EndCol;
        }
        if (other.cellinf_.Count != 0) {
          result.cellinf_.Add(other.cellinf_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_concreteSheetDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _concreteSheetDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSheetname = input.ReadString(ref result.sheetname_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.cellinf_, global::sally.ConcreteCellData.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasStartRow = input.ReadInt32(ref result.startRow_);
              break;
            }
            case 32: {
              result.hasStartCol = input.ReadInt32(ref result.startCol_);
              break;
            }
            case 40: {
              result.hasEndRow = input.ReadInt32(ref result.endRow_);
              break;
            }
            case 48: {
              result.hasEndCol = input.ReadInt32(ref result.endCol_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSheetname {
        get { return result.hasSheetname; }
      }
      public string Sheetname {
        get { return result.Sheetname; }
        set { SetSheetname(value); }
      }
      public Builder SetSheetname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSheetname = true;
        result.sheetname_ = value;
        return this;
      }
      public Builder ClearSheetname() {
        PrepareBuilder();
        result.hasSheetname = false;
        result.sheetname_ = "";
        return this;
      }
      
      public bool HasStartRow {
        get { return result.hasStartRow; }
      }
      public int StartRow {
        get { return result.StartRow; }
        set { SetStartRow(value); }
      }
      public Builder SetStartRow(int value) {
        PrepareBuilder();
        result.hasStartRow = true;
        result.startRow_ = value;
        return this;
      }
      public Builder ClearStartRow() {
        PrepareBuilder();
        result.hasStartRow = false;
        result.startRow_ = 0;
        return this;
      }
      
      public bool HasStartCol {
        get { return result.hasStartCol; }
      }
      public int StartCol {
        get { return result.StartCol; }
        set { SetStartCol(value); }
      }
      public Builder SetStartCol(int value) {
        PrepareBuilder();
        result.hasStartCol = true;
        result.startCol_ = value;
        return this;
      }
      public Builder ClearStartCol() {
        PrepareBuilder();
        result.hasStartCol = false;
        result.startCol_ = 0;
        return this;
      }
      
      public bool HasEndRow {
        get { return result.hasEndRow; }
      }
      public int EndRow {
        get { return result.EndRow; }
        set { SetEndRow(value); }
      }
      public Builder SetEndRow(int value) {
        PrepareBuilder();
        result.hasEndRow = true;
        result.endRow_ = value;
        return this;
      }
      public Builder ClearEndRow() {
        PrepareBuilder();
        result.hasEndRow = false;
        result.endRow_ = 0;
        return this;
      }
      
      public bool HasEndCol {
        get { return result.hasEndCol; }
      }
      public int EndCol {
        get { return result.EndCol; }
        set { SetEndCol(value); }
      }
      public Builder SetEndCol(int value) {
        PrepareBuilder();
        result.hasEndCol = true;
        result.endCol_ = value;
        return this;
      }
      public Builder ClearEndCol() {
        PrepareBuilder();
        result.hasEndCol = false;
        result.endCol_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.ConcreteCellData> CellinfList {
        get { return PrepareBuilder().cellinf_; }
      }
      public int CellinfCount {
        get { return result.CellinfCount; }
      }
      public global::sally.ConcreteCellData GetCellinf(int index) {
        return result.GetCellinf(index);
      }
      public Builder SetCellinf(int index, global::sally.ConcreteCellData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cellinf_[index] = value;
        return this;
      }
      public Builder SetCellinf(int index, global::sally.ConcreteCellData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cellinf_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCellinf(global::sally.ConcreteCellData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cellinf_.Add(value);
        return this;
      }
      public Builder AddCellinf(global::sally.ConcreteCellData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cellinf_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCellinf(scg::IEnumerable<global::sally.ConcreteCellData> values) {
        PrepareBuilder();
        result.cellinf_.Add(values);
        return this;
      }
      public Builder ClearCellinf() {
        PrepareBuilder();
        result.cellinf_.Clear();
        return this;
      }
    }
    static ConcreteSheetData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConcreteDocumentData : pb::GeneratedMessage<ConcreteDocumentData, ConcreteDocumentData.Builder> {
    private ConcreteDocumentData() { }
    private static readonly ConcreteDocumentData defaultInstance = new ConcreteDocumentData().MakeReadOnly();
    private static readonly string[] _concreteDocumentDataFieldNames = new string[] { "filename", "sheets" };
    private static readonly uint[] _concreteDocumentDataFieldTags = new uint[] { 10, 18 };
    public static ConcreteDocumentData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConcreteDocumentData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConcreteDocumentData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ConcreteDocumentData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConcreteDocumentData, ConcreteDocumentData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ConcreteDocumentData__FieldAccessorTable; }
    }
    
    public const int FilenameFieldNumber = 1;
    private bool hasFilename;
    private string filename_ = "";
    public bool HasFilename {
      get { return hasFilename; }
    }
    public string Filename {
      get { return filename_; }
    }
    
    public const int SheetsFieldNumber = 2;
    private pbc::PopsicleList<global::sally.ConcreteSheetData> sheets_ = new pbc::PopsicleList<global::sally.ConcreteSheetData>();
    public scg::IList<global::sally.ConcreteSheetData> SheetsList {
      get { return sheets_; }
    }
    public int SheetsCount {
      get { return sheets_.Count; }
    }
    public global::sally.ConcreteSheetData GetSheets(int index) {
      return sheets_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFilename) return false;
        foreach (global::sally.ConcreteSheetData element in SheetsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _concreteDocumentDataFieldNames;
      if (hasFilename) {
        output.WriteString(1, field_names[0], Filename);
      }
      if (sheets_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], sheets_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFilename) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Filename);
        }
        foreach (global::sally.ConcreteSheetData element in SheetsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConcreteDocumentData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConcreteDocumentData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConcreteDocumentData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConcreteDocumentData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConcreteDocumentData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConcreteDocumentData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConcreteDocumentData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConcreteDocumentData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConcreteDocumentData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConcreteDocumentData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConcreteDocumentData MakeReadOnly() {
      sheets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConcreteDocumentData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConcreteDocumentData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConcreteDocumentData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConcreteDocumentData result;
      
      private ConcreteDocumentData PrepareBuilder() {
        if (resultIsReadOnly) {
          ConcreteDocumentData original = result;
          result = new ConcreteDocumentData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConcreteDocumentData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ConcreteDocumentData.Descriptor; }
      }
      
      public override ConcreteDocumentData DefaultInstanceForType {
        get { return global::sally.ConcreteDocumentData.DefaultInstance; }
      }
      
      public override ConcreteDocumentData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConcreteDocumentData) {
          return MergeFrom((ConcreteDocumentData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConcreteDocumentData other) {
        if (other == global::sally.ConcreteDocumentData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFilename) {
          Filename = other.Filename;
        }
        if (other.sheets_.Count != 0) {
          result.sheets_.Add(other.sheets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_concreteDocumentDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _concreteDocumentDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFilename = input.ReadString(ref result.filename_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.sheets_, global::sally.ConcreteSheetData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFilename {
        get { return result.hasFilename; }
      }
      public string Filename {
        get { return result.Filename; }
        set { SetFilename(value); }
      }
      public Builder SetFilename(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilename = true;
        result.filename_ = value;
        return this;
      }
      public Builder ClearFilename() {
        PrepareBuilder();
        result.hasFilename = false;
        result.filename_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.ConcreteSheetData> SheetsList {
        get { return PrepareBuilder().sheets_; }
      }
      public int SheetsCount {
        get { return result.SheetsCount; }
      }
      public global::sally.ConcreteSheetData GetSheets(int index) {
        return result.GetSheets(index);
      }
      public Builder SetSheets(int index, global::sally.ConcreteSheetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sheets_[index] = value;
        return this;
      }
      public Builder SetSheets(int index, global::sally.ConcreteSheetData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sheets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSheets(global::sally.ConcreteSheetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sheets_.Add(value);
        return this;
      }
      public Builder AddSheets(global::sally.ConcreteSheetData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sheets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSheets(scg::IEnumerable<global::sally.ConcreteSheetData> values) {
        PrepareBuilder();
        result.sheets_.Add(values);
        return this;
      }
      public Builder ClearSheets() {
        PrepareBuilder();
        result.sheets_.Clear();
        return this;
      }
    }
    static ConcreteDocumentData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CellSpaceInformation : pb::GeneratedMessage<CellSpaceInformation, CellSpaceInformation.Builder> {
    private CellSpaceInformation() { }
    private static readonly CellSpaceInformation defaultInstance = new CellSpaceInformation().MakeReadOnly();
    private static readonly string[] _cellSpaceInformationFieldNames = new string[] { "height", "position", "width" };
    private static readonly uint[] _cellSpaceInformationFieldTags = new uint[] { 24, 10, 16 };
    public static CellSpaceInformation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CellSpaceInformation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CellSpaceInformation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CellSpaceInformation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CellSpaceInformation, CellSpaceInformation.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CellSpaceInformation__FieldAccessorTable; }
    }
    
    public const int PositionFieldNumber = 1;
    private bool hasPosition;
    private global::sally.CellPosition position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::sally.CellPosition Position {
      get { return position_ ?? global::sally.CellPosition.DefaultInstance; }
    }
    
    public const int WidthFieldNumber = 2;
    private bool hasWidth;
    private int width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public int Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 3;
    private bool hasHeight;
    private int height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public int Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPosition) return false;
        if (!hasWidth) return false;
        if (!hasHeight) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cellSpaceInformationFieldNames;
      if (hasPosition) {
        output.WriteMessage(1, field_names[1], Position);
      }
      if (hasWidth) {
        output.WriteInt32(2, field_names[2], Width);
      }
      if (hasHeight) {
        output.WriteInt32(3, field_names[0], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Position);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CellSpaceInformation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellSpaceInformation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellSpaceInformation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellSpaceInformation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellSpaceInformation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellSpaceInformation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CellSpaceInformation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CellSpaceInformation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CellSpaceInformation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellSpaceInformation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CellSpaceInformation MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CellSpaceInformation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CellSpaceInformation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CellSpaceInformation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CellSpaceInformation result;
      
      private CellSpaceInformation PrepareBuilder() {
        if (resultIsReadOnly) {
          CellSpaceInformation original = result;
          result = new CellSpaceInformation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CellSpaceInformation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CellSpaceInformation.Descriptor; }
      }
      
      public override CellSpaceInformation DefaultInstanceForType {
        get { return global::sally.CellSpaceInformation.DefaultInstance; }
      }
      
      public override CellSpaceInformation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CellSpaceInformation) {
          return MergeFrom((CellSpaceInformation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CellSpaceInformation other) {
        if (other == global::sally.CellSpaceInformation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cellSpaceInformationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cellSpaceInformationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.CellPosition.Builder subBuilder = global::sally.CellPosition.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasWidth = input.ReadInt32(ref result.width_);
              break;
            }
            case 24: {
              result.hasHeight = input.ReadInt32(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::sally.CellPosition Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::sally.CellPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::sally.CellPosition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::sally.CellPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::sally.CellPosition.DefaultInstance) {
            result.position_ = global::sally.CellPosition.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
    }
    static CellSpaceInformation() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CellPositions : pb::GeneratedMessage<CellPositions, CellPositions.Builder> {
    private CellPositions() { }
    private static readonly CellPositions defaultInstance = new CellPositions().MakeReadOnly();
    private static readonly string[] _cellPositionsFieldNames = new string[] { "cellPositions" };
    private static readonly uint[] _cellPositionsFieldTags = new uint[] { 10 };
    public static CellPositions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CellPositions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CellPositions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CellPositions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CellPositions, CellPositions.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CellPositions__FieldAccessorTable; }
    }
    
    public const int CellPositions_FieldNumber = 1;
    private pbc::PopsicleList<global::sally.CellSpaceInformation> cellPositions_ = new pbc::PopsicleList<global::sally.CellSpaceInformation>();
    public scg::IList<global::sally.CellSpaceInformation> CellPositions_List {
      get { return cellPositions_; }
    }
    public int CellPositions_Count {
      get { return cellPositions_.Count; }
    }
    public global::sally.CellSpaceInformation GetCellPositions_(int index) {
      return cellPositions_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::sally.CellSpaceInformation element in CellPositions_List) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cellPositionsFieldNames;
      if (cellPositions_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], cellPositions_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.CellSpaceInformation element in CellPositions_List) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CellPositions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellPositions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellPositions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellPositions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellPositions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellPositions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CellPositions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CellPositions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CellPositions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellPositions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CellPositions MakeReadOnly() {
      cellPositions_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CellPositions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CellPositions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CellPositions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CellPositions result;
      
      private CellPositions PrepareBuilder() {
        if (resultIsReadOnly) {
          CellPositions original = result;
          result = new CellPositions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CellPositions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CellPositions.Descriptor; }
      }
      
      public override CellPositions DefaultInstanceForType {
        get { return global::sally.CellPositions.DefaultInstance; }
      }
      
      public override CellPositions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CellPositions) {
          return MergeFrom((CellPositions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CellPositions other) {
        if (other == global::sally.CellPositions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.cellPositions_.Count != 0) {
          result.cellPositions_.Add(other.cellPositions_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cellPositionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cellPositionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.cellPositions_, global::sally.CellSpaceInformation.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.CellSpaceInformation> CellPositions_List {
        get { return PrepareBuilder().cellPositions_; }
      }
      public int CellPositions_Count {
        get { return result.CellPositions_Count; }
      }
      public global::sally.CellSpaceInformation GetCellPositions_(int index) {
        return result.GetCellPositions_(index);
      }
      public Builder SetCellPositions_(int index, global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cellPositions_[index] = value;
        return this;
      }
      public Builder SetCellPositions_(int index, global::sally.CellSpaceInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cellPositions_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCellPositions_(global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cellPositions_.Add(value);
        return this;
      }
      public Builder AddCellPositions_(global::sally.CellSpaceInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cellPositions_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCellPositions_(scg::IEnumerable<global::sally.CellSpaceInformation> values) {
        PrepareBuilder();
        result.cellPositions_.Add(values);
        return this;
      }
      public Builder ClearCellPositions_() {
        PrepareBuilder();
        result.cellPositions_.Clear();
        return this;
      }
    }
    static CellPositions() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CellRange : pb::GeneratedMessage<CellRange, CellRange.Builder> {
    private CellRange() { }
    private static readonly CellRange defaultInstance = new CellRange().MakeReadOnly();
    private static readonly string[] _cellRangeFieldNames = new string[] { "end", "start" };
    private static readonly uint[] _cellRangeFieldTags = new uint[] { 18, 10 };
    public static CellRange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CellRange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CellRange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CellRange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CellRange, CellRange.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CellRange__FieldAccessorTable; }
    }
    
    public const int StartFieldNumber = 1;
    private bool hasStart;
    private global::sally.CellPosition start_;
    public bool HasStart {
      get { return hasStart; }
    }
    public global::sally.CellPosition Start {
      get { return start_ ?? global::sally.CellPosition.DefaultInstance; }
    }
    
    public const int EndFieldNumber = 2;
    private bool hasEnd;
    private global::sally.CellPosition end_;
    public bool HasEnd {
      get { return hasEnd; }
    }
    public global::sally.CellPosition End {
      get { return end_ ?? global::sally.CellPosition.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStart) return false;
        if (!hasEnd) return false;
        if (!Start.IsInitialized) return false;
        if (!End.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cellRangeFieldNames;
      if (hasStart) {
        output.WriteMessage(1, field_names[1], Start);
      }
      if (hasEnd) {
        output.WriteMessage(2, field_names[0], End);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStart) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Start);
        }
        if (hasEnd) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, End);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CellRange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellRange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellRange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellRange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellRange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellRange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CellRange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CellRange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CellRange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellRange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CellRange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CellRange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CellRange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CellRange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CellRange result;
      
      private CellRange PrepareBuilder() {
        if (resultIsReadOnly) {
          CellRange original = result;
          result = new CellRange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CellRange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CellRange.Descriptor; }
      }
      
      public override CellRange DefaultInstanceForType {
        get { return global::sally.CellRange.DefaultInstance; }
      }
      
      public override CellRange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CellRange) {
          return MergeFrom((CellRange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CellRange other) {
        if (other == global::sally.CellRange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStart) {
          MergeStart(other.Start);
        }
        if (other.HasEnd) {
          MergeEnd(other.End);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cellRangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cellRangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.CellPosition.Builder subBuilder = global::sally.CellPosition.CreateBuilder();
              if (result.hasStart) {
                subBuilder.MergeFrom(Start);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Start = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::sally.CellPosition.Builder subBuilder = global::sally.CellPosition.CreateBuilder();
              if (result.hasEnd) {
                subBuilder.MergeFrom(End);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              End = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStart {
       get { return result.hasStart; }
      }
      public global::sally.CellPosition Start {
        get { return result.Start; }
        set { SetStart(value); }
      }
      public Builder SetStart(global::sally.CellPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = value;
        return this;
      }
      public Builder SetStart(global::sally.CellPosition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStart(global::sally.CellPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStart &&
            result.start_ != global::sally.CellPosition.DefaultInstance) {
            result.start_ = global::sally.CellPosition.CreateBuilder(result.start_).MergeFrom(value).BuildPartial();
        } else {
          result.start_ = value;
        }
        result.hasStart = true;
        return this;
      }
      public Builder ClearStart() {
        PrepareBuilder();
        result.hasStart = false;
        result.start_ = null;
        return this;
      }
      
      public bool HasEnd {
       get { return result.hasEnd; }
      }
      public global::sally.CellPosition End {
        get { return result.End; }
        set { SetEnd(value); }
      }
      public Builder SetEnd(global::sally.CellPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEnd = true;
        result.end_ = value;
        return this;
      }
      public Builder SetEnd(global::sally.CellPosition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEnd = true;
        result.end_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEnd(global::sally.CellPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEnd &&
            result.end_ != global::sally.CellPosition.DefaultInstance) {
            result.end_ = global::sally.CellPosition.CreateBuilder(result.end_).MergeFrom(value).BuildPartial();
        } else {
          result.end_ = value;
        }
        result.hasEnd = true;
        return this;
      }
      public Builder ClearEnd() {
        PrepareBuilder();
        result.hasEnd = false;
        result.end_ = null;
        return this;
      }
    }
    static CellRange() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CellRanges : pb::GeneratedMessage<CellRanges, CellRanges.Builder> {
    private CellRanges() { }
    private static readonly CellRanges defaultInstance = new CellRanges().MakeReadOnly();
    private static readonly string[] _cellRangesFieldNames = new string[] { "range" };
    private static readonly uint[] _cellRangesFieldTags = new uint[] { 10 };
    public static CellRanges DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CellRanges DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CellRanges ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CellRanges__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CellRanges, CellRanges.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CellRanges__FieldAccessorTable; }
    }
    
    public const int RangeFieldNumber = 1;
    private pbc::PopsicleList<global::sally.CellRange> range_ = new pbc::PopsicleList<global::sally.CellRange>();
    public scg::IList<global::sally.CellRange> RangeList {
      get { return range_; }
    }
    public int RangeCount {
      get { return range_.Count; }
    }
    public global::sally.CellRange GetRange(int index) {
      return range_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::sally.CellRange element in RangeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cellRangesFieldNames;
      if (range_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], range_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.CellRange element in RangeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CellRanges ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellRanges ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellRanges ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellRanges ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellRanges ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellRanges ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CellRanges ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CellRanges ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CellRanges ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellRanges ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CellRanges MakeReadOnly() {
      range_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CellRanges prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CellRanges, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CellRanges cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CellRanges result;
      
      private CellRanges PrepareBuilder() {
        if (resultIsReadOnly) {
          CellRanges original = result;
          result = new CellRanges();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CellRanges MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CellRanges.Descriptor; }
      }
      
      public override CellRanges DefaultInstanceForType {
        get { return global::sally.CellRanges.DefaultInstance; }
      }
      
      public override CellRanges BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CellRanges) {
          return MergeFrom((CellRanges) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CellRanges other) {
        if (other == global::sally.CellRanges.DefaultInstance) return this;
        PrepareBuilder();
        if (other.range_.Count != 0) {
          result.range_.Add(other.range_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cellRangesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cellRangesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.range_, global::sally.CellRange.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.CellRange> RangeList {
        get { return PrepareBuilder().range_; }
      }
      public int RangeCount {
        get { return result.RangeCount; }
      }
      public global::sally.CellRange GetRange(int index) {
        return result.GetRange(index);
      }
      public Builder SetRange(int index, global::sally.CellRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.range_[index] = value;
        return this;
      }
      public Builder SetRange(int index, global::sally.CellRange.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.range_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRange(global::sally.CellRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.range_.Add(value);
        return this;
      }
      public Builder AddRange(global::sally.CellRange.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.range_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRange(scg::IEnumerable<global::sally.CellRange> values) {
        PrepareBuilder();
        result.range_.Add(values);
        return this;
      }
      public Builder ClearRange() {
        PrepareBuilder();
        result.range_.Clear();
        return this;
      }
    }
    static CellRanges() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CellData : pb::GeneratedMessage<CellData, CellData.Builder> {
    private CellData() { }
    private static readonly CellData defaultInstance = new CellData().MakeReadOnly();
    private static readonly string[] _cellDataFieldNames = new string[] { "formula", "position", "value" };
    private static readonly uint[] _cellDataFieldTags = new uint[] { 26, 10, 18 };
    public static CellData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CellData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CellData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CellData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CellData, CellData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CellData__FieldAccessorTable; }
    }
    
    public const int PositionFieldNumber = 1;
    private bool hasPosition;
    private global::sally.CellSpaceInformation position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::sally.CellSpaceInformation Position {
      get { return position_ ?? global::sally.CellSpaceInformation.DefaultInstance; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public const int FormulaFieldNumber = 3;
    private bool hasFormula;
    private string formula_ = "";
    public bool HasFormula {
      get { return hasFormula; }
    }
    public string Formula {
      get { return formula_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPosition) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cellDataFieldNames;
      if (hasPosition) {
        output.WriteMessage(1, field_names[1], Position);
      }
      if (hasValue) {
        output.WriteString(2, field_names[2], Value);
      }
      if (hasFormula) {
        output.WriteString(3, field_names[0], Formula);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Position);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        if (hasFormula) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Formula);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CellData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CellData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CellData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CellData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CellData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CellData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CellData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CellData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CellData result;
      
      private CellData PrepareBuilder() {
        if (resultIsReadOnly) {
          CellData original = result;
          result = new CellData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CellData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CellData.Descriptor; }
      }
      
      public override CellData DefaultInstanceForType {
        get { return global::sally.CellData.DefaultInstance; }
      }
      
      public override CellData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CellData) {
          return MergeFrom((CellData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CellData other) {
        if (other == global::sally.CellData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasFormula) {
          Formula = other.Formula;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cellDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cellDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.CellSpaceInformation.Builder subBuilder = global::sally.CellSpaceInformation.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
            case 26: {
              result.hasFormula = input.ReadString(ref result.formula_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::sally.CellSpaceInformation Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::sally.CellSpaceInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::sally.CellSpaceInformation.DefaultInstance) {
            result.position_ = global::sally.CellSpaceInformation.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
      
      public bool HasFormula {
        get { return result.hasFormula; }
      }
      public string Formula {
        get { return result.Formula; }
        set { SetFormula(value); }
      }
      public Builder SetFormula(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFormula = true;
        result.formula_ = value;
        return this;
      }
      public Builder ClearFormula() {
        PrepareBuilder();
        result.hasFormula = false;
        result.formula_ = "";
        return this;
      }
    }
    static CellData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RangeData : pb::GeneratedMessage<RangeData, RangeData.Builder> {
    private RangeData() { }
    private static readonly RangeData defaultInstance = new RangeData().MakeReadOnly();
    private static readonly string[] _rangeDataFieldNames = new string[] { "cells" };
    private static readonly uint[] _rangeDataFieldTags = new uint[] { 10 };
    public static RangeData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RangeData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RangeData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_RangeData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RangeData, RangeData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_RangeData__FieldAccessorTable; }
    }
    
    public const int CellsFieldNumber = 1;
    private pbc::PopsicleList<global::sally.CellData> cells_ = new pbc::PopsicleList<global::sally.CellData>();
    public scg::IList<global::sally.CellData> CellsList {
      get { return cells_; }
    }
    public int CellsCount {
      get { return cells_.Count; }
    }
    public global::sally.CellData GetCells(int index) {
      return cells_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::sally.CellData element in CellsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rangeDataFieldNames;
      if (cells_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], cells_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.CellData element in CellsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RangeData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RangeData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RangeData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RangeData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RangeData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RangeData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RangeData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RangeData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RangeData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RangeData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RangeData MakeReadOnly() {
      cells_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RangeData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RangeData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RangeData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RangeData result;
      
      private RangeData PrepareBuilder() {
        if (resultIsReadOnly) {
          RangeData original = result;
          result = new RangeData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RangeData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.RangeData.Descriptor; }
      }
      
      public override RangeData DefaultInstanceForType {
        get { return global::sally.RangeData.DefaultInstance; }
      }
      
      public override RangeData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RangeData) {
          return MergeFrom((RangeData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RangeData other) {
        if (other == global::sally.RangeData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.cells_.Count != 0) {
          result.cells_.Add(other.cells_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rangeDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rangeDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.cells_, global::sally.CellData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.CellData> CellsList {
        get { return PrepareBuilder().cells_; }
      }
      public int CellsCount {
        get { return result.CellsCount; }
      }
      public global::sally.CellData GetCells(int index) {
        return result.GetCells(index);
      }
      public Builder SetCells(int index, global::sally.CellData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cells_[index] = value;
        return this;
      }
      public Builder SetCells(int index, global::sally.CellData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cells_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCells(global::sally.CellData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cells_.Add(value);
        return this;
      }
      public Builder AddCells(global::sally.CellData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cells_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCells(scg::IEnumerable<global::sally.CellData> values) {
        PrepareBuilder();
        result.cells_.Add(values);
        return this;
      }
      public Builder ClearCells() {
        PrepareBuilder();
        result.cells_.Clear();
        return this;
      }
    }
    static RangeData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BorderLine : pb::GeneratedMessage<BorderLine, BorderLine.Builder> {
    private BorderLine() { }
    private static readonly BorderLine defaultInstance = new BorderLine().MakeReadOnly();
    private static readonly string[] _borderLineFieldNames = new string[] { "borderColor", "excelBorderStyle", "excelBorderWeight", "formatStyle", "ooInnerLineWidth", "ooLineDistance", "ooOuterLineWidth" };
    private static readonly uint[] _borderLineFieldTags = new uint[] { 8, 24, 32, 16, 40, 56, 48 };
    public static BorderLine DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BorderLine DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BorderLine ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_BorderLine__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BorderLine, BorderLine.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_BorderLine__FieldAccessorTable; }
    }
    
    public const int BorderColorFieldNumber = 1;
    private bool hasBorderColor;
    private long borderColor_;
    public bool HasBorderColor {
      get { return hasBorderColor; }
    }
    public long BorderColor {
      get { return borderColor_; }
    }
    
    public const int FormatStyleFieldNumber = 2;
    private bool hasFormatStyle;
    private int formatStyle_;
    public bool HasFormatStyle {
      get { return hasFormatStyle; }
    }
    public int FormatStyle {
      get { return formatStyle_; }
    }
    
    public const int ExcelBorderStyleFieldNumber = 3;
    private bool hasExcelBorderStyle;
    private int excelBorderStyle_;
    public bool HasExcelBorderStyle {
      get { return hasExcelBorderStyle; }
    }
    public int ExcelBorderStyle {
      get { return excelBorderStyle_; }
    }
    
    public const int ExcelBorderWeightFieldNumber = 4;
    private bool hasExcelBorderWeight;
    private int excelBorderWeight_;
    public bool HasExcelBorderWeight {
      get { return hasExcelBorderWeight; }
    }
    public int ExcelBorderWeight {
      get { return excelBorderWeight_; }
    }
    
    public const int OoInnerLineWidthFieldNumber = 5;
    private bool hasOoInnerLineWidth;
    private int ooInnerLineWidth_;
    public bool HasOoInnerLineWidth {
      get { return hasOoInnerLineWidth; }
    }
    public int OoInnerLineWidth {
      get { return ooInnerLineWidth_; }
    }
    
    public const int OoOuterLineWidthFieldNumber = 6;
    private bool hasOoOuterLineWidth;
    private int ooOuterLineWidth_;
    public bool HasOoOuterLineWidth {
      get { return hasOoOuterLineWidth; }
    }
    public int OoOuterLineWidth {
      get { return ooOuterLineWidth_; }
    }
    
    public const int OoLineDistanceFieldNumber = 7;
    private bool hasOoLineDistance;
    private int ooLineDistance_;
    public bool HasOoLineDistance {
      get { return hasOoLineDistance; }
    }
    public int OoLineDistance {
      get { return ooLineDistance_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBorderColor) return false;
        if (!hasFormatStyle) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _borderLineFieldNames;
      if (hasBorderColor) {
        output.WriteInt64(1, field_names[0], BorderColor);
      }
      if (hasFormatStyle) {
        output.WriteInt32(2, field_names[3], FormatStyle);
      }
      if (hasExcelBorderStyle) {
        output.WriteInt32(3, field_names[1], ExcelBorderStyle);
      }
      if (hasExcelBorderWeight) {
        output.WriteInt32(4, field_names[2], ExcelBorderWeight);
      }
      if (hasOoInnerLineWidth) {
        output.WriteInt32(5, field_names[4], OoInnerLineWidth);
      }
      if (hasOoOuterLineWidth) {
        output.WriteInt32(6, field_names[6], OoOuterLineWidth);
      }
      if (hasOoLineDistance) {
        output.WriteInt32(7, field_names[5], OoLineDistance);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBorderColor) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, BorderColor);
        }
        if (hasFormatStyle) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, FormatStyle);
        }
        if (hasExcelBorderStyle) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ExcelBorderStyle);
        }
        if (hasExcelBorderWeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ExcelBorderWeight);
        }
        if (hasOoInnerLineWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, OoInnerLineWidth);
        }
        if (hasOoOuterLineWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, OoOuterLineWidth);
        }
        if (hasOoLineDistance) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, OoLineDistance);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BorderLine ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BorderLine ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BorderLine ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BorderLine ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BorderLine ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BorderLine ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BorderLine ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BorderLine ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BorderLine ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BorderLine ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BorderLine MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BorderLine prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BorderLine, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BorderLine cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BorderLine result;
      
      private BorderLine PrepareBuilder() {
        if (resultIsReadOnly) {
          BorderLine original = result;
          result = new BorderLine();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BorderLine MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.BorderLine.Descriptor; }
      }
      
      public override BorderLine DefaultInstanceForType {
        get { return global::sally.BorderLine.DefaultInstance; }
      }
      
      public override BorderLine BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BorderLine) {
          return MergeFrom((BorderLine) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BorderLine other) {
        if (other == global::sally.BorderLine.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBorderColor) {
          BorderColor = other.BorderColor;
        }
        if (other.HasFormatStyle) {
          FormatStyle = other.FormatStyle;
        }
        if (other.HasExcelBorderStyle) {
          ExcelBorderStyle = other.ExcelBorderStyle;
        }
        if (other.HasExcelBorderWeight) {
          ExcelBorderWeight = other.ExcelBorderWeight;
        }
        if (other.HasOoInnerLineWidth) {
          OoInnerLineWidth = other.OoInnerLineWidth;
        }
        if (other.HasOoOuterLineWidth) {
          OoOuterLineWidth = other.OoOuterLineWidth;
        }
        if (other.HasOoLineDistance) {
          OoLineDistance = other.OoLineDistance;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_borderLineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _borderLineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBorderColor = input.ReadInt64(ref result.borderColor_);
              break;
            }
            case 16: {
              result.hasFormatStyle = input.ReadInt32(ref result.formatStyle_);
              break;
            }
            case 24: {
              result.hasExcelBorderStyle = input.ReadInt32(ref result.excelBorderStyle_);
              break;
            }
            case 32: {
              result.hasExcelBorderWeight = input.ReadInt32(ref result.excelBorderWeight_);
              break;
            }
            case 40: {
              result.hasOoInnerLineWidth = input.ReadInt32(ref result.ooInnerLineWidth_);
              break;
            }
            case 48: {
              result.hasOoOuterLineWidth = input.ReadInt32(ref result.ooOuterLineWidth_);
              break;
            }
            case 56: {
              result.hasOoLineDistance = input.ReadInt32(ref result.ooLineDistance_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBorderColor {
        get { return result.hasBorderColor; }
      }
      public long BorderColor {
        get { return result.BorderColor; }
        set { SetBorderColor(value); }
      }
      public Builder SetBorderColor(long value) {
        PrepareBuilder();
        result.hasBorderColor = true;
        result.borderColor_ = value;
        return this;
      }
      public Builder ClearBorderColor() {
        PrepareBuilder();
        result.hasBorderColor = false;
        result.borderColor_ = 0L;
        return this;
      }
      
      public bool HasFormatStyle {
        get { return result.hasFormatStyle; }
      }
      public int FormatStyle {
        get { return result.FormatStyle; }
        set { SetFormatStyle(value); }
      }
      public Builder SetFormatStyle(int value) {
        PrepareBuilder();
        result.hasFormatStyle = true;
        result.formatStyle_ = value;
        return this;
      }
      public Builder ClearFormatStyle() {
        PrepareBuilder();
        result.hasFormatStyle = false;
        result.formatStyle_ = 0;
        return this;
      }
      
      public bool HasExcelBorderStyle {
        get { return result.hasExcelBorderStyle; }
      }
      public int ExcelBorderStyle {
        get { return result.ExcelBorderStyle; }
        set { SetExcelBorderStyle(value); }
      }
      public Builder SetExcelBorderStyle(int value) {
        PrepareBuilder();
        result.hasExcelBorderStyle = true;
        result.excelBorderStyle_ = value;
        return this;
      }
      public Builder ClearExcelBorderStyle() {
        PrepareBuilder();
        result.hasExcelBorderStyle = false;
        result.excelBorderStyle_ = 0;
        return this;
      }
      
      public bool HasExcelBorderWeight {
        get { return result.hasExcelBorderWeight; }
      }
      public int ExcelBorderWeight {
        get { return result.ExcelBorderWeight; }
        set { SetExcelBorderWeight(value); }
      }
      public Builder SetExcelBorderWeight(int value) {
        PrepareBuilder();
        result.hasExcelBorderWeight = true;
        result.excelBorderWeight_ = value;
        return this;
      }
      public Builder ClearExcelBorderWeight() {
        PrepareBuilder();
        result.hasExcelBorderWeight = false;
        result.excelBorderWeight_ = 0;
        return this;
      }
      
      public bool HasOoInnerLineWidth {
        get { return result.hasOoInnerLineWidth; }
      }
      public int OoInnerLineWidth {
        get { return result.OoInnerLineWidth; }
        set { SetOoInnerLineWidth(value); }
      }
      public Builder SetOoInnerLineWidth(int value) {
        PrepareBuilder();
        result.hasOoInnerLineWidth = true;
        result.ooInnerLineWidth_ = value;
        return this;
      }
      public Builder ClearOoInnerLineWidth() {
        PrepareBuilder();
        result.hasOoInnerLineWidth = false;
        result.ooInnerLineWidth_ = 0;
        return this;
      }
      
      public bool HasOoOuterLineWidth {
        get { return result.hasOoOuterLineWidth; }
      }
      public int OoOuterLineWidth {
        get { return result.OoOuterLineWidth; }
        set { SetOoOuterLineWidth(value); }
      }
      public Builder SetOoOuterLineWidth(int value) {
        PrepareBuilder();
        result.hasOoOuterLineWidth = true;
        result.ooOuterLineWidth_ = value;
        return this;
      }
      public Builder ClearOoOuterLineWidth() {
        PrepareBuilder();
        result.hasOoOuterLineWidth = false;
        result.ooOuterLineWidth_ = 0;
        return this;
      }
      
      public bool HasOoLineDistance {
        get { return result.hasOoLineDistance; }
      }
      public int OoLineDistance {
        get { return result.OoLineDistance; }
        set { SetOoLineDistance(value); }
      }
      public Builder SetOoLineDistance(int value) {
        PrepareBuilder();
        result.hasOoLineDistance = true;
        result.ooLineDistance_ = value;
        return this;
      }
      public Builder ClearOoLineDistance() {
        PrepareBuilder();
        result.hasOoLineDistance = false;
        result.ooLineDistance_ = 0;
        return this;
      }
    }
    static BorderLine() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CellBorder : pb::GeneratedMessage<CellBorder, CellBorder.Builder> {
    private CellBorder() { }
    private static readonly CellBorder defaultInstance = new CellBorder().MakeReadOnly();
    private static readonly string[] _cellBorderFieldNames = new string[] { "bottom", "left", "right", "top" };
    private static readonly uint[] _cellBorderFieldTags = new uint[] { 18, 26, 34, 10 };
    public static CellBorder DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CellBorder DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CellBorder ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CellBorder__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CellBorder, CellBorder.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CellBorder__FieldAccessorTable; }
    }
    
    public const int TopFieldNumber = 1;
    private bool hasTop;
    private global::sally.BorderLine top_;
    public bool HasTop {
      get { return hasTop; }
    }
    public global::sally.BorderLine Top {
      get { return top_ ?? global::sally.BorderLine.DefaultInstance; }
    }
    
    public const int BottomFieldNumber = 2;
    private bool hasBottom;
    private global::sally.BorderLine bottom_;
    public bool HasBottom {
      get { return hasBottom; }
    }
    public global::sally.BorderLine Bottom {
      get { return bottom_ ?? global::sally.BorderLine.DefaultInstance; }
    }
    
    public const int LeftFieldNumber = 3;
    private bool hasLeft;
    private global::sally.BorderLine left_;
    public bool HasLeft {
      get { return hasLeft; }
    }
    public global::sally.BorderLine Left {
      get { return left_ ?? global::sally.BorderLine.DefaultInstance; }
    }
    
    public const int RightFieldNumber = 4;
    private bool hasRight;
    private global::sally.BorderLine right_;
    public bool HasRight {
      get { return hasRight; }
    }
    public global::sally.BorderLine Right {
      get { return right_ ?? global::sally.BorderLine.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasTop) {
          if (!Top.IsInitialized) return false;
        }
        if (HasBottom) {
          if (!Bottom.IsInitialized) return false;
        }
        if (HasLeft) {
          if (!Left.IsInitialized) return false;
        }
        if (HasRight) {
          if (!Right.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cellBorderFieldNames;
      if (hasTop) {
        output.WriteMessage(1, field_names[3], Top);
      }
      if (hasBottom) {
        output.WriteMessage(2, field_names[0], Bottom);
      }
      if (hasLeft) {
        output.WriteMessage(3, field_names[1], Left);
      }
      if (hasRight) {
        output.WriteMessage(4, field_names[2], Right);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTop) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Top);
        }
        if (hasBottom) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Bottom);
        }
        if (hasLeft) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Left);
        }
        if (hasRight) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Right);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CellBorder ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellBorder ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellBorder ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellBorder ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellBorder ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellBorder ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CellBorder ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CellBorder ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CellBorder ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellBorder ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CellBorder MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CellBorder prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CellBorder, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CellBorder cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CellBorder result;
      
      private CellBorder PrepareBuilder() {
        if (resultIsReadOnly) {
          CellBorder original = result;
          result = new CellBorder();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CellBorder MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CellBorder.Descriptor; }
      }
      
      public override CellBorder DefaultInstanceForType {
        get { return global::sally.CellBorder.DefaultInstance; }
      }
      
      public override CellBorder BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CellBorder) {
          return MergeFrom((CellBorder) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CellBorder other) {
        if (other == global::sally.CellBorder.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTop) {
          MergeTop(other.Top);
        }
        if (other.HasBottom) {
          MergeBottom(other.Bottom);
        }
        if (other.HasLeft) {
          MergeLeft(other.Left);
        }
        if (other.HasRight) {
          MergeRight(other.Right);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cellBorderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cellBorderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.BorderLine.Builder subBuilder = global::sally.BorderLine.CreateBuilder();
              if (result.hasTop) {
                subBuilder.MergeFrom(Top);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Top = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::sally.BorderLine.Builder subBuilder = global::sally.BorderLine.CreateBuilder();
              if (result.hasBottom) {
                subBuilder.MergeFrom(Bottom);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Bottom = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::sally.BorderLine.Builder subBuilder = global::sally.BorderLine.CreateBuilder();
              if (result.hasLeft) {
                subBuilder.MergeFrom(Left);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Left = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::sally.BorderLine.Builder subBuilder = global::sally.BorderLine.CreateBuilder();
              if (result.hasRight) {
                subBuilder.MergeFrom(Right);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Right = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTop {
       get { return result.hasTop; }
      }
      public global::sally.BorderLine Top {
        get { return result.Top; }
        set { SetTop(value); }
      }
      public Builder SetTop(global::sally.BorderLine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTop = true;
        result.top_ = value;
        return this;
      }
      public Builder SetTop(global::sally.BorderLine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTop = true;
        result.top_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTop(global::sally.BorderLine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTop &&
            result.top_ != global::sally.BorderLine.DefaultInstance) {
            result.top_ = global::sally.BorderLine.CreateBuilder(result.top_).MergeFrom(value).BuildPartial();
        } else {
          result.top_ = value;
        }
        result.hasTop = true;
        return this;
      }
      public Builder ClearTop() {
        PrepareBuilder();
        result.hasTop = false;
        result.top_ = null;
        return this;
      }
      
      public bool HasBottom {
       get { return result.hasBottom; }
      }
      public global::sally.BorderLine Bottom {
        get { return result.Bottom; }
        set { SetBottom(value); }
      }
      public Builder SetBottom(global::sally.BorderLine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBottom = true;
        result.bottom_ = value;
        return this;
      }
      public Builder SetBottom(global::sally.BorderLine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBottom = true;
        result.bottom_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBottom(global::sally.BorderLine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBottom &&
            result.bottom_ != global::sally.BorderLine.DefaultInstance) {
            result.bottom_ = global::sally.BorderLine.CreateBuilder(result.bottom_).MergeFrom(value).BuildPartial();
        } else {
          result.bottom_ = value;
        }
        result.hasBottom = true;
        return this;
      }
      public Builder ClearBottom() {
        PrepareBuilder();
        result.hasBottom = false;
        result.bottom_ = null;
        return this;
      }
      
      public bool HasLeft {
       get { return result.hasLeft; }
      }
      public global::sally.BorderLine Left {
        get { return result.Left; }
        set { SetLeft(value); }
      }
      public Builder SetLeft(global::sally.BorderLine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLeft = true;
        result.left_ = value;
        return this;
      }
      public Builder SetLeft(global::sally.BorderLine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLeft = true;
        result.left_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLeft(global::sally.BorderLine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLeft &&
            result.left_ != global::sally.BorderLine.DefaultInstance) {
            result.left_ = global::sally.BorderLine.CreateBuilder(result.left_).MergeFrom(value).BuildPartial();
        } else {
          result.left_ = value;
        }
        result.hasLeft = true;
        return this;
      }
      public Builder ClearLeft() {
        PrepareBuilder();
        result.hasLeft = false;
        result.left_ = null;
        return this;
      }
      
      public bool HasRight {
       get { return result.hasRight; }
      }
      public global::sally.BorderLine Right {
        get { return result.Right; }
        set { SetRight(value); }
      }
      public Builder SetRight(global::sally.BorderLine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRight = true;
        result.right_ = value;
        return this;
      }
      public Builder SetRight(global::sally.BorderLine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRight = true;
        result.right_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRight(global::sally.BorderLine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRight &&
            result.right_ != global::sally.BorderLine.DefaultInstance) {
            result.right_ = global::sally.BorderLine.CreateBuilder(result.right_).MergeFrom(value).BuildPartial();
        } else {
          result.right_ = value;
        }
        result.hasRight = true;
        return this;
      }
      public Builder ClearRight() {
        PrepareBuilder();
        result.hasRight = false;
        result.right_ = null;
        return this;
      }
    }
    static CellBorder() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Font : pb::GeneratedMessage<Font, Font.Builder> {
    private Font() { }
    private static readonly Font defaultInstance = new Font().MakeReadOnly();
    private static readonly string[] _fontFieldNames = new string[] { "fontColor", "fontName", "fontSize", "isBold", "isItalic", "isUnderlined" };
    private static readonly uint[] _fontFieldTags = new uint[] { 16, 10, 29, 40, 32, 48 };
    public static Font DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Font DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Font ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_Font__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Font, Font.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_Font__FieldAccessorTable; }
    }
    
    public const int FontNameFieldNumber = 1;
    private bool hasFontName;
    private string fontName_ = "";
    public bool HasFontName {
      get { return hasFontName; }
    }
    public string FontName {
      get { return fontName_; }
    }
    
    public const int FontColorFieldNumber = 2;
    private bool hasFontColor;
    private int fontColor_;
    public bool HasFontColor {
      get { return hasFontColor; }
    }
    public int FontColor {
      get { return fontColor_; }
    }
    
    public const int FontSizeFieldNumber = 3;
    private bool hasFontSize;
    private float fontSize_;
    public bool HasFontSize {
      get { return hasFontSize; }
    }
    public float FontSize {
      get { return fontSize_; }
    }
    
    public const int IsItalicFieldNumber = 4;
    private bool hasIsItalic;
    private bool isItalic_;
    public bool HasIsItalic {
      get { return hasIsItalic; }
    }
    public bool IsItalic {
      get { return isItalic_; }
    }
    
    public const int IsBoldFieldNumber = 5;
    private bool hasIsBold;
    private bool isBold_;
    public bool HasIsBold {
      get { return hasIsBold; }
    }
    public bool IsBold {
      get { return isBold_; }
    }
    
    public const int IsUnderlinedFieldNumber = 6;
    private bool hasIsUnderlined;
    private bool isUnderlined_;
    public bool HasIsUnderlined {
      get { return hasIsUnderlined; }
    }
    public bool IsUnderlined {
      get { return isUnderlined_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFontName) return false;
        if (!hasFontColor) return false;
        if (!hasFontSize) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fontFieldNames;
      if (hasFontName) {
        output.WriteString(1, field_names[1], FontName);
      }
      if (hasFontColor) {
        output.WriteInt32(2, field_names[0], FontColor);
      }
      if (hasFontSize) {
        output.WriteFloat(3, field_names[2], FontSize);
      }
      if (hasIsItalic) {
        output.WriteBool(4, field_names[4], IsItalic);
      }
      if (hasIsBold) {
        output.WriteBool(5, field_names[3], IsBold);
      }
      if (hasIsUnderlined) {
        output.WriteBool(6, field_names[5], IsUnderlined);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFontName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FontName);
        }
        if (hasFontColor) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, FontColor);
        }
        if (hasFontSize) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, FontSize);
        }
        if (hasIsItalic) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, IsItalic);
        }
        if (hasIsBold) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, IsBold);
        }
        if (hasIsUnderlined) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, IsUnderlined);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Font ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Font ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Font ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Font ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Font ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Font ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Font ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Font ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Font ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Font ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Font MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Font prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Font, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Font cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Font result;
      
      private Font PrepareBuilder() {
        if (resultIsReadOnly) {
          Font original = result;
          result = new Font();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Font MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.Font.Descriptor; }
      }
      
      public override Font DefaultInstanceForType {
        get { return global::sally.Font.DefaultInstance; }
      }
      
      public override Font BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Font) {
          return MergeFrom((Font) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Font other) {
        if (other == global::sally.Font.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFontName) {
          FontName = other.FontName;
        }
        if (other.HasFontColor) {
          FontColor = other.FontColor;
        }
        if (other.HasFontSize) {
          FontSize = other.FontSize;
        }
        if (other.HasIsItalic) {
          IsItalic = other.IsItalic;
        }
        if (other.HasIsBold) {
          IsBold = other.IsBold;
        }
        if (other.HasIsUnderlined) {
          IsUnderlined = other.IsUnderlined;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fontFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fontFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFontName = input.ReadString(ref result.fontName_);
              break;
            }
            case 16: {
              result.hasFontColor = input.ReadInt32(ref result.fontColor_);
              break;
            }
            case 29: {
              result.hasFontSize = input.ReadFloat(ref result.fontSize_);
              break;
            }
            case 32: {
              result.hasIsItalic = input.ReadBool(ref result.isItalic_);
              break;
            }
            case 40: {
              result.hasIsBold = input.ReadBool(ref result.isBold_);
              break;
            }
            case 48: {
              result.hasIsUnderlined = input.ReadBool(ref result.isUnderlined_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFontName {
        get { return result.hasFontName; }
      }
      public string FontName {
        get { return result.FontName; }
        set { SetFontName(value); }
      }
      public Builder SetFontName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFontName = true;
        result.fontName_ = value;
        return this;
      }
      public Builder ClearFontName() {
        PrepareBuilder();
        result.hasFontName = false;
        result.fontName_ = "";
        return this;
      }
      
      public bool HasFontColor {
        get { return result.hasFontColor; }
      }
      public int FontColor {
        get { return result.FontColor; }
        set { SetFontColor(value); }
      }
      public Builder SetFontColor(int value) {
        PrepareBuilder();
        result.hasFontColor = true;
        result.fontColor_ = value;
        return this;
      }
      public Builder ClearFontColor() {
        PrepareBuilder();
        result.hasFontColor = false;
        result.fontColor_ = 0;
        return this;
      }
      
      public bool HasFontSize {
        get { return result.hasFontSize; }
      }
      public float FontSize {
        get { return result.FontSize; }
        set { SetFontSize(value); }
      }
      public Builder SetFontSize(float value) {
        PrepareBuilder();
        result.hasFontSize = true;
        result.fontSize_ = value;
        return this;
      }
      public Builder ClearFontSize() {
        PrepareBuilder();
        result.hasFontSize = false;
        result.fontSize_ = 0F;
        return this;
      }
      
      public bool HasIsItalic {
        get { return result.hasIsItalic; }
      }
      public bool IsItalic {
        get { return result.IsItalic; }
        set { SetIsItalic(value); }
      }
      public Builder SetIsItalic(bool value) {
        PrepareBuilder();
        result.hasIsItalic = true;
        result.isItalic_ = value;
        return this;
      }
      public Builder ClearIsItalic() {
        PrepareBuilder();
        result.hasIsItalic = false;
        result.isItalic_ = false;
        return this;
      }
      
      public bool HasIsBold {
        get { return result.hasIsBold; }
      }
      public bool IsBold {
        get { return result.IsBold; }
        set { SetIsBold(value); }
      }
      public Builder SetIsBold(bool value) {
        PrepareBuilder();
        result.hasIsBold = true;
        result.isBold_ = value;
        return this;
      }
      public Builder ClearIsBold() {
        PrepareBuilder();
        result.hasIsBold = false;
        result.isBold_ = false;
        return this;
      }
      
      public bool HasIsUnderlined {
        get { return result.hasIsUnderlined; }
      }
      public bool IsUnderlined {
        get { return result.IsUnderlined; }
        set { SetIsUnderlined(value); }
      }
      public Builder SetIsUnderlined(bool value) {
        PrepareBuilder();
        result.hasIsUnderlined = true;
        result.isUnderlined_ = value;
        return this;
      }
      public Builder ClearIsUnderlined() {
        PrepareBuilder();
        result.hasIsUnderlined = false;
        result.isUnderlined_ = false;
        return this;
      }
    }
    static Font() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Cell : pb::GeneratedMessage<Cell, Cell.Builder> {
    private Cell() { }
    private static readonly Cell defaultInstance = new Cell().MakeReadOnly();
    private static readonly string[] _cellFieldNames = new string[] { "backColor", "border", "data", "font" };
    private static readonly uint[] _cellFieldTags = new uint[] { 16, 34, 10, 26 };
    public static Cell DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Cell DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Cell ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_Cell__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Cell, Cell.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_Cell__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private bool hasData;
    private global::sally.CellData data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::sally.CellData Data {
      get { return data_ ?? global::sally.CellData.DefaultInstance; }
    }
    
    public const int BackColorFieldNumber = 2;
    private bool hasBackColor;
    private int backColor_;
    public bool HasBackColor {
      get { return hasBackColor; }
    }
    public int BackColor {
      get { return backColor_; }
    }
    
    public const int FontFieldNumber = 3;
    private bool hasFont;
    private global::sally.Font font_;
    public bool HasFont {
      get { return hasFont; }
    }
    public global::sally.Font Font {
      get { return font_ ?? global::sally.Font.DefaultInstance; }
    }
    
    public const int BorderFieldNumber = 4;
    private bool hasBorder;
    private global::sally.CellBorder border_;
    public bool HasBorder {
      get { return hasBorder; }
    }
    public global::sally.CellBorder Border {
      get { return border_ ?? global::sally.CellBorder.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasData) return false;
        if (!hasBackColor) return false;
        if (!hasBorder) return false;
        if (!Data.IsInitialized) return false;
        if (HasFont) {
          if (!Font.IsInitialized) return false;
        }
        if (!Border.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cellFieldNames;
      if (hasData) {
        output.WriteMessage(1, field_names[2], Data);
      }
      if (hasBackColor) {
        output.WriteInt32(2, field_names[0], BackColor);
      }
      if (hasFont) {
        output.WriteMessage(3, field_names[3], Font);
      }
      if (hasBorder) {
        output.WriteMessage(4, field_names[1], Border);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasData) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Data);
        }
        if (hasBackColor) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, BackColor);
        }
        if (hasFont) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Font);
        }
        if (hasBorder) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Border);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Cell ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cell ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cell ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cell ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cell ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cell ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Cell ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Cell ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Cell ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cell ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Cell MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Cell prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Cell, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Cell cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Cell result;
      
      private Cell PrepareBuilder() {
        if (resultIsReadOnly) {
          Cell original = result;
          result = new Cell();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Cell MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.Cell.Descriptor; }
      }
      
      public override Cell DefaultInstanceForType {
        get { return global::sally.Cell.DefaultInstance; }
      }
      
      public override Cell BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Cell) {
          return MergeFrom((Cell) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Cell other) {
        if (other == global::sally.Cell.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasData) {
          MergeData(other.Data);
        }
        if (other.HasBackColor) {
          BackColor = other.BackColor;
        }
        if (other.HasFont) {
          MergeFont(other.Font);
        }
        if (other.HasBorder) {
          MergeBorder(other.Border);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cellFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cellFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.CellData.Builder subBuilder = global::sally.CellData.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasBackColor = input.ReadInt32(ref result.backColor_);
              break;
            }
            case 26: {
              global::sally.Font.Builder subBuilder = global::sally.Font.CreateBuilder();
              if (result.hasFont) {
                subBuilder.MergeFrom(Font);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Font = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::sally.CellBorder.Builder subBuilder = global::sally.CellBorder.CreateBuilder();
              if (result.hasBorder) {
                subBuilder.MergeFrom(Border);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Border = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::sally.CellData Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::sally.CellData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::sally.CellData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::sally.CellData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::sally.CellData.DefaultInstance) {
            result.data_ = global::sally.CellData.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
      
      public bool HasBackColor {
        get { return result.hasBackColor; }
      }
      public int BackColor {
        get { return result.BackColor; }
        set { SetBackColor(value); }
      }
      public Builder SetBackColor(int value) {
        PrepareBuilder();
        result.hasBackColor = true;
        result.backColor_ = value;
        return this;
      }
      public Builder ClearBackColor() {
        PrepareBuilder();
        result.hasBackColor = false;
        result.backColor_ = 0;
        return this;
      }
      
      public bool HasFont {
       get { return result.hasFont; }
      }
      public global::sally.Font Font {
        get { return result.Font; }
        set { SetFont(value); }
      }
      public Builder SetFont(global::sally.Font value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFont = true;
        result.font_ = value;
        return this;
      }
      public Builder SetFont(global::sally.Font.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFont = true;
        result.font_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFont(global::sally.Font value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFont &&
            result.font_ != global::sally.Font.DefaultInstance) {
            result.font_ = global::sally.Font.CreateBuilder(result.font_).MergeFrom(value).BuildPartial();
        } else {
          result.font_ = value;
        }
        result.hasFont = true;
        return this;
      }
      public Builder ClearFont() {
        PrepareBuilder();
        result.hasFont = false;
        result.font_ = null;
        return this;
      }
      
      public bool HasBorder {
       get { return result.hasBorder; }
      }
      public global::sally.CellBorder Border {
        get { return result.Border; }
        set { SetBorder(value); }
      }
      public Builder SetBorder(global::sally.CellBorder value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBorder = true;
        result.border_ = value;
        return this;
      }
      public Builder SetBorder(global::sally.CellBorder.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBorder = true;
        result.border_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBorder(global::sally.CellBorder value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBorder &&
            result.border_ != global::sally.CellBorder.DefaultInstance) {
            result.border_ = global::sally.CellBorder.CreateBuilder(result.border_).MergeFrom(value).BuildPartial();
        } else {
          result.border_ = value;
        }
        result.hasBorder = true;
        return this;
      }
      public Builder ClearBorder() {
        PrepareBuilder();
        result.hasBorder = false;
        result.border_ = null;
        return this;
      }
    }
    static Cell() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Sheet : pb::GeneratedMessage<Sheet, Sheet.Builder> {
    private Sheet() { }
    private static readonly Sheet defaultInstance = new Sheet().MakeReadOnly();
    private static readonly string[] _sheetFieldNames = new string[] { "cells", "id" };
    private static readonly uint[] _sheetFieldTags = new uint[] { 18, 8 };
    public static Sheet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Sheet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Sheet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_Sheet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Sheet, Sheet.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_Sheet__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int CellsFieldNumber = 2;
    private pbc::PopsicleList<global::sally.Cell> cells_ = new pbc::PopsicleList<global::sally.Cell>();
    public scg::IList<global::sally.Cell> CellsList {
      get { return cells_; }
    }
    public int CellsCount {
      get { return cells_.Count; }
    }
    public global::sally.Cell GetCells(int index) {
      return cells_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::sally.Cell element in CellsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sheetFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (cells_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], cells_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        foreach (global::sally.Cell element in CellsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Sheet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Sheet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Sheet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Sheet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Sheet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Sheet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Sheet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Sheet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Sheet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Sheet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Sheet MakeReadOnly() {
      cells_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Sheet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Sheet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Sheet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Sheet result;
      
      private Sheet PrepareBuilder() {
        if (resultIsReadOnly) {
          Sheet original = result;
          result = new Sheet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Sheet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.Sheet.Descriptor; }
      }
      
      public override Sheet DefaultInstanceForType {
        get { return global::sally.Sheet.DefaultInstance; }
      }
      
      public override Sheet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Sheet) {
          return MergeFrom((Sheet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Sheet other) {
        if (other == global::sally.Sheet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.cells_.Count != 0) {
          result.cells_.Add(other.cells_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sheetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sheetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.cells_, global::sally.Cell.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.Cell> CellsList {
        get { return PrepareBuilder().cells_; }
      }
      public int CellsCount {
        get { return result.CellsCount; }
      }
      public global::sally.Cell GetCells(int index) {
        return result.GetCells(index);
      }
      public Builder SetCells(int index, global::sally.Cell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cells_[index] = value;
        return this;
      }
      public Builder SetCells(int index, global::sally.Cell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cells_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCells(global::sally.Cell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cells_.Add(value);
        return this;
      }
      public Builder AddCells(global::sally.Cell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cells_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCells(scg::IEnumerable<global::sally.Cell> values) {
        PrepareBuilder();
        result.cells_.Add(values);
        return this;
      }
      public Builder ClearCells() {
        PrepareBuilder();
        result.cells_.Clear();
        return this;
      }
    }
    static Sheet() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ParsingParameter : pb::GeneratedMessage<ParsingParameter, ParsingParameter.Builder> {
    private ParsingParameter() { }
    private static readonly ParsingParameter defaultInstance = new ParsingParameter().MakeReadOnly();
    private static readonly string[] _parsingParameterFieldNames = new string[] { "useBorderAsStructure", "useColorAsStructure", "useFontAsStructure", "useTextAsLegend" };
    private static readonly uint[] _parsingParameterFieldTags = new uint[] { 24, 16, 32, 8 };
    public static ParsingParameter DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ParsingParameter DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ParsingParameter ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ParsingParameter__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ParsingParameter, ParsingParameter.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ParsingParameter__FieldAccessorTable; }
    }
    
    public const int UseTextAsLegendFieldNumber = 1;
    private bool hasUseTextAsLegend;
    private bool useTextAsLegend_;
    public bool HasUseTextAsLegend {
      get { return hasUseTextAsLegend; }
    }
    public bool UseTextAsLegend {
      get { return useTextAsLegend_; }
    }
    
    public const int UseColorAsStructureFieldNumber = 2;
    private bool hasUseColorAsStructure;
    private bool useColorAsStructure_;
    public bool HasUseColorAsStructure {
      get { return hasUseColorAsStructure; }
    }
    public bool UseColorAsStructure {
      get { return useColorAsStructure_; }
    }
    
    public const int UseBorderAsStructureFieldNumber = 3;
    private bool hasUseBorderAsStructure;
    private bool useBorderAsStructure_;
    public bool HasUseBorderAsStructure {
      get { return hasUseBorderAsStructure; }
    }
    public bool UseBorderAsStructure {
      get { return useBorderAsStructure_; }
    }
    
    public const int UseFontAsStructureFieldNumber = 4;
    private bool hasUseFontAsStructure;
    private bool useFontAsStructure_;
    public bool HasUseFontAsStructure {
      get { return hasUseFontAsStructure; }
    }
    public bool UseFontAsStructure {
      get { return useFontAsStructure_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUseTextAsLegend) return false;
        if (!hasUseColorAsStructure) return false;
        if (!hasUseBorderAsStructure) return false;
        if (!hasUseFontAsStructure) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _parsingParameterFieldNames;
      if (hasUseTextAsLegend) {
        output.WriteBool(1, field_names[3], UseTextAsLegend);
      }
      if (hasUseColorAsStructure) {
        output.WriteBool(2, field_names[1], UseColorAsStructure);
      }
      if (hasUseBorderAsStructure) {
        output.WriteBool(3, field_names[0], UseBorderAsStructure);
      }
      if (hasUseFontAsStructure) {
        output.WriteBool(4, field_names[2], UseFontAsStructure);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUseTextAsLegend) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, UseTextAsLegend);
        }
        if (hasUseColorAsStructure) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, UseColorAsStructure);
        }
        if (hasUseBorderAsStructure) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, UseBorderAsStructure);
        }
        if (hasUseFontAsStructure) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, UseFontAsStructure);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ParsingParameter ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ParsingParameter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ParsingParameter ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ParsingParameter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ParsingParameter ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ParsingParameter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ParsingParameter ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ParsingParameter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ParsingParameter ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ParsingParameter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ParsingParameter MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ParsingParameter prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ParsingParameter, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ParsingParameter cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ParsingParameter result;
      
      private ParsingParameter PrepareBuilder() {
        if (resultIsReadOnly) {
          ParsingParameter original = result;
          result = new ParsingParameter();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ParsingParameter MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ParsingParameter.Descriptor; }
      }
      
      public override ParsingParameter DefaultInstanceForType {
        get { return global::sally.ParsingParameter.DefaultInstance; }
      }
      
      public override ParsingParameter BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ParsingParameter) {
          return MergeFrom((ParsingParameter) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ParsingParameter other) {
        if (other == global::sally.ParsingParameter.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUseTextAsLegend) {
          UseTextAsLegend = other.UseTextAsLegend;
        }
        if (other.HasUseColorAsStructure) {
          UseColorAsStructure = other.UseColorAsStructure;
        }
        if (other.HasUseBorderAsStructure) {
          UseBorderAsStructure = other.UseBorderAsStructure;
        }
        if (other.HasUseFontAsStructure) {
          UseFontAsStructure = other.UseFontAsStructure;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_parsingParameterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _parsingParameterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUseTextAsLegend = input.ReadBool(ref result.useTextAsLegend_);
              break;
            }
            case 16: {
              result.hasUseColorAsStructure = input.ReadBool(ref result.useColorAsStructure_);
              break;
            }
            case 24: {
              result.hasUseBorderAsStructure = input.ReadBool(ref result.useBorderAsStructure_);
              break;
            }
            case 32: {
              result.hasUseFontAsStructure = input.ReadBool(ref result.useFontAsStructure_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUseTextAsLegend {
        get { return result.hasUseTextAsLegend; }
      }
      public bool UseTextAsLegend {
        get { return result.UseTextAsLegend; }
        set { SetUseTextAsLegend(value); }
      }
      public Builder SetUseTextAsLegend(bool value) {
        PrepareBuilder();
        result.hasUseTextAsLegend = true;
        result.useTextAsLegend_ = value;
        return this;
      }
      public Builder ClearUseTextAsLegend() {
        PrepareBuilder();
        result.hasUseTextAsLegend = false;
        result.useTextAsLegend_ = false;
        return this;
      }
      
      public bool HasUseColorAsStructure {
        get { return result.hasUseColorAsStructure; }
      }
      public bool UseColorAsStructure {
        get { return result.UseColorAsStructure; }
        set { SetUseColorAsStructure(value); }
      }
      public Builder SetUseColorAsStructure(bool value) {
        PrepareBuilder();
        result.hasUseColorAsStructure = true;
        result.useColorAsStructure_ = value;
        return this;
      }
      public Builder ClearUseColorAsStructure() {
        PrepareBuilder();
        result.hasUseColorAsStructure = false;
        result.useColorAsStructure_ = false;
        return this;
      }
      
      public bool HasUseBorderAsStructure {
        get { return result.hasUseBorderAsStructure; }
      }
      public bool UseBorderAsStructure {
        get { return result.UseBorderAsStructure; }
        set { SetUseBorderAsStructure(value); }
      }
      public Builder SetUseBorderAsStructure(bool value) {
        PrepareBuilder();
        result.hasUseBorderAsStructure = true;
        result.useBorderAsStructure_ = value;
        return this;
      }
      public Builder ClearUseBorderAsStructure() {
        PrepareBuilder();
        result.hasUseBorderAsStructure = false;
        result.useBorderAsStructure_ = false;
        return this;
      }
      
      public bool HasUseFontAsStructure {
        get { return result.hasUseFontAsStructure; }
      }
      public bool UseFontAsStructure {
        get { return result.UseFontAsStructure; }
        set { SetUseFontAsStructure(value); }
      }
      public Builder SetUseFontAsStructure(bool value) {
        PrepareBuilder();
        result.hasUseFontAsStructure = true;
        result.useFontAsStructure_ = value;
        return this;
      }
      public Builder ClearUseFontAsStructure() {
        PrepareBuilder();
        result.hasUseFontAsStructure = false;
        result.useFontAsStructure_ = false;
        return this;
      }
    }
    static ParsingParameter() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Data : pb::GeneratedMessage<Data, Data.Builder> {
    private Data() { }
    private static readonly Data defaultInstance = new Data().MakeReadOnly();
    private static readonly string[] _dataFieldNames = new string[] { "fileName", "parameter", "sheets" };
    private static readonly uint[] _dataFieldTags = new uint[] { 18, 26, 10 };
    public static Data DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Data DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Data ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_Data__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Data, Data.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_Data__FieldAccessorTable; }
    }
    
    public const int SheetsFieldNumber = 1;
    private pbc::PopsicleList<global::sally.Sheet> sheets_ = new pbc::PopsicleList<global::sally.Sheet>();
    public scg::IList<global::sally.Sheet> SheetsList {
      get { return sheets_; }
    }
    public int SheetsCount {
      get { return sheets_.Count; }
    }
    public global::sally.Sheet GetSheets(int index) {
      return sheets_[index];
    }
    
    public const int FileNameFieldNumber = 2;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int ParameterFieldNumber = 3;
    private bool hasParameter;
    private global::sally.ParsingParameter parameter_;
    public bool HasParameter {
      get { return hasParameter; }
    }
    public global::sally.ParsingParameter Parameter {
      get { return parameter_ ?? global::sally.ParsingParameter.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileName) return false;
        if (!hasParameter) return false;
        foreach (global::sally.Sheet element in SheetsList) {
          if (!element.IsInitialized) return false;
        }
        if (!Parameter.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataFieldNames;
      if (sheets_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], sheets_);
      }
      if (hasFileName) {
        output.WriteString(2, field_names[0], FileName);
      }
      if (hasParameter) {
        output.WriteMessage(3, field_names[1], Parameter);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.Sheet element in SheetsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FileName);
        }
        if (hasParameter) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Parameter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Data ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Data ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Data ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Data ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Data ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Data ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Data ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Data MakeReadOnly() {
      sheets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Data prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Data, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Data cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Data result;
      
      private Data PrepareBuilder() {
        if (resultIsReadOnly) {
          Data original = result;
          result = new Data();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Data MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.Data.Descriptor; }
      }
      
      public override Data DefaultInstanceForType {
        get { return global::sally.Data.DefaultInstance; }
      }
      
      public override Data BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Data) {
          return MergeFrom((Data) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Data other) {
        if (other == global::sally.Data.DefaultInstance) return this;
        PrepareBuilder();
        if (other.sheets_.Count != 0) {
          result.sheets_.Add(other.sheets_);
        }
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasParameter) {
          MergeParameter(other.Parameter);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.sheets_, global::sally.Sheet.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 26: {
              global::sally.ParsingParameter.Builder subBuilder = global::sally.ParsingParameter.CreateBuilder();
              if (result.hasParameter) {
                subBuilder.MergeFrom(Parameter);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Parameter = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.Sheet> SheetsList {
        get { return PrepareBuilder().sheets_; }
      }
      public int SheetsCount {
        get { return result.SheetsCount; }
      }
      public global::sally.Sheet GetSheets(int index) {
        return result.GetSheets(index);
      }
      public Builder SetSheets(int index, global::sally.Sheet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sheets_[index] = value;
        return this;
      }
      public Builder SetSheets(int index, global::sally.Sheet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sheets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSheets(global::sally.Sheet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sheets_.Add(value);
        return this;
      }
      public Builder AddSheets(global::sally.Sheet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sheets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSheets(scg::IEnumerable<global::sally.Sheet> values) {
        PrepareBuilder();
        result.sheets_.Add(values);
        return this;
      }
      public Builder ClearSheets() {
        PrepareBuilder();
        result.sheets_.Clear();
        return this;
      }
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public bool HasParameter {
       get { return result.hasParameter; }
      }
      public global::sally.ParsingParameter Parameter {
        get { return result.Parameter; }
        set { SetParameter(value); }
      }
      public Builder SetParameter(global::sally.ParsingParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParameter = true;
        result.parameter_ = value;
        return this;
      }
      public Builder SetParameter(global::sally.ParsingParameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasParameter = true;
        result.parameter_ = builderForValue.Build();
        return this;
      }
      public Builder MergeParameter(global::sally.ParsingParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasParameter &&
            result.parameter_ != global::sally.ParsingParameter.DefaultInstance) {
            result.parameter_ = global::sally.ParsingParameter.CreateBuilder(result.parameter_).MergeFrom(value).BuildPartial();
        } else {
          result.parameter_ = value;
        }
        result.hasParameter = true;
        return this;
      }
      public Builder ClearParameter() {
        PrepareBuilder();
        result.hasParameter = false;
        result.parameter_ = null;
        return this;
      }
    }
    static Data() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FBCreateData : pb::GeneratedMessage<FBCreateData, FBCreateData.Builder> {
    private FBCreateData() { }
    private static readonly FBCreateData defaultInstance = new FBCreateData().MakeReadOnly();
    private static readonly string[] _fBCreateDataFieldNames = new string[] { "connectToAll", "legends", "parameter", "range" };
    private static readonly uint[] _fBCreateDataFieldTags = new uint[] { 32, 16, 24, 10 };
    public static FBCreateData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FBCreateData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FBCreateData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FBCreateData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FBCreateData, FBCreateData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FBCreateData__FieldAccessorTable; }
    }
    
    public const int RangeFieldNumber = 1;
    private bool hasRange;
    private global::sally.RangeData range_;
    public bool HasRange {
      get { return hasRange; }
    }
    public global::sally.RangeData Range {
      get { return range_ ?? global::sally.RangeData.DefaultInstance; }
    }
    
    public const int LegendsFieldNumber = 2;
    private pbc::PopsicleList<int> legends_ = new pbc::PopsicleList<int>();
    public scg::IList<int> LegendsList {
      get { return pbc::Lists.AsReadOnly(legends_); }
    }
    public int LegendsCount {
      get { return legends_.Count; }
    }
    public int GetLegends(int index) {
      return legends_[index];
    }
    
    public const int ParameterFieldNumber = 3;
    private bool hasParameter;
    private global::sally.DataParameter parameter_ = global::sally.DataParameter.AllDiff;
    public bool HasParameter {
      get { return hasParameter; }
    }
    public global::sally.DataParameter Parameter {
      get { return parameter_; }
    }
    
    public const int ConnectToAllFieldNumber = 4;
    private pbc::PopsicleList<int> connectToAll_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ConnectToAllList {
      get { return pbc::Lists.AsReadOnly(connectToAll_); }
    }
    public int ConnectToAllCount {
      get { return connectToAll_.Count; }
    }
    public int GetConnectToAll(int index) {
      return connectToAll_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRange) return false;
        if (!Range.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fBCreateDataFieldNames;
      if (hasRange) {
        output.WriteMessage(1, field_names[3], Range);
      }
      if (legends_.Count > 0) {
        output.WriteInt32Array(2, field_names[1], legends_);
      }
      if (hasParameter) {
        output.WriteEnum(3, field_names[2], (int) Parameter, Parameter);
      }
      if (connectToAll_.Count > 0) {
        output.WriteInt32Array(4, field_names[0], connectToAll_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRange) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Range);
        }
        {
          int dataSize = 0;
          foreach (int element in LegendsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * legends_.Count;
        }
        if (hasParameter) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Parameter);
        }
        {
          int dataSize = 0;
          foreach (int element in ConnectToAllList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * connectToAll_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FBCreateData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FBCreateData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FBCreateData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FBCreateData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FBCreateData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FBCreateData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FBCreateData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FBCreateData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FBCreateData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FBCreateData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FBCreateData MakeReadOnly() {
      legends_.MakeReadOnly();
      connectToAll_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FBCreateData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FBCreateData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FBCreateData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FBCreateData result;
      
      private FBCreateData PrepareBuilder() {
        if (resultIsReadOnly) {
          FBCreateData original = result;
          result = new FBCreateData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FBCreateData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FBCreateData.Descriptor; }
      }
      
      public override FBCreateData DefaultInstanceForType {
        get { return global::sally.FBCreateData.DefaultInstance; }
      }
      
      public override FBCreateData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FBCreateData) {
          return MergeFrom((FBCreateData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FBCreateData other) {
        if (other == global::sally.FBCreateData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRange) {
          MergeRange(other.Range);
        }
        if (other.legends_.Count != 0) {
          result.legends_.Add(other.legends_);
        }
        if (other.HasParameter) {
          Parameter = other.Parameter;
        }
        if (other.connectToAll_.Count != 0) {
          result.connectToAll_.Add(other.connectToAll_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fBCreateDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fBCreateDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.RangeData.Builder subBuilder = global::sally.RangeData.CreateBuilder();
              if (result.hasRange) {
                subBuilder.MergeFrom(Range);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Range = subBuilder.BuildPartial();
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.legends_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.parameter_, out unknown)) {
                result.hasParameter = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.connectToAll_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRange {
       get { return result.hasRange; }
      }
      public global::sally.RangeData Range {
        get { return result.Range; }
        set { SetRange(value); }
      }
      public Builder SetRange(global::sally.RangeData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRange = true;
        result.range_ = value;
        return this;
      }
      public Builder SetRange(global::sally.RangeData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRange = true;
        result.range_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRange(global::sally.RangeData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRange &&
            result.range_ != global::sally.RangeData.DefaultInstance) {
            result.range_ = global::sally.RangeData.CreateBuilder(result.range_).MergeFrom(value).BuildPartial();
        } else {
          result.range_ = value;
        }
        result.hasRange = true;
        return this;
      }
      public Builder ClearRange() {
        PrepareBuilder();
        result.hasRange = false;
        result.range_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> LegendsList {
        get { return PrepareBuilder().legends_; }
      }
      public int LegendsCount {
        get { return result.LegendsCount; }
      }
      public int GetLegends(int index) {
        return result.GetLegends(index);
      }
      public Builder SetLegends(int index, int value) {
        PrepareBuilder();
        result.legends_[index] = value;
        return this;
      }
      public Builder AddLegends(int value) {
        PrepareBuilder();
        result.legends_.Add(value);
        return this;
      }
      public Builder AddRangeLegends(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.legends_.Add(values);
        return this;
      }
      public Builder ClearLegends() {
        PrepareBuilder();
        result.legends_.Clear();
        return this;
      }
      
      public bool HasParameter {
       get { return result.hasParameter; }
      }
      public global::sally.DataParameter Parameter {
        get { return result.Parameter; }
        set { SetParameter(value); }
      }
      public Builder SetParameter(global::sally.DataParameter value) {
        PrepareBuilder();
        result.hasParameter = true;
        result.parameter_ = value;
        return this;
      }
      public Builder ClearParameter() {
        PrepareBuilder();
        result.hasParameter = false;
        result.parameter_ = global::sally.DataParameter.AllDiff;
        return this;
      }
      
      public pbc::IPopsicleList<int> ConnectToAllList {
        get { return PrepareBuilder().connectToAll_; }
      }
      public int ConnectToAllCount {
        get { return result.ConnectToAllCount; }
      }
      public int GetConnectToAll(int index) {
        return result.GetConnectToAll(index);
      }
      public Builder SetConnectToAll(int index, int value) {
        PrepareBuilder();
        result.connectToAll_[index] = value;
        return this;
      }
      public Builder AddConnectToAll(int value) {
        PrepareBuilder();
        result.connectToAll_.Add(value);
        return this;
      }
      public Builder AddRangeConnectToAll(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.connectToAll_.Add(values);
        return this;
      }
      public Builder ClearConnectToAll() {
        PrepareBuilder();
        result.connectToAll_.Clear();
        return this;
      }
    }
    static FBCreateData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LegendCreateData : pb::GeneratedMessage<LegendCreateData, LegendCreateData.Builder> {
    private LegendCreateData() { }
    private static readonly LegendCreateData defaultInstance = new LegendCreateData().MakeReadOnly();
    private static readonly string[] _legendCreateDataFieldNames = new string[] { "fileName", "header", "items", "parameter" };
    private static readonly uint[] _legendCreateDataFieldTags = new uint[] { 26, 18, 10, 32 };
    public static LegendCreateData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LegendCreateData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LegendCreateData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_LegendCreateData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LegendCreateData, LegendCreateData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_LegendCreateData__FieldAccessorTable; }
    }
    
    public const int ItemsFieldNumber = 1;
    private bool hasItems;
    private global::sally.RangeData items_;
    public bool HasItems {
      get { return hasItems; }
    }
    public global::sally.RangeData Items {
      get { return items_ ?? global::sally.RangeData.DefaultInstance; }
    }
    
    public const int HeaderFieldNumber = 2;
    private bool hasHeader;
    private global::sally.CellData header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::sally.CellData Header {
      get { return header_ ?? global::sally.CellData.DefaultInstance; }
    }
    
    public const int FileNameFieldNumber = 3;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int ParameterFieldNumber = 4;
    private bool hasParameter;
    private global::sally.DataParameter parameter_ = global::sally.DataParameter.AllDiff;
    public bool HasParameter {
      get { return hasParameter; }
    }
    public global::sally.DataParameter Parameter {
      get { return parameter_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItems) return false;
        if (!hasFileName) return false;
        if (!Items.IsInitialized) return false;
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _legendCreateDataFieldNames;
      if (hasItems) {
        output.WriteMessage(1, field_names[2], Items);
      }
      if (hasHeader) {
        output.WriteMessage(2, field_names[1], Header);
      }
      if (hasFileName) {
        output.WriteString(3, field_names[0], FileName);
      }
      if (hasParameter) {
        output.WriteEnum(4, field_names[3], (int) Parameter, Parameter);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Items);
        }
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Header);
        }
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, FileName);
        }
        if (hasParameter) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Parameter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LegendCreateData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendCreateData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendCreateData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendCreateData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendCreateData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendCreateData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LegendCreateData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LegendCreateData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LegendCreateData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendCreateData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LegendCreateData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LegendCreateData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LegendCreateData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LegendCreateData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LegendCreateData result;
      
      private LegendCreateData PrepareBuilder() {
        if (resultIsReadOnly) {
          LegendCreateData original = result;
          result = new LegendCreateData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LegendCreateData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.LegendCreateData.Descriptor; }
      }
      
      public override LegendCreateData DefaultInstanceForType {
        get { return global::sally.LegendCreateData.DefaultInstance; }
      }
      
      public override LegendCreateData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LegendCreateData) {
          return MergeFrom((LegendCreateData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LegendCreateData other) {
        if (other == global::sally.LegendCreateData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItems) {
          MergeItems(other.Items);
        }
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasParameter) {
          Parameter = other.Parameter;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_legendCreateDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _legendCreateDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.RangeData.Builder subBuilder = global::sally.RangeData.CreateBuilder();
              if (result.hasItems) {
                subBuilder.MergeFrom(Items);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Items = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::sally.CellData.Builder subBuilder = global::sally.CellData.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.parameter_, out unknown)) {
                result.hasParameter = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItems {
       get { return result.hasItems; }
      }
      public global::sally.RangeData Items {
        get { return result.Items; }
        set { SetItems(value); }
      }
      public Builder SetItems(global::sally.RangeData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = value;
        return this;
      }
      public Builder SetItems(global::sally.RangeData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItems(global::sally.RangeData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItems &&
            result.items_ != global::sally.RangeData.DefaultInstance) {
            result.items_ = global::sally.RangeData.CreateBuilder(result.items_).MergeFrom(value).BuildPartial();
        } else {
          result.items_ = value;
        }
        result.hasItems = true;
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.hasItems = false;
        result.items_ = null;
        return this;
      }
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::sally.CellData Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::sally.CellData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::sally.CellData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::sally.CellData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::sally.CellData.DefaultInstance) {
            result.header_ = global::sally.CellData.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public bool HasParameter {
       get { return result.hasParameter; }
      }
      public global::sally.DataParameter Parameter {
        get { return result.Parameter; }
        set { SetParameter(value); }
      }
      public Builder SetParameter(global::sally.DataParameter value) {
        PrepareBuilder();
        result.hasParameter = true;
        result.parameter_ = value;
        return this;
      }
      public Builder ClearParameter() {
        PrepareBuilder();
        result.hasParameter = false;
        result.parameter_ = global::sally.DataParameter.AllDiff;
        return this;
      }
    }
    static LegendCreateData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AbstractElementMsg : pb::GeneratedMessage<AbstractElementMsg, AbstractElementMsg.Builder> {
    private AbstractElementMsg() { }
    private static readonly AbstractElementMsg defaultInstance = new AbstractElementMsg().MakeReadOnly();
    private static readonly string[] _abstractElementMsgFieldNames = new string[] { "formula", "id", "parameters", "value" };
    private static readonly uint[] _abstractElementMsgFieldTags = new uint[] { 26, 8, 32, 18 };
    public static AbstractElementMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AbstractElementMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AbstractElementMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_AbstractElementMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AbstractElementMsg, AbstractElementMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_AbstractElementMsg__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public const int FormulaFieldNumber = 3;
    private bool hasFormula;
    private string formula_ = "";
    public bool HasFormula {
      get { return hasFormula; }
    }
    public string Formula {
      get { return formula_; }
    }
    
    public const int ParametersFieldNumber = 4;
    private pbc::PopsicleList<int> parameters_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ParametersList {
      get { return pbc::Lists.AsReadOnly(parameters_); }
    }
    public int ParametersCount {
      get { return parameters_.Count; }
    }
    public int GetParameters(int index) {
      return parameters_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _abstractElementMsgFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasValue) {
        output.WriteString(2, field_names[3], Value);
      }
      if (hasFormula) {
        output.WriteString(3, field_names[0], Formula);
      }
      if (parameters_.Count > 0) {
        output.WriteInt32Array(4, field_names[2], parameters_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        if (hasFormula) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Formula);
        }
        {
          int dataSize = 0;
          foreach (int element in ParametersList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * parameters_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AbstractElementMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AbstractElementMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AbstractElementMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AbstractElementMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AbstractElementMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AbstractElementMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AbstractElementMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AbstractElementMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AbstractElementMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AbstractElementMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AbstractElementMsg MakeReadOnly() {
      parameters_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AbstractElementMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AbstractElementMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AbstractElementMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AbstractElementMsg result;
      
      private AbstractElementMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          AbstractElementMsg original = result;
          result = new AbstractElementMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AbstractElementMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.AbstractElementMsg.Descriptor; }
      }
      
      public override AbstractElementMsg DefaultInstanceForType {
        get { return global::sally.AbstractElementMsg.DefaultInstance; }
      }
      
      public override AbstractElementMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AbstractElementMsg) {
          return MergeFrom((AbstractElementMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AbstractElementMsg other) {
        if (other == global::sally.AbstractElementMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasFormula) {
          Formula = other.Formula;
        }
        if (other.parameters_.Count != 0) {
          result.parameters_.Add(other.parameters_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_abstractElementMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _abstractElementMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
            case 26: {
              result.hasFormula = input.ReadString(ref result.formula_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.parameters_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
      
      public bool HasFormula {
        get { return result.hasFormula; }
      }
      public string Formula {
        get { return result.Formula; }
        set { SetFormula(value); }
      }
      public Builder SetFormula(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFormula = true;
        result.formula_ = value;
        return this;
      }
      public Builder ClearFormula() {
        PrepareBuilder();
        result.hasFormula = false;
        result.formula_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<int> ParametersList {
        get { return PrepareBuilder().parameters_; }
      }
      public int ParametersCount {
        get { return result.ParametersCount; }
      }
      public int GetParameters(int index) {
        return result.GetParameters(index);
      }
      public Builder SetParameters(int index, int value) {
        PrepareBuilder();
        result.parameters_[index] = value;
        return this;
      }
      public Builder AddParameters(int value) {
        PrepareBuilder();
        result.parameters_.Add(value);
        return this;
      }
      public Builder AddRangeParameters(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.parameters_.Add(values);
        return this;
      }
      public Builder ClearParameters() {
        PrepareBuilder();
        result.parameters_.Clear();
        return this;
      }
    }
    static AbstractElementMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AbstractDataModelMsg : pb::GeneratedMessage<AbstractDataModelMsg, AbstractDataModelMsg.Builder> {
    private AbstractDataModelMsg() { }
    private static readonly AbstractDataModelMsg defaultInstance = new AbstractDataModelMsg().MakeReadOnly();
    private static readonly string[] _abstractDataModelMsgFieldNames = new string[] { "elements" };
    private static readonly uint[] _abstractDataModelMsgFieldTags = new uint[] { 10 };
    public static AbstractDataModelMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AbstractDataModelMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AbstractDataModelMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_AbstractDataModelMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AbstractDataModelMsg, AbstractDataModelMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_AbstractDataModelMsg__FieldAccessorTable; }
    }
    
    public const int ElementsFieldNumber = 1;
    private pbc::PopsicleList<global::sally.AbstractElementMsg> elements_ = new pbc::PopsicleList<global::sally.AbstractElementMsg>();
    public scg::IList<global::sally.AbstractElementMsg> ElementsList {
      get { return elements_; }
    }
    public int ElementsCount {
      get { return elements_.Count; }
    }
    public global::sally.AbstractElementMsg GetElements(int index) {
      return elements_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::sally.AbstractElementMsg element in ElementsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _abstractDataModelMsgFieldNames;
      if (elements_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], elements_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.AbstractElementMsg element in ElementsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AbstractDataModelMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AbstractDataModelMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AbstractDataModelMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AbstractDataModelMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AbstractDataModelMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AbstractDataModelMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AbstractDataModelMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AbstractDataModelMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AbstractDataModelMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AbstractDataModelMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AbstractDataModelMsg MakeReadOnly() {
      elements_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AbstractDataModelMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AbstractDataModelMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AbstractDataModelMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AbstractDataModelMsg result;
      
      private AbstractDataModelMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          AbstractDataModelMsg original = result;
          result = new AbstractDataModelMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AbstractDataModelMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.AbstractDataModelMsg.Descriptor; }
      }
      
      public override AbstractDataModelMsg DefaultInstanceForType {
        get { return global::sally.AbstractDataModelMsg.DefaultInstance; }
      }
      
      public override AbstractDataModelMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AbstractDataModelMsg) {
          return MergeFrom((AbstractDataModelMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AbstractDataModelMsg other) {
        if (other == global::sally.AbstractDataModelMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.elements_.Count != 0) {
          result.elements_.Add(other.elements_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_abstractDataModelMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _abstractDataModelMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.elements_, global::sally.AbstractElementMsg.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.AbstractElementMsg> ElementsList {
        get { return PrepareBuilder().elements_; }
      }
      public int ElementsCount {
        get { return result.ElementsCount; }
      }
      public global::sally.AbstractElementMsg GetElements(int index) {
        return result.GetElements(index);
      }
      public Builder SetElements(int index, global::sally.AbstractElementMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.elements_[index] = value;
        return this;
      }
      public Builder SetElements(int index, global::sally.AbstractElementMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.elements_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddElements(global::sally.AbstractElementMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.elements_.Add(value);
        return this;
      }
      public Builder AddElements(global::sally.AbstractElementMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.elements_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeElements(scg::IEnumerable<global::sally.AbstractElementMsg> values) {
        PrepareBuilder();
        result.elements_.Add(values);
        return this;
      }
      public Builder ClearElements() {
        PrepareBuilder();
        result.elements_.Clear();
        return this;
      }
    }
    static AbstractDataModelMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LegendMsg : pb::GeneratedMessage<LegendMsg, LegendMsg.Builder> {
    private LegendMsg() { }
    private static readonly LegendMsg defaultInstance = new LegendMsg().MakeReadOnly();
    private static readonly string[] _legendMsgFieldNames = new string[] { "header", "id", "items" };
    private static readonly uint[] _legendMsgFieldTags = new uint[] { 24, 8, 16 };
    public static LegendMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LegendMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LegendMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_LegendMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LegendMsg, LegendMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_LegendMsg__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int ItemsFieldNumber = 2;
    private pbc::PopsicleList<int> items_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ItemsList {
      get { return pbc::Lists.AsReadOnly(items_); }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public int GetItems(int index) {
      return items_[index];
    }
    
    public const int HeaderFieldNumber = 3;
    private bool hasHeader;
    private int header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public int Header {
      get { return header_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _legendMsgFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (items_.Count > 0) {
        output.WriteInt32Array(2, field_names[2], items_);
      }
      if (hasHeader) {
        output.WriteInt32(3, field_names[0], Header);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        {
          int dataSize = 0;
          foreach (int element in ItemsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * items_.Count;
        }
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Header);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LegendMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LegendMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LegendMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LegendMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LegendMsg MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LegendMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LegendMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LegendMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LegendMsg result;
      
      private LegendMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          LegendMsg original = result;
          result = new LegendMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LegendMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.LegendMsg.Descriptor; }
      }
      
      public override LegendMsg DefaultInstanceForType {
        get { return global::sally.LegendMsg.DefaultInstance; }
      }
      
      public override LegendMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LegendMsg) {
          return MergeFrom((LegendMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LegendMsg other) {
        if (other == global::sally.LegendMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasHeader) {
          Header = other.Header;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_legendMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _legendMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.items_);
              break;
            }
            case 24: {
              result.hasHeader = input.ReadInt32(ref result.header_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public int GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, int value) {
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder AddItems(int value) {
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasHeader {
        get { return result.hasHeader; }
      }
      public int Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(int value) {
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = 0;
        return this;
      }
    }
    static LegendMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LegendProductEntryMsg : pb::GeneratedMessage<LegendProductEntryMsg, LegendProductEntryMsg.Builder> {
    private LegendProductEntryMsg() { }
    private static readonly LegendProductEntryMsg defaultInstance = new LegendProductEntryMsg().MakeReadOnly();
    private static readonly string[] _legendProductEntryMsgFieldNames = new string[] { "elements", "legends" };
    private static readonly uint[] _legendProductEntryMsgFieldTags = new uint[] { 16, 8 };
    public static LegendProductEntryMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LegendProductEntryMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LegendProductEntryMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_LegendProductEntryMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LegendProductEntryMsg, LegendProductEntryMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_LegendProductEntryMsg__FieldAccessorTable; }
    }
    
    public const int LegendsFieldNumber = 1;
    private pbc::PopsicleList<int> legends_ = new pbc::PopsicleList<int>();
    public scg::IList<int> LegendsList {
      get { return pbc::Lists.AsReadOnly(legends_); }
    }
    public int LegendsCount {
      get { return legends_.Count; }
    }
    public int GetLegends(int index) {
      return legends_[index];
    }
    
    public const int ElementsFieldNumber = 2;
    private pbc::PopsicleList<int> elements_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ElementsList {
      get { return pbc::Lists.AsReadOnly(elements_); }
    }
    public int ElementsCount {
      get { return elements_.Count; }
    }
    public int GetElements(int index) {
      return elements_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _legendProductEntryMsgFieldNames;
      if (legends_.Count > 0) {
        output.WriteInt32Array(1, field_names[1], legends_);
      }
      if (elements_.Count > 0) {
        output.WriteInt32Array(2, field_names[0], elements_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (int element in LegendsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * legends_.Count;
        }
        {
          int dataSize = 0;
          foreach (int element in ElementsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * elements_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LegendProductEntryMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendProductEntryMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendProductEntryMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendProductEntryMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendProductEntryMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendProductEntryMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LegendProductEntryMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LegendProductEntryMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LegendProductEntryMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendProductEntryMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LegendProductEntryMsg MakeReadOnly() {
      legends_.MakeReadOnly();
      elements_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LegendProductEntryMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LegendProductEntryMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LegendProductEntryMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LegendProductEntryMsg result;
      
      private LegendProductEntryMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          LegendProductEntryMsg original = result;
          result = new LegendProductEntryMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LegendProductEntryMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.LegendProductEntryMsg.Descriptor; }
      }
      
      public override LegendProductEntryMsg DefaultInstanceForType {
        get { return global::sally.LegendProductEntryMsg.DefaultInstance; }
      }
      
      public override LegendProductEntryMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LegendProductEntryMsg) {
          return MergeFrom((LegendProductEntryMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LegendProductEntryMsg other) {
        if (other == global::sally.LegendProductEntryMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.legends_.Count != 0) {
          result.legends_.Add(other.legends_);
        }
        if (other.elements_.Count != 0) {
          result.elements_.Add(other.elements_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_legendProductEntryMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _legendProductEntryMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadInt32Array(tag, field_name, result.legends_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.elements_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> LegendsList {
        get { return PrepareBuilder().legends_; }
      }
      public int LegendsCount {
        get { return result.LegendsCount; }
      }
      public int GetLegends(int index) {
        return result.GetLegends(index);
      }
      public Builder SetLegends(int index, int value) {
        PrepareBuilder();
        result.legends_[index] = value;
        return this;
      }
      public Builder AddLegends(int value) {
        PrepareBuilder();
        result.legends_.Add(value);
        return this;
      }
      public Builder AddRangeLegends(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.legends_.Add(values);
        return this;
      }
      public Builder ClearLegends() {
        PrepareBuilder();
        result.legends_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> ElementsList {
        get { return PrepareBuilder().elements_; }
      }
      public int ElementsCount {
        get { return result.ElementsCount; }
      }
      public int GetElements(int index) {
        return result.GetElements(index);
      }
      public Builder SetElements(int index, int value) {
        PrepareBuilder();
        result.elements_[index] = value;
        return this;
      }
      public Builder AddElements(int value) {
        PrepareBuilder();
        result.elements_.Add(value);
        return this;
      }
      public Builder AddRangeElements(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.elements_.Add(values);
        return this;
      }
      public Builder ClearElements() {
        PrepareBuilder();
        result.elements_.Clear();
        return this;
      }
    }
    static LegendProductEntryMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LegendProductMsg : pb::GeneratedMessage<LegendProductMsg, LegendProductMsg.Builder> {
    private LegendProductMsg() { }
    private static readonly LegendProductMsg defaultInstance = new LegendProductMsg().MakeReadOnly();
    private static readonly string[] _legendProductMsgFieldNames = new string[] { "entries", "legends" };
    private static readonly uint[] _legendProductMsgFieldTags = new uint[] { 18, 8 };
    public static LegendProductMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LegendProductMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LegendProductMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_LegendProductMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LegendProductMsg, LegendProductMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_LegendProductMsg__FieldAccessorTable; }
    }
    
    public const int LegendsFieldNumber = 1;
    private pbc::PopsicleList<int> legends_ = new pbc::PopsicleList<int>();
    public scg::IList<int> LegendsList {
      get { return pbc::Lists.AsReadOnly(legends_); }
    }
    public int LegendsCount {
      get { return legends_.Count; }
    }
    public int GetLegends(int index) {
      return legends_[index];
    }
    
    public const int EntriesFieldNumber = 2;
    private pbc::PopsicleList<global::sally.LegendProductEntryMsg> entries_ = new pbc::PopsicleList<global::sally.LegendProductEntryMsg>();
    public scg::IList<global::sally.LegendProductEntryMsg> EntriesList {
      get { return entries_; }
    }
    public int EntriesCount {
      get { return entries_.Count; }
    }
    public global::sally.LegendProductEntryMsg GetEntries(int index) {
      return entries_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _legendProductMsgFieldNames;
      if (legends_.Count > 0) {
        output.WriteInt32Array(1, field_names[1], legends_);
      }
      if (entries_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], entries_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (int element in LegendsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * legends_.Count;
        }
        foreach (global::sally.LegendProductEntryMsg element in EntriesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LegendProductMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendProductMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendProductMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendProductMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendProductMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendProductMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LegendProductMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LegendProductMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LegendProductMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendProductMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LegendProductMsg MakeReadOnly() {
      legends_.MakeReadOnly();
      entries_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LegendProductMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LegendProductMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LegendProductMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LegendProductMsg result;
      
      private LegendProductMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          LegendProductMsg original = result;
          result = new LegendProductMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LegendProductMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.LegendProductMsg.Descriptor; }
      }
      
      public override LegendProductMsg DefaultInstanceForType {
        get { return global::sally.LegendProductMsg.DefaultInstance; }
      }
      
      public override LegendProductMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LegendProductMsg) {
          return MergeFrom((LegendProductMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LegendProductMsg other) {
        if (other == global::sally.LegendProductMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.legends_.Count != 0) {
          result.legends_.Add(other.legends_);
        }
        if (other.entries_.Count != 0) {
          result.entries_.Add(other.entries_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_legendProductMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _legendProductMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadInt32Array(tag, field_name, result.legends_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.entries_, global::sally.LegendProductEntryMsg.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> LegendsList {
        get { return PrepareBuilder().legends_; }
      }
      public int LegendsCount {
        get { return result.LegendsCount; }
      }
      public int GetLegends(int index) {
        return result.GetLegends(index);
      }
      public Builder SetLegends(int index, int value) {
        PrepareBuilder();
        result.legends_[index] = value;
        return this;
      }
      public Builder AddLegends(int value) {
        PrepareBuilder();
        result.legends_.Add(value);
        return this;
      }
      public Builder AddRangeLegends(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.legends_.Add(values);
        return this;
      }
      public Builder ClearLegends() {
        PrepareBuilder();
        result.legends_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.LegendProductEntryMsg> EntriesList {
        get { return PrepareBuilder().entries_; }
      }
      public int EntriesCount {
        get { return result.EntriesCount; }
      }
      public global::sally.LegendProductEntryMsg GetEntries(int index) {
        return result.GetEntries(index);
      }
      public Builder SetEntries(int index, global::sally.LegendProductEntryMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entries_[index] = value;
        return this;
      }
      public Builder SetEntries(int index, global::sally.LegendProductEntryMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entries_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntries(global::sally.LegendProductEntryMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entries_.Add(value);
        return this;
      }
      public Builder AddEntries(global::sally.LegendProductEntryMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entries_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntries(scg::IEnumerable<global::sally.LegendProductEntryMsg> values) {
        PrepareBuilder();
        result.entries_.Add(values);
        return this;
      }
      public Builder ClearEntries() {
        PrepareBuilder();
        result.entries_.Clear();
        return this;
      }
    }
    static LegendProductMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FBEntryMsg : pb::GeneratedMessage<FBEntryMsg, FBEntryMsg.Builder> {
    private FBEntryMsg() { }
    private static readonly FBEntryMsg defaultInstance = new FBEntryMsg().MakeReadOnly();
    private static readonly string[] _fBEntryMsgFieldNames = new string[] { "absElemId", "domainElem" };
    private static readonly uint[] _fBEntryMsgFieldTags = new uint[] { 16, 10 };
    public static FBEntryMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FBEntryMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FBEntryMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FBEntryMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FBEntryMsg, FBEntryMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FBEntryMsg__FieldAccessorTable; }
    }
    
    public const int DomainElemFieldNumber = 1;
    private bool hasDomainElem;
    private global::sally.LegendProductEntryMsg domainElem_;
    public bool HasDomainElem {
      get { return hasDomainElem; }
    }
    public global::sally.LegendProductEntryMsg DomainElem {
      get { return domainElem_ ?? global::sally.LegendProductEntryMsg.DefaultInstance; }
    }
    
    public const int AbsElemIdFieldNumber = 2;
    private bool hasAbsElemId;
    private int absElemId_;
    public bool HasAbsElemId {
      get { return hasAbsElemId; }
    }
    public int AbsElemId {
      get { return absElemId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDomainElem) return false;
        if (!hasAbsElemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fBEntryMsgFieldNames;
      if (hasDomainElem) {
        output.WriteMessage(1, field_names[1], DomainElem);
      }
      if (hasAbsElemId) {
        output.WriteInt32(2, field_names[0], AbsElemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDomainElem) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, DomainElem);
        }
        if (hasAbsElemId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, AbsElemId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FBEntryMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FBEntryMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FBEntryMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FBEntryMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FBEntryMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FBEntryMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FBEntryMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FBEntryMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FBEntryMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FBEntryMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FBEntryMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FBEntryMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FBEntryMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FBEntryMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FBEntryMsg result;
      
      private FBEntryMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          FBEntryMsg original = result;
          result = new FBEntryMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FBEntryMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FBEntryMsg.Descriptor; }
      }
      
      public override FBEntryMsg DefaultInstanceForType {
        get { return global::sally.FBEntryMsg.DefaultInstance; }
      }
      
      public override FBEntryMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FBEntryMsg) {
          return MergeFrom((FBEntryMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FBEntryMsg other) {
        if (other == global::sally.FBEntryMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDomainElem) {
          MergeDomainElem(other.DomainElem);
        }
        if (other.HasAbsElemId) {
          AbsElemId = other.AbsElemId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fBEntryMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fBEntryMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.LegendProductEntryMsg.Builder subBuilder = global::sally.LegendProductEntryMsg.CreateBuilder();
              if (result.hasDomainElem) {
                subBuilder.MergeFrom(DomainElem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DomainElem = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasAbsElemId = input.ReadInt32(ref result.absElemId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDomainElem {
       get { return result.hasDomainElem; }
      }
      public global::sally.LegendProductEntryMsg DomainElem {
        get { return result.DomainElem; }
        set { SetDomainElem(value); }
      }
      public Builder SetDomainElem(global::sally.LegendProductEntryMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDomainElem = true;
        result.domainElem_ = value;
        return this;
      }
      public Builder SetDomainElem(global::sally.LegendProductEntryMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDomainElem = true;
        result.domainElem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDomainElem(global::sally.LegendProductEntryMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDomainElem &&
            result.domainElem_ != global::sally.LegendProductEntryMsg.DefaultInstance) {
            result.domainElem_ = global::sally.LegendProductEntryMsg.CreateBuilder(result.domainElem_).MergeFrom(value).BuildPartial();
        } else {
          result.domainElem_ = value;
        }
        result.hasDomainElem = true;
        return this;
      }
      public Builder ClearDomainElem() {
        PrepareBuilder();
        result.hasDomainElem = false;
        result.domainElem_ = null;
        return this;
      }
      
      public bool HasAbsElemId {
        get { return result.hasAbsElemId; }
      }
      public int AbsElemId {
        get { return result.AbsElemId; }
        set { SetAbsElemId(value); }
      }
      public Builder SetAbsElemId(int value) {
        PrepareBuilder();
        result.hasAbsElemId = true;
        result.absElemId_ = value;
        return this;
      }
      public Builder ClearAbsElemId() {
        PrepareBuilder();
        result.hasAbsElemId = false;
        result.absElemId_ = 0;
        return this;
      }
    }
    static FBEntryMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FunctionalBlockMsg : pb::GeneratedMessage<FunctionalBlockMsg, FunctionalBlockMsg.Builder> {
    private FunctionalBlockMsg() { }
    private static readonly FunctionalBlockMsg defaultInstance = new FunctionalBlockMsg().MakeReadOnly();
    private static readonly string[] _functionalBlockMsgFieldNames = new string[] { "domain", "entry", "id" };
    private static readonly uint[] _functionalBlockMsgFieldTags = new uint[] { 18, 26, 8 };
    public static FunctionalBlockMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FunctionalBlockMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FunctionalBlockMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FunctionalBlockMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FunctionalBlockMsg, FunctionalBlockMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FunctionalBlockMsg__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int DomainFieldNumber = 2;
    private bool hasDomain;
    private global::sally.LegendProductMsg domain_;
    public bool HasDomain {
      get { return hasDomain; }
    }
    public global::sally.LegendProductMsg Domain {
      get { return domain_ ?? global::sally.LegendProductMsg.DefaultInstance; }
    }
    
    public const int EntryFieldNumber = 3;
    private pbc::PopsicleList<global::sally.FBEntryMsg> entry_ = new pbc::PopsicleList<global::sally.FBEntryMsg>();
    public scg::IList<global::sally.FBEntryMsg> EntryList {
      get { return entry_; }
    }
    public int EntryCount {
      get { return entry_.Count; }
    }
    public global::sally.FBEntryMsg GetEntry(int index) {
      return entry_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasDomain) return false;
        foreach (global::sally.FBEntryMsg element in EntryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _functionalBlockMsgFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[2], Id);
      }
      if (hasDomain) {
        output.WriteMessage(2, field_names[0], Domain);
      }
      if (entry_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], entry_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasDomain) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Domain);
        }
        foreach (global::sally.FBEntryMsg element in EntryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FunctionalBlockMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FunctionalBlockMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FunctionalBlockMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FunctionalBlockMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FunctionalBlockMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FunctionalBlockMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FunctionalBlockMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FunctionalBlockMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FunctionalBlockMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FunctionalBlockMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FunctionalBlockMsg MakeReadOnly() {
      entry_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FunctionalBlockMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FunctionalBlockMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FunctionalBlockMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FunctionalBlockMsg result;
      
      private FunctionalBlockMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          FunctionalBlockMsg original = result;
          result = new FunctionalBlockMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FunctionalBlockMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FunctionalBlockMsg.Descriptor; }
      }
      
      public override FunctionalBlockMsg DefaultInstanceForType {
        get { return global::sally.FunctionalBlockMsg.DefaultInstance; }
      }
      
      public override FunctionalBlockMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FunctionalBlockMsg) {
          return MergeFrom((FunctionalBlockMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FunctionalBlockMsg other) {
        if (other == global::sally.FunctionalBlockMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasDomain) {
          MergeDomain(other.Domain);
        }
        if (other.entry_.Count != 0) {
          result.entry_.Add(other.entry_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_functionalBlockMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _functionalBlockMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              global::sally.LegendProductMsg.Builder subBuilder = global::sally.LegendProductMsg.CreateBuilder();
              if (result.hasDomain) {
                subBuilder.MergeFrom(Domain);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Domain = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.entry_, global::sally.FBEntryMsg.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasDomain {
       get { return result.hasDomain; }
      }
      public global::sally.LegendProductMsg Domain {
        get { return result.Domain; }
        set { SetDomain(value); }
      }
      public Builder SetDomain(global::sally.LegendProductMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDomain = true;
        result.domain_ = value;
        return this;
      }
      public Builder SetDomain(global::sally.LegendProductMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDomain = true;
        result.domain_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDomain(global::sally.LegendProductMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDomain &&
            result.domain_ != global::sally.LegendProductMsg.DefaultInstance) {
            result.domain_ = global::sally.LegendProductMsg.CreateBuilder(result.domain_).MergeFrom(value).BuildPartial();
        } else {
          result.domain_ = value;
        }
        result.hasDomain = true;
        return this;
      }
      public Builder ClearDomain() {
        PrepareBuilder();
        result.hasDomain = false;
        result.domain_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.FBEntryMsg> EntryList {
        get { return PrepareBuilder().entry_; }
      }
      public int EntryCount {
        get { return result.EntryCount; }
      }
      public global::sally.FBEntryMsg GetEntry(int index) {
        return result.GetEntry(index);
      }
      public Builder SetEntry(int index, global::sally.FBEntryMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_[index] = value;
        return this;
      }
      public Builder SetEntry(int index, global::sally.FBEntryMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntry(global::sally.FBEntryMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_.Add(value);
        return this;
      }
      public Builder AddEntry(global::sally.FBEntryMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntry(scg::IEnumerable<global::sally.FBEntryMsg> values) {
        PrepareBuilder();
        result.entry_.Add(values);
        return this;
      }
      public Builder ClearEntry() {
        PrepareBuilder();
        result.entry_.Clear();
        return this;
      }
    }
    static FunctionalBlockMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AbstractSpreadsheetMsg : pb::GeneratedMessage<AbstractSpreadsheetMsg, AbstractSpreadsheetMsg.Builder> {
    private AbstractSpreadsheetMsg() { }
    private static readonly AbstractSpreadsheetMsg defaultInstance = new AbstractSpreadsheetMsg().MakeReadOnly();
    private static readonly string[] _abstractSpreadsheetMsgFieldNames = new string[] { "elements", "functionalBlocks", "legends" };
    private static readonly uint[] _abstractSpreadsheetMsgFieldTags = new uint[] { 10, 26, 18 };
    public static AbstractSpreadsheetMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AbstractSpreadsheetMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AbstractSpreadsheetMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_AbstractSpreadsheetMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AbstractSpreadsheetMsg, AbstractSpreadsheetMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_AbstractSpreadsheetMsg__FieldAccessorTable; }
    }
    
    public const int ElementsFieldNumber = 1;
    private bool hasElements;
    private global::sally.AbstractDataModelMsg elements_;
    public bool HasElements {
      get { return hasElements; }
    }
    public global::sally.AbstractDataModelMsg Elements {
      get { return elements_ ?? global::sally.AbstractDataModelMsg.DefaultInstance; }
    }
    
    public const int LegendsFieldNumber = 2;
    private pbc::PopsicleList<global::sally.LegendMsg> legends_ = new pbc::PopsicleList<global::sally.LegendMsg>();
    public scg::IList<global::sally.LegendMsg> LegendsList {
      get { return legends_; }
    }
    public int LegendsCount {
      get { return legends_.Count; }
    }
    public global::sally.LegendMsg GetLegends(int index) {
      return legends_[index];
    }
    
    public const int FunctionalBlocksFieldNumber = 3;
    private pbc::PopsicleList<global::sally.FunctionalBlockMsg> functionalBlocks_ = new pbc::PopsicleList<global::sally.FunctionalBlockMsg>();
    public scg::IList<global::sally.FunctionalBlockMsg> FunctionalBlocksList {
      get { return functionalBlocks_; }
    }
    public int FunctionalBlocksCount {
      get { return functionalBlocks_.Count; }
    }
    public global::sally.FunctionalBlockMsg GetFunctionalBlocks(int index) {
      return functionalBlocks_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasElements) return false;
        if (!Elements.IsInitialized) return false;
        foreach (global::sally.LegendMsg element in LegendsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::sally.FunctionalBlockMsg element in FunctionalBlocksList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _abstractSpreadsheetMsgFieldNames;
      if (hasElements) {
        output.WriteMessage(1, field_names[0], Elements);
      }
      if (legends_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], legends_);
      }
      if (functionalBlocks_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], functionalBlocks_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasElements) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Elements);
        }
        foreach (global::sally.LegendMsg element in LegendsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::sally.FunctionalBlockMsg element in FunctionalBlocksList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AbstractSpreadsheetMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AbstractSpreadsheetMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AbstractSpreadsheetMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AbstractSpreadsheetMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AbstractSpreadsheetMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AbstractSpreadsheetMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AbstractSpreadsheetMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AbstractSpreadsheetMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AbstractSpreadsheetMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AbstractSpreadsheetMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AbstractSpreadsheetMsg MakeReadOnly() {
      legends_.MakeReadOnly();
      functionalBlocks_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AbstractSpreadsheetMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AbstractSpreadsheetMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AbstractSpreadsheetMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AbstractSpreadsheetMsg result;
      
      private AbstractSpreadsheetMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          AbstractSpreadsheetMsg original = result;
          result = new AbstractSpreadsheetMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AbstractSpreadsheetMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.AbstractSpreadsheetMsg.Descriptor; }
      }
      
      public override AbstractSpreadsheetMsg DefaultInstanceForType {
        get { return global::sally.AbstractSpreadsheetMsg.DefaultInstance; }
      }
      
      public override AbstractSpreadsheetMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AbstractSpreadsheetMsg) {
          return MergeFrom((AbstractSpreadsheetMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AbstractSpreadsheetMsg other) {
        if (other == global::sally.AbstractSpreadsheetMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasElements) {
          MergeElements(other.Elements);
        }
        if (other.legends_.Count != 0) {
          result.legends_.Add(other.legends_);
        }
        if (other.functionalBlocks_.Count != 0) {
          result.functionalBlocks_.Add(other.functionalBlocks_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_abstractSpreadsheetMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _abstractSpreadsheetMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.AbstractDataModelMsg.Builder subBuilder = global::sally.AbstractDataModelMsg.CreateBuilder();
              if (result.hasElements) {
                subBuilder.MergeFrom(Elements);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Elements = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.legends_, global::sally.LegendMsg.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.functionalBlocks_, global::sally.FunctionalBlockMsg.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasElements {
       get { return result.hasElements; }
      }
      public global::sally.AbstractDataModelMsg Elements {
        get { return result.Elements; }
        set { SetElements(value); }
      }
      public Builder SetElements(global::sally.AbstractDataModelMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasElements = true;
        result.elements_ = value;
        return this;
      }
      public Builder SetElements(global::sally.AbstractDataModelMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasElements = true;
        result.elements_ = builderForValue.Build();
        return this;
      }
      public Builder MergeElements(global::sally.AbstractDataModelMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasElements &&
            result.elements_ != global::sally.AbstractDataModelMsg.DefaultInstance) {
            result.elements_ = global::sally.AbstractDataModelMsg.CreateBuilder(result.elements_).MergeFrom(value).BuildPartial();
        } else {
          result.elements_ = value;
        }
        result.hasElements = true;
        return this;
      }
      public Builder ClearElements() {
        PrepareBuilder();
        result.hasElements = false;
        result.elements_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.LegendMsg> LegendsList {
        get { return PrepareBuilder().legends_; }
      }
      public int LegendsCount {
        get { return result.LegendsCount; }
      }
      public global::sally.LegendMsg GetLegends(int index) {
        return result.GetLegends(index);
      }
      public Builder SetLegends(int index, global::sally.LegendMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.legends_[index] = value;
        return this;
      }
      public Builder SetLegends(int index, global::sally.LegendMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.legends_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLegends(global::sally.LegendMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.legends_.Add(value);
        return this;
      }
      public Builder AddLegends(global::sally.LegendMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.legends_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLegends(scg::IEnumerable<global::sally.LegendMsg> values) {
        PrepareBuilder();
        result.legends_.Add(values);
        return this;
      }
      public Builder ClearLegends() {
        PrepareBuilder();
        result.legends_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.FunctionalBlockMsg> FunctionalBlocksList {
        get { return PrepareBuilder().functionalBlocks_; }
      }
      public int FunctionalBlocksCount {
        get { return result.FunctionalBlocksCount; }
      }
      public global::sally.FunctionalBlockMsg GetFunctionalBlocks(int index) {
        return result.GetFunctionalBlocks(index);
      }
      public Builder SetFunctionalBlocks(int index, global::sally.FunctionalBlockMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.functionalBlocks_[index] = value;
        return this;
      }
      public Builder SetFunctionalBlocks(int index, global::sally.FunctionalBlockMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.functionalBlocks_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFunctionalBlocks(global::sally.FunctionalBlockMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.functionalBlocks_.Add(value);
        return this;
      }
      public Builder AddFunctionalBlocks(global::sally.FunctionalBlockMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.functionalBlocks_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFunctionalBlocks(scg::IEnumerable<global::sally.FunctionalBlockMsg> values) {
        PrepareBuilder();
        result.functionalBlocks_.Add(values);
        return this;
      }
      public Builder ClearFunctionalBlocks() {
        PrepareBuilder();
        result.functionalBlocks_.Clear();
        return this;
      }
    }
    static AbstractSpreadsheetMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CellSpaceInformationMsg : pb::GeneratedMessage<CellSpaceInformationMsg, CellSpaceInformationMsg.Builder> {
    private CellSpaceInformationMsg() { }
    private static readonly CellSpaceInformationMsg defaultInstance = new CellSpaceInformationMsg().MakeReadOnly();
    private static readonly string[] _cellSpaceInformationMsgFieldNames = new string[] { "column", "row", "worksheet" };
    private static readonly uint[] _cellSpaceInformationMsgFieldTags = new uint[] { 24, 16, 8 };
    public static CellSpaceInformationMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CellSpaceInformationMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CellSpaceInformationMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_CellSpaceInformationMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CellSpaceInformationMsg, CellSpaceInformationMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_CellSpaceInformationMsg__FieldAccessorTable; }
    }
    
    public const int WorksheetFieldNumber = 1;
    private bool hasWorksheet;
    private int worksheet_;
    public bool HasWorksheet {
      get { return hasWorksheet; }
    }
    public int Worksheet {
      get { return worksheet_; }
    }
    
    public const int RowFieldNumber = 2;
    private bool hasRow;
    private int row_;
    public bool HasRow {
      get { return hasRow; }
    }
    public int Row {
      get { return row_; }
    }
    
    public const int ColumnFieldNumber = 3;
    private bool hasColumn;
    private int column_;
    public bool HasColumn {
      get { return hasColumn; }
    }
    public int Column {
      get { return column_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorksheet) return false;
        if (!hasRow) return false;
        if (!hasColumn) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cellSpaceInformationMsgFieldNames;
      if (hasWorksheet) {
        output.WriteInt32(1, field_names[2], Worksheet);
      }
      if (hasRow) {
        output.WriteInt32(2, field_names[1], Row);
      }
      if (hasColumn) {
        output.WriteInt32(3, field_names[0], Column);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorksheet) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Worksheet);
        }
        if (hasRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Row);
        }
        if (hasColumn) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Column);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CellSpaceInformationMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellSpaceInformationMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellSpaceInformationMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CellSpaceInformationMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CellSpaceInformationMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellSpaceInformationMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CellSpaceInformationMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CellSpaceInformationMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CellSpaceInformationMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CellSpaceInformationMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CellSpaceInformationMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CellSpaceInformationMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CellSpaceInformationMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CellSpaceInformationMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CellSpaceInformationMsg result;
      
      private CellSpaceInformationMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          CellSpaceInformationMsg original = result;
          result = new CellSpaceInformationMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CellSpaceInformationMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.CellSpaceInformationMsg.Descriptor; }
      }
      
      public override CellSpaceInformationMsg DefaultInstanceForType {
        get { return global::sally.CellSpaceInformationMsg.DefaultInstance; }
      }
      
      public override CellSpaceInformationMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CellSpaceInformationMsg) {
          return MergeFrom((CellSpaceInformationMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CellSpaceInformationMsg other) {
        if (other == global::sally.CellSpaceInformationMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorksheet) {
          Worksheet = other.Worksheet;
        }
        if (other.HasRow) {
          Row = other.Row;
        }
        if (other.HasColumn) {
          Column = other.Column;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cellSpaceInformationMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cellSpaceInformationMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWorksheet = input.ReadInt32(ref result.worksheet_);
              break;
            }
            case 16: {
              result.hasRow = input.ReadInt32(ref result.row_);
              break;
            }
            case 24: {
              result.hasColumn = input.ReadInt32(ref result.column_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorksheet {
        get { return result.hasWorksheet; }
      }
      public int Worksheet {
        get { return result.Worksheet; }
        set { SetWorksheet(value); }
      }
      public Builder SetWorksheet(int value) {
        PrepareBuilder();
        result.hasWorksheet = true;
        result.worksheet_ = value;
        return this;
      }
      public Builder ClearWorksheet() {
        PrepareBuilder();
        result.hasWorksheet = false;
        result.worksheet_ = 0;
        return this;
      }
      
      public bool HasRow {
        get { return result.hasRow; }
      }
      public int Row {
        get { return result.Row; }
        set { SetRow(value); }
      }
      public Builder SetRow(int value) {
        PrepareBuilder();
        result.hasRow = true;
        result.row_ = value;
        return this;
      }
      public Builder ClearRow() {
        PrepareBuilder();
        result.hasRow = false;
        result.row_ = 0;
        return this;
      }
      
      public bool HasColumn {
        get { return result.hasColumn; }
      }
      public int Column {
        get { return result.Column; }
        set { SetColumn(value); }
      }
      public Builder SetColumn(int value) {
        PrepareBuilder();
        result.hasColumn = true;
        result.column_ = value;
        return this;
      }
      public Builder ClearColumn() {
        PrepareBuilder();
        result.hasColumn = false;
        result.column_ = 0;
        return this;
      }
    }
    static CellSpaceInformationMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ElementMappingMsg : pb::GeneratedMessage<ElementMappingMsg, ElementMappingMsg.Builder> {
    private ElementMappingMsg() { }
    private static readonly ElementMappingMsg defaultInstance = new ElementMappingMsg().MakeReadOnly();
    private static readonly string[] _elementMappingMsgFieldNames = new string[] { "absElemId", "position" };
    private static readonly uint[] _elementMappingMsgFieldTags = new uint[] { 16, 10 };
    public static ElementMappingMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ElementMappingMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ElementMappingMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ElementMappingMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ElementMappingMsg, ElementMappingMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ElementMappingMsg__FieldAccessorTable; }
    }
    
    public const int PositionFieldNumber = 1;
    private bool hasPosition;
    private global::sally.CellSpaceInformation position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::sally.CellSpaceInformation Position {
      get { return position_ ?? global::sally.CellSpaceInformation.DefaultInstance; }
    }
    
    public const int AbsElemIdFieldNumber = 2;
    private bool hasAbsElemId;
    private int absElemId_;
    public bool HasAbsElemId {
      get { return hasAbsElemId; }
    }
    public int AbsElemId {
      get { return absElemId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPosition) return false;
        if (!hasAbsElemId) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _elementMappingMsgFieldNames;
      if (hasPosition) {
        output.WriteMessage(1, field_names[1], Position);
      }
      if (hasAbsElemId) {
        output.WriteInt32(2, field_names[0], AbsElemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Position);
        }
        if (hasAbsElemId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, AbsElemId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ElementMappingMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ElementMappingMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ElementMappingMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ElementMappingMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ElementMappingMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ElementMappingMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ElementMappingMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ElementMappingMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ElementMappingMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ElementMappingMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ElementMappingMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ElementMappingMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ElementMappingMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ElementMappingMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ElementMappingMsg result;
      
      private ElementMappingMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          ElementMappingMsg original = result;
          result = new ElementMappingMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ElementMappingMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ElementMappingMsg.Descriptor; }
      }
      
      public override ElementMappingMsg DefaultInstanceForType {
        get { return global::sally.ElementMappingMsg.DefaultInstance; }
      }
      
      public override ElementMappingMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ElementMappingMsg) {
          return MergeFrom((ElementMappingMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ElementMappingMsg other) {
        if (other == global::sally.ElementMappingMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasAbsElemId) {
          AbsElemId = other.AbsElemId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_elementMappingMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _elementMappingMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.CellSpaceInformation.Builder subBuilder = global::sally.CellSpaceInformation.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasAbsElemId = input.ReadInt32(ref result.absElemId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::sally.CellSpaceInformation Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::sally.CellSpaceInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::sally.CellSpaceInformation.DefaultInstance) {
            result.position_ = global::sally.CellSpaceInformation.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasAbsElemId {
        get { return result.hasAbsElemId; }
      }
      public int AbsElemId {
        get { return result.AbsElemId; }
        set { SetAbsElemId(value); }
      }
      public Builder SetAbsElemId(int value) {
        PrepareBuilder();
        result.hasAbsElemId = true;
        result.absElemId_ = value;
        return this;
      }
      public Builder ClearAbsElemId() {
        PrepareBuilder();
        result.hasAbsElemId = false;
        result.absElemId_ = 0;
        return this;
      }
    }
    static ElementMappingMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LegendMappingMsg : pb::GeneratedMessage<LegendMappingMsg, LegendMappingMsg.Builder> {
    private LegendMappingMsg() { }
    private static readonly LegendMappingMsg defaultInstance = new LegendMappingMsg().MakeReadOnly();
    private static readonly string[] _legendMappingMsgFieldNames = new string[] { "elementPositions", "headerElementId", "headerPosition", "legendId" };
    private static readonly uint[] _legendMappingMsgFieldTags = new uint[] { 10, 24, 18, 32 };
    public static LegendMappingMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LegendMappingMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LegendMappingMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_LegendMappingMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LegendMappingMsg, LegendMappingMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_LegendMappingMsg__FieldAccessorTable; }
    }
    
    public const int ElementPositionsFieldNumber = 1;
    private pbc::PopsicleList<global::sally.ElementMappingMsg> elementPositions_ = new pbc::PopsicleList<global::sally.ElementMappingMsg>();
    public scg::IList<global::sally.ElementMappingMsg> ElementPositionsList {
      get { return elementPositions_; }
    }
    public int ElementPositionsCount {
      get { return elementPositions_.Count; }
    }
    public global::sally.ElementMappingMsg GetElementPositions(int index) {
      return elementPositions_[index];
    }
    
    public const int HeaderPositionFieldNumber = 2;
    private bool hasHeaderPosition;
    private global::sally.CellSpaceInformation headerPosition_;
    public bool HasHeaderPosition {
      get { return hasHeaderPosition; }
    }
    public global::sally.CellSpaceInformation HeaderPosition {
      get { return headerPosition_ ?? global::sally.CellSpaceInformation.DefaultInstance; }
    }
    
    public const int HeaderElementIdFieldNumber = 3;
    private bool hasHeaderElementId;
    private int headerElementId_;
    public bool HasHeaderElementId {
      get { return hasHeaderElementId; }
    }
    public int HeaderElementId {
      get { return headerElementId_; }
    }
    
    public const int LegendIdFieldNumber = 4;
    private bool hasLegendId;
    private int legendId_;
    public bool HasLegendId {
      get { return hasLegendId; }
    }
    public int LegendId {
      get { return legendId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLegendId) return false;
        foreach (global::sally.ElementMappingMsg element in ElementPositionsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasHeaderPosition) {
          if (!HeaderPosition.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _legendMappingMsgFieldNames;
      if (elementPositions_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], elementPositions_);
      }
      if (hasHeaderPosition) {
        output.WriteMessage(2, field_names[2], HeaderPosition);
      }
      if (hasHeaderElementId) {
        output.WriteInt32(3, field_names[1], HeaderElementId);
      }
      if (hasLegendId) {
        output.WriteInt32(4, field_names[3], LegendId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.ElementMappingMsg element in ElementPositionsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasHeaderPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeaderPosition);
        }
        if (hasHeaderElementId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, HeaderElementId);
        }
        if (hasLegendId) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, LegendId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LegendMappingMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendMappingMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendMappingMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendMappingMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendMappingMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendMappingMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LegendMappingMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LegendMappingMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LegendMappingMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendMappingMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LegendMappingMsg MakeReadOnly() {
      elementPositions_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LegendMappingMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LegendMappingMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LegendMappingMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LegendMappingMsg result;
      
      private LegendMappingMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          LegendMappingMsg original = result;
          result = new LegendMappingMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LegendMappingMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.LegendMappingMsg.Descriptor; }
      }
      
      public override LegendMappingMsg DefaultInstanceForType {
        get { return global::sally.LegendMappingMsg.DefaultInstance; }
      }
      
      public override LegendMappingMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LegendMappingMsg) {
          return MergeFrom((LegendMappingMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LegendMappingMsg other) {
        if (other == global::sally.LegendMappingMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.elementPositions_.Count != 0) {
          result.elementPositions_.Add(other.elementPositions_);
        }
        if (other.HasHeaderPosition) {
          MergeHeaderPosition(other.HeaderPosition);
        }
        if (other.HasHeaderElementId) {
          HeaderElementId = other.HeaderElementId;
        }
        if (other.HasLegendId) {
          LegendId = other.LegendId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_legendMappingMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _legendMappingMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.elementPositions_, global::sally.ElementMappingMsg.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              global::sally.CellSpaceInformation.Builder subBuilder = global::sally.CellSpaceInformation.CreateBuilder();
              if (result.hasHeaderPosition) {
                subBuilder.MergeFrom(HeaderPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeaderPosition = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasHeaderElementId = input.ReadInt32(ref result.headerElementId_);
              break;
            }
            case 32: {
              result.hasLegendId = input.ReadInt32(ref result.legendId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.ElementMappingMsg> ElementPositionsList {
        get { return PrepareBuilder().elementPositions_; }
      }
      public int ElementPositionsCount {
        get { return result.ElementPositionsCount; }
      }
      public global::sally.ElementMappingMsg GetElementPositions(int index) {
        return result.GetElementPositions(index);
      }
      public Builder SetElementPositions(int index, global::sally.ElementMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.elementPositions_[index] = value;
        return this;
      }
      public Builder SetElementPositions(int index, global::sally.ElementMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.elementPositions_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddElementPositions(global::sally.ElementMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.elementPositions_.Add(value);
        return this;
      }
      public Builder AddElementPositions(global::sally.ElementMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.elementPositions_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeElementPositions(scg::IEnumerable<global::sally.ElementMappingMsg> values) {
        PrepareBuilder();
        result.elementPositions_.Add(values);
        return this;
      }
      public Builder ClearElementPositions() {
        PrepareBuilder();
        result.elementPositions_.Clear();
        return this;
      }
      
      public bool HasHeaderPosition {
       get { return result.hasHeaderPosition; }
      }
      public global::sally.CellSpaceInformation HeaderPosition {
        get { return result.HeaderPosition; }
        set { SetHeaderPosition(value); }
      }
      public Builder SetHeaderPosition(global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeaderPosition = true;
        result.headerPosition_ = value;
        return this;
      }
      public Builder SetHeaderPosition(global::sally.CellSpaceInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeaderPosition = true;
        result.headerPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeaderPosition(global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeaderPosition &&
            result.headerPosition_ != global::sally.CellSpaceInformation.DefaultInstance) {
            result.headerPosition_ = global::sally.CellSpaceInformation.CreateBuilder(result.headerPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.headerPosition_ = value;
        }
        result.hasHeaderPosition = true;
        return this;
      }
      public Builder ClearHeaderPosition() {
        PrepareBuilder();
        result.hasHeaderPosition = false;
        result.headerPosition_ = null;
        return this;
      }
      
      public bool HasHeaderElementId {
        get { return result.hasHeaderElementId; }
      }
      public int HeaderElementId {
        get { return result.HeaderElementId; }
        set { SetHeaderElementId(value); }
      }
      public Builder SetHeaderElementId(int value) {
        PrepareBuilder();
        result.hasHeaderElementId = true;
        result.headerElementId_ = value;
        return this;
      }
      public Builder ClearHeaderElementId() {
        PrepareBuilder();
        result.hasHeaderElementId = false;
        result.headerElementId_ = 0;
        return this;
      }
      
      public bool HasLegendId {
        get { return result.hasLegendId; }
      }
      public int LegendId {
        get { return result.LegendId; }
        set { SetLegendId(value); }
      }
      public Builder SetLegendId(int value) {
        PrepareBuilder();
        result.hasLegendId = true;
        result.legendId_ = value;
        return this;
      }
      public Builder ClearLegendId() {
        PrepareBuilder();
        result.hasLegendId = false;
        result.legendId_ = 0;
        return this;
      }
    }
    static LegendMappingMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DomainMappingMsg : pb::GeneratedMessage<DomainMappingMsg, DomainMappingMsg.Builder> {
    private DomainMappingMsg() { }
    private static readonly DomainMappingMsg defaultInstance = new DomainMappingMsg().MakeReadOnly();
    private static readonly string[] _domainMappingMsgFieldNames = new string[] { "domainElement", "position" };
    private static readonly uint[] _domainMappingMsgFieldTags = new uint[] { 18, 10 };
    public static DomainMappingMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DomainMappingMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DomainMappingMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_DomainMappingMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DomainMappingMsg, DomainMappingMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_DomainMappingMsg__FieldAccessorTable; }
    }
    
    public const int PositionFieldNumber = 1;
    private bool hasPosition;
    private global::sally.CellSpaceInformation position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::sally.CellSpaceInformation Position {
      get { return position_ ?? global::sally.CellSpaceInformation.DefaultInstance; }
    }
    
    public const int DomainElementFieldNumber = 2;
    private bool hasDomainElement;
    private global::sally.LegendProductEntryMsg domainElement_;
    public bool HasDomainElement {
      get { return hasDomainElement; }
    }
    public global::sally.LegendProductEntryMsg DomainElement {
      get { return domainElement_ ?? global::sally.LegendProductEntryMsg.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPosition) return false;
        if (!hasDomainElement) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _domainMappingMsgFieldNames;
      if (hasPosition) {
        output.WriteMessage(1, field_names[1], Position);
      }
      if (hasDomainElement) {
        output.WriteMessage(2, field_names[0], DomainElement);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Position);
        }
        if (hasDomainElement) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, DomainElement);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DomainMappingMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DomainMappingMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DomainMappingMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DomainMappingMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DomainMappingMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DomainMappingMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DomainMappingMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DomainMappingMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DomainMappingMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DomainMappingMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DomainMappingMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DomainMappingMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DomainMappingMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DomainMappingMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DomainMappingMsg result;
      
      private DomainMappingMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          DomainMappingMsg original = result;
          result = new DomainMappingMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DomainMappingMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.DomainMappingMsg.Descriptor; }
      }
      
      public override DomainMappingMsg DefaultInstanceForType {
        get { return global::sally.DomainMappingMsg.DefaultInstance; }
      }
      
      public override DomainMappingMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DomainMappingMsg) {
          return MergeFrom((DomainMappingMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DomainMappingMsg other) {
        if (other == global::sally.DomainMappingMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasDomainElement) {
          MergeDomainElement(other.DomainElement);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_domainMappingMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _domainMappingMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.CellSpaceInformation.Builder subBuilder = global::sally.CellSpaceInformation.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::sally.LegendProductEntryMsg.Builder subBuilder = global::sally.LegendProductEntryMsg.CreateBuilder();
              if (result.hasDomainElement) {
                subBuilder.MergeFrom(DomainElement);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DomainElement = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::sally.CellSpaceInformation Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::sally.CellSpaceInformation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::sally.CellSpaceInformation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::sally.CellSpaceInformation.DefaultInstance) {
            result.position_ = global::sally.CellSpaceInformation.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasDomainElement {
       get { return result.hasDomainElement; }
      }
      public global::sally.LegendProductEntryMsg DomainElement {
        get { return result.DomainElement; }
        set { SetDomainElement(value); }
      }
      public Builder SetDomainElement(global::sally.LegendProductEntryMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDomainElement = true;
        result.domainElement_ = value;
        return this;
      }
      public Builder SetDomainElement(global::sally.LegendProductEntryMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDomainElement = true;
        result.domainElement_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDomainElement(global::sally.LegendProductEntryMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDomainElement &&
            result.domainElement_ != global::sally.LegendProductEntryMsg.DefaultInstance) {
            result.domainElement_ = global::sally.LegendProductEntryMsg.CreateBuilder(result.domainElement_).MergeFrom(value).BuildPartial();
        } else {
          result.domainElement_ = value;
        }
        result.hasDomainElement = true;
        return this;
      }
      public Builder ClearDomainElement() {
        PrepareBuilder();
        result.hasDomainElement = false;
        result.domainElement_ = null;
        return this;
      }
    }
    static DomainMappingMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FunctionalBlockMappingMsg : pb::GeneratedMessage<FunctionalBlockMappingMsg, FunctionalBlockMappingMsg.Builder> {
    private FunctionalBlockMappingMsg() { }
    private static readonly FunctionalBlockMappingMsg defaultInstance = new FunctionalBlockMappingMsg().MakeReadOnly();
    private static readonly string[] _functionalBlockMappingMsgFieldNames = new string[] { "domain", "domainMapping", "elementMapping", "fbId" };
    private static readonly uint[] _functionalBlockMappingMsgFieldTags = new uint[] { 10, 26, 18, 32 };
    public static FunctionalBlockMappingMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FunctionalBlockMappingMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FunctionalBlockMappingMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FunctionalBlockMappingMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FunctionalBlockMappingMsg, FunctionalBlockMappingMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FunctionalBlockMappingMsg__FieldAccessorTable; }
    }
    
    public const int DomainFieldNumber = 1;
    private bool hasDomain;
    private global::sally.LegendProductMsg domain_;
    public bool HasDomain {
      get { return hasDomain; }
    }
    public global::sally.LegendProductMsg Domain {
      get { return domain_ ?? global::sally.LegendProductMsg.DefaultInstance; }
    }
    
    public const int ElementMappingFieldNumber = 2;
    private pbc::PopsicleList<global::sally.ElementMappingMsg> elementMapping_ = new pbc::PopsicleList<global::sally.ElementMappingMsg>();
    public scg::IList<global::sally.ElementMappingMsg> ElementMappingList {
      get { return elementMapping_; }
    }
    public int ElementMappingCount {
      get { return elementMapping_.Count; }
    }
    public global::sally.ElementMappingMsg GetElementMapping(int index) {
      return elementMapping_[index];
    }
    
    public const int DomainMappingFieldNumber = 3;
    private pbc::PopsicleList<global::sally.DomainMappingMsg> domainMapping_ = new pbc::PopsicleList<global::sally.DomainMappingMsg>();
    public scg::IList<global::sally.DomainMappingMsg> DomainMappingList {
      get { return domainMapping_; }
    }
    public int DomainMappingCount {
      get { return domainMapping_.Count; }
    }
    public global::sally.DomainMappingMsg GetDomainMapping(int index) {
      return domainMapping_[index];
    }
    
    public const int FbIdFieldNumber = 4;
    private bool hasFbId;
    private int fbId_;
    public bool HasFbId {
      get { return hasFbId; }
    }
    public int FbId {
      get { return fbId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDomain) return false;
        if (!hasFbId) return false;
        foreach (global::sally.ElementMappingMsg element in ElementMappingList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::sally.DomainMappingMsg element in DomainMappingList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _functionalBlockMappingMsgFieldNames;
      if (hasDomain) {
        output.WriteMessage(1, field_names[0], Domain);
      }
      if (elementMapping_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], elementMapping_);
      }
      if (domainMapping_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], domainMapping_);
      }
      if (hasFbId) {
        output.WriteInt32(4, field_names[3], FbId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDomain) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Domain);
        }
        foreach (global::sally.ElementMappingMsg element in ElementMappingList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::sally.DomainMappingMsg element in DomainMappingList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasFbId) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, FbId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FunctionalBlockMappingMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FunctionalBlockMappingMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FunctionalBlockMappingMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FunctionalBlockMappingMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FunctionalBlockMappingMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FunctionalBlockMappingMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FunctionalBlockMappingMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FunctionalBlockMappingMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FunctionalBlockMappingMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FunctionalBlockMappingMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FunctionalBlockMappingMsg MakeReadOnly() {
      elementMapping_.MakeReadOnly();
      domainMapping_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FunctionalBlockMappingMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FunctionalBlockMappingMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FunctionalBlockMappingMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FunctionalBlockMappingMsg result;
      
      private FunctionalBlockMappingMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          FunctionalBlockMappingMsg original = result;
          result = new FunctionalBlockMappingMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FunctionalBlockMappingMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FunctionalBlockMappingMsg.Descriptor; }
      }
      
      public override FunctionalBlockMappingMsg DefaultInstanceForType {
        get { return global::sally.FunctionalBlockMappingMsg.DefaultInstance; }
      }
      
      public override FunctionalBlockMappingMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FunctionalBlockMappingMsg) {
          return MergeFrom((FunctionalBlockMappingMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FunctionalBlockMappingMsg other) {
        if (other == global::sally.FunctionalBlockMappingMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDomain) {
          MergeDomain(other.Domain);
        }
        if (other.elementMapping_.Count != 0) {
          result.elementMapping_.Add(other.elementMapping_);
        }
        if (other.domainMapping_.Count != 0) {
          result.domainMapping_.Add(other.domainMapping_);
        }
        if (other.HasFbId) {
          FbId = other.FbId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_functionalBlockMappingMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _functionalBlockMappingMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.LegendProductMsg.Builder subBuilder = global::sally.LegendProductMsg.CreateBuilder();
              if (result.hasDomain) {
                subBuilder.MergeFrom(Domain);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Domain = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.elementMapping_, global::sally.ElementMappingMsg.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.domainMapping_, global::sally.DomainMappingMsg.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasFbId = input.ReadInt32(ref result.fbId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDomain {
       get { return result.hasDomain; }
      }
      public global::sally.LegendProductMsg Domain {
        get { return result.Domain; }
        set { SetDomain(value); }
      }
      public Builder SetDomain(global::sally.LegendProductMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDomain = true;
        result.domain_ = value;
        return this;
      }
      public Builder SetDomain(global::sally.LegendProductMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDomain = true;
        result.domain_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDomain(global::sally.LegendProductMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDomain &&
            result.domain_ != global::sally.LegendProductMsg.DefaultInstance) {
            result.domain_ = global::sally.LegendProductMsg.CreateBuilder(result.domain_).MergeFrom(value).BuildPartial();
        } else {
          result.domain_ = value;
        }
        result.hasDomain = true;
        return this;
      }
      public Builder ClearDomain() {
        PrepareBuilder();
        result.hasDomain = false;
        result.domain_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.ElementMappingMsg> ElementMappingList {
        get { return PrepareBuilder().elementMapping_; }
      }
      public int ElementMappingCount {
        get { return result.ElementMappingCount; }
      }
      public global::sally.ElementMappingMsg GetElementMapping(int index) {
        return result.GetElementMapping(index);
      }
      public Builder SetElementMapping(int index, global::sally.ElementMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.elementMapping_[index] = value;
        return this;
      }
      public Builder SetElementMapping(int index, global::sally.ElementMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.elementMapping_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddElementMapping(global::sally.ElementMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.elementMapping_.Add(value);
        return this;
      }
      public Builder AddElementMapping(global::sally.ElementMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.elementMapping_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeElementMapping(scg::IEnumerable<global::sally.ElementMappingMsg> values) {
        PrepareBuilder();
        result.elementMapping_.Add(values);
        return this;
      }
      public Builder ClearElementMapping() {
        PrepareBuilder();
        result.elementMapping_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.DomainMappingMsg> DomainMappingList {
        get { return PrepareBuilder().domainMapping_; }
      }
      public int DomainMappingCount {
        get { return result.DomainMappingCount; }
      }
      public global::sally.DomainMappingMsg GetDomainMapping(int index) {
        return result.GetDomainMapping(index);
      }
      public Builder SetDomainMapping(int index, global::sally.DomainMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.domainMapping_[index] = value;
        return this;
      }
      public Builder SetDomainMapping(int index, global::sally.DomainMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.domainMapping_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDomainMapping(global::sally.DomainMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.domainMapping_.Add(value);
        return this;
      }
      public Builder AddDomainMapping(global::sally.DomainMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.domainMapping_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDomainMapping(scg::IEnumerable<global::sally.DomainMappingMsg> values) {
        PrepareBuilder();
        result.domainMapping_.Add(values);
        return this;
      }
      public Builder ClearDomainMapping() {
        PrepareBuilder();
        result.domainMapping_.Clear();
        return this;
      }
      
      public bool HasFbId {
        get { return result.hasFbId; }
      }
      public int FbId {
        get { return result.FbId; }
        set { SetFbId(value); }
      }
      public Builder SetFbId(int value) {
        PrepareBuilder();
        result.hasFbId = true;
        result.fbId_ = value;
        return this;
      }
      public Builder ClearFbId() {
        PrepareBuilder();
        result.hasFbId = false;
        result.fbId_ = 0;
        return this;
      }
    }
    static FunctionalBlockMappingMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MappingMsg : pb::GeneratedMessage<MappingMsg, MappingMsg.Builder> {
    private MappingMsg() { }
    private static readonly MappingMsg defaultInstance = new MappingMsg().MakeReadOnly();
    private static readonly string[] _mappingMsgFieldNames = new string[] { "fbMappings", "legendMappings" };
    private static readonly uint[] _mappingMsgFieldTags = new uint[] { 18, 10 };
    public static MappingMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MappingMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MappingMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_MappingMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MappingMsg, MappingMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_MappingMsg__FieldAccessorTable; }
    }
    
    public const int LegendMappingsFieldNumber = 1;
    private pbc::PopsicleList<global::sally.LegendMappingMsg> legendMappings_ = new pbc::PopsicleList<global::sally.LegendMappingMsg>();
    public scg::IList<global::sally.LegendMappingMsg> LegendMappingsList {
      get { return legendMappings_; }
    }
    public int LegendMappingsCount {
      get { return legendMappings_.Count; }
    }
    public global::sally.LegendMappingMsg GetLegendMappings(int index) {
      return legendMappings_[index];
    }
    
    public const int FbMappingsFieldNumber = 2;
    private pbc::PopsicleList<global::sally.FunctionalBlockMappingMsg> fbMappings_ = new pbc::PopsicleList<global::sally.FunctionalBlockMappingMsg>();
    public scg::IList<global::sally.FunctionalBlockMappingMsg> FbMappingsList {
      get { return fbMappings_; }
    }
    public int FbMappingsCount {
      get { return fbMappings_.Count; }
    }
    public global::sally.FunctionalBlockMappingMsg GetFbMappings(int index) {
      return fbMappings_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::sally.LegendMappingMsg element in LegendMappingsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::sally.FunctionalBlockMappingMsg element in FbMappingsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mappingMsgFieldNames;
      if (legendMappings_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], legendMappings_);
      }
      if (fbMappings_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], fbMappings_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.LegendMappingMsg element in LegendMappingsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::sally.FunctionalBlockMappingMsg element in FbMappingsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MappingMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MappingMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MappingMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MappingMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MappingMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MappingMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MappingMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MappingMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MappingMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MappingMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MappingMsg MakeReadOnly() {
      legendMappings_.MakeReadOnly();
      fbMappings_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MappingMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MappingMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MappingMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MappingMsg result;
      
      private MappingMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          MappingMsg original = result;
          result = new MappingMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MappingMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.MappingMsg.Descriptor; }
      }
      
      public override MappingMsg DefaultInstanceForType {
        get { return global::sally.MappingMsg.DefaultInstance; }
      }
      
      public override MappingMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MappingMsg) {
          return MergeFrom((MappingMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MappingMsg other) {
        if (other == global::sally.MappingMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.legendMappings_.Count != 0) {
          result.legendMappings_.Add(other.legendMappings_);
        }
        if (other.fbMappings_.Count != 0) {
          result.fbMappings_.Add(other.fbMappings_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mappingMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mappingMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.legendMappings_, global::sally.LegendMappingMsg.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.fbMappings_, global::sally.FunctionalBlockMappingMsg.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.LegendMappingMsg> LegendMappingsList {
        get { return PrepareBuilder().legendMappings_; }
      }
      public int LegendMappingsCount {
        get { return result.LegendMappingsCount; }
      }
      public global::sally.LegendMappingMsg GetLegendMappings(int index) {
        return result.GetLegendMappings(index);
      }
      public Builder SetLegendMappings(int index, global::sally.LegendMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.legendMappings_[index] = value;
        return this;
      }
      public Builder SetLegendMappings(int index, global::sally.LegendMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.legendMappings_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLegendMappings(global::sally.LegendMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.legendMappings_.Add(value);
        return this;
      }
      public Builder AddLegendMappings(global::sally.LegendMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.legendMappings_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLegendMappings(scg::IEnumerable<global::sally.LegendMappingMsg> values) {
        PrepareBuilder();
        result.legendMappings_.Add(values);
        return this;
      }
      public Builder ClearLegendMappings() {
        PrepareBuilder();
        result.legendMappings_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.FunctionalBlockMappingMsg> FbMappingsList {
        get { return PrepareBuilder().fbMappings_; }
      }
      public int FbMappingsCount {
        get { return result.FbMappingsCount; }
      }
      public global::sally.FunctionalBlockMappingMsg GetFbMappings(int index) {
        return result.GetFbMappings(index);
      }
      public Builder SetFbMappings(int index, global::sally.FunctionalBlockMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fbMappings_[index] = value;
        return this;
      }
      public Builder SetFbMappings(int index, global::sally.FunctionalBlockMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fbMappings_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFbMappings(global::sally.FunctionalBlockMappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fbMappings_.Add(value);
        return this;
      }
      public Builder AddFbMappings(global::sally.FunctionalBlockMappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fbMappings_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFbMappings(scg::IEnumerable<global::sally.FunctionalBlockMappingMsg> values) {
        PrepareBuilder();
        result.fbMappings_.Add(values);
        return this;
      }
      public Builder ClearFbMappings() {
        PrepareBuilder();
        result.fbMappings_.Clear();
        return this;
      }
    }
    static MappingMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ModelDataMsg : pb::GeneratedMessage<ModelDataMsg, ModelDataMsg.Builder> {
    private ModelDataMsg() { }
    private static readonly ModelDataMsg defaultInstance = new ModelDataMsg().MakeReadOnly();
    private static readonly string[] _modelDataMsgFieldNames = new string[] { "asm", "mapping" };
    private static readonly uint[] _modelDataMsgFieldTags = new uint[] { 10, 18 };
    public static ModelDataMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ModelDataMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ModelDataMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ModelDataMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ModelDataMsg, ModelDataMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ModelDataMsg__FieldAccessorTable; }
    }
    
    public const int AsmFieldNumber = 1;
    private bool hasAsm;
    private global::sally.AbstractSpreadsheetMsg asm_;
    public bool HasAsm {
      get { return hasAsm; }
    }
    public global::sally.AbstractSpreadsheetMsg Asm {
      get { return asm_ ?? global::sally.AbstractSpreadsheetMsg.DefaultInstance; }
    }
    
    public const int MappingFieldNumber = 2;
    private bool hasMapping;
    private global::sally.MappingMsg mapping_;
    public bool HasMapping {
      get { return hasMapping; }
    }
    public global::sally.MappingMsg Mapping {
      get { return mapping_ ?? global::sally.MappingMsg.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAsm) return false;
        if (!hasMapping) return false;
        if (!Asm.IsInitialized) return false;
        if (!Mapping.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _modelDataMsgFieldNames;
      if (hasAsm) {
        output.WriteMessage(1, field_names[0], Asm);
      }
      if (hasMapping) {
        output.WriteMessage(2, field_names[1], Mapping);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAsm) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Asm);
        }
        if (hasMapping) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Mapping);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ModelDataMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModelDataMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModelDataMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModelDataMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModelDataMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModelDataMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ModelDataMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ModelDataMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ModelDataMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModelDataMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ModelDataMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ModelDataMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ModelDataMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ModelDataMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ModelDataMsg result;
      
      private ModelDataMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          ModelDataMsg original = result;
          result = new ModelDataMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ModelDataMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ModelDataMsg.Descriptor; }
      }
      
      public override ModelDataMsg DefaultInstanceForType {
        get { return global::sally.ModelDataMsg.DefaultInstance; }
      }
      
      public override ModelDataMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ModelDataMsg) {
          return MergeFrom((ModelDataMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ModelDataMsg other) {
        if (other == global::sally.ModelDataMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAsm) {
          MergeAsm(other.Asm);
        }
        if (other.HasMapping) {
          MergeMapping(other.Mapping);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_modelDataMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _modelDataMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.AbstractSpreadsheetMsg.Builder subBuilder = global::sally.AbstractSpreadsheetMsg.CreateBuilder();
              if (result.hasAsm) {
                subBuilder.MergeFrom(Asm);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Asm = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::sally.MappingMsg.Builder subBuilder = global::sally.MappingMsg.CreateBuilder();
              if (result.hasMapping) {
                subBuilder.MergeFrom(Mapping);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mapping = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAsm {
       get { return result.hasAsm; }
      }
      public global::sally.AbstractSpreadsheetMsg Asm {
        get { return result.Asm; }
        set { SetAsm(value); }
      }
      public Builder SetAsm(global::sally.AbstractSpreadsheetMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAsm = true;
        result.asm_ = value;
        return this;
      }
      public Builder SetAsm(global::sally.AbstractSpreadsheetMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAsm = true;
        result.asm_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAsm(global::sally.AbstractSpreadsheetMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAsm &&
            result.asm_ != global::sally.AbstractSpreadsheetMsg.DefaultInstance) {
            result.asm_ = global::sally.AbstractSpreadsheetMsg.CreateBuilder(result.asm_).MergeFrom(value).BuildPartial();
        } else {
          result.asm_ = value;
        }
        result.hasAsm = true;
        return this;
      }
      public Builder ClearAsm() {
        PrepareBuilder();
        result.hasAsm = false;
        result.asm_ = null;
        return this;
      }
      
      public bool HasMapping {
       get { return result.hasMapping; }
      }
      public global::sally.MappingMsg Mapping {
        get { return result.Mapping; }
        set { SetMapping(value); }
      }
      public Builder SetMapping(global::sally.MappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMapping = true;
        result.mapping_ = value;
        return this;
      }
      public Builder SetMapping(global::sally.MappingMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMapping = true;
        result.mapping_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMapping(global::sally.MappingMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMapping &&
            result.mapping_ != global::sally.MappingMsg.DefaultInstance) {
            result.mapping_ = global::sally.MappingMsg.CreateBuilder(result.mapping_).MergeFrom(value).BuildPartial();
        } else {
          result.mapping_ = value;
        }
        result.hasMapping = true;
        return this;
      }
      public Builder ClearMapping() {
        PrepareBuilder();
        result.hasMapping = false;
        result.mapping_ = null;
        return this;
      }
    }
    static ModelDataMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AreaInformationMsg : pb::GeneratedMessage<AreaInformationMsg, AreaInformationMsg.Builder> {
    private AreaInformationMsg() { }
    private static readonly AreaInformationMsg defaultInstance = new AreaInformationMsg().MakeReadOnly();
    private static readonly string[] _areaInformationMsgFieldNames = new string[] { "id", "ranges", "type" };
    private static readonly uint[] _areaInformationMsgFieldTags = new uint[] { 8, 26, 16 };
    public static AreaInformationMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AreaInformationMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AreaInformationMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_AreaInformationMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AreaInformationMsg, AreaInformationMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_AreaInformationMsg__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum TypeEnum {
        LEGEND = 0,
        LEGENDHEADER = 1,
        FB = 3,
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::sally.AreaInformationMsg.Types.TypeEnum type_ = global::sally.AreaInformationMsg.Types.TypeEnum.LEGEND;
    public bool HasType {
      get { return hasType; }
    }
    public global::sally.AreaInformationMsg.Types.TypeEnum Type {
      get { return type_; }
    }
    
    public const int RangesFieldNumber = 3;
    private bool hasRanges;
    private global::sally.CellRanges ranges_;
    public bool HasRanges {
      get { return hasRanges; }
    }
    public global::sally.CellRanges Ranges {
      get { return ranges_ ?? global::sally.CellRanges.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasType) return false;
        if (!hasRanges) return false;
        if (!Ranges.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _areaInformationMsgFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[2], (int) Type, Type);
      }
      if (hasRanges) {
        output.WriteMessage(3, field_names[1], Ranges);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (hasRanges) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Ranges);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AreaInformationMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AreaInformationMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AreaInformationMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AreaInformationMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AreaInformationMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AreaInformationMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AreaInformationMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AreaInformationMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AreaInformationMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AreaInformationMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AreaInformationMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AreaInformationMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AreaInformationMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AreaInformationMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AreaInformationMsg result;
      
      private AreaInformationMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          AreaInformationMsg original = result;
          result = new AreaInformationMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AreaInformationMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.AreaInformationMsg.Descriptor; }
      }
      
      public override AreaInformationMsg DefaultInstanceForType {
        get { return global::sally.AreaInformationMsg.DefaultInstance; }
      }
      
      public override AreaInformationMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AreaInformationMsg) {
          return MergeFrom((AreaInformationMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AreaInformationMsg other) {
        if (other == global::sally.AreaInformationMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasRanges) {
          MergeRanges(other.Ranges);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_areaInformationMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _areaInformationMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              global::sally.CellRanges.Builder subBuilder = global::sally.CellRanges.CreateBuilder();
              if (result.hasRanges) {
                subBuilder.MergeFrom(Ranges);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Ranges = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::sally.AreaInformationMsg.Types.TypeEnum Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::sally.AreaInformationMsg.Types.TypeEnum value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::sally.AreaInformationMsg.Types.TypeEnum.LEGEND;
        return this;
      }
      
      public bool HasRanges {
       get { return result.hasRanges; }
      }
      public global::sally.CellRanges Ranges {
        get { return result.Ranges; }
        set { SetRanges(value); }
      }
      public Builder SetRanges(global::sally.CellRanges value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRanges = true;
        result.ranges_ = value;
        return this;
      }
      public Builder SetRanges(global::sally.CellRanges.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRanges = true;
        result.ranges_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRanges(global::sally.CellRanges value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRanges &&
            result.ranges_ != global::sally.CellRanges.DefaultInstance) {
            result.ranges_ = global::sally.CellRanges.CreateBuilder(result.ranges_).MergeFrom(value).BuildPartial();
        } else {
          result.ranges_ = value;
        }
        result.hasRanges = true;
        return this;
      }
      public Builder ClearRanges() {
        PrepareBuilder();
        result.hasRanges = false;
        result.ranges_ = null;
        return this;
      }
    }
    static AreaInformationMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AmbiguousInformationMsg : pb::GeneratedMessage<AmbiguousInformationMsg, AmbiguousInformationMsg.Builder> {
    private AmbiguousInformationMsg() { }
    private static readonly AmbiguousInformationMsg defaultInstance = new AmbiguousInformationMsg().MakeReadOnly();
    private static readonly string[] _ambiguousInformationMsgFieldNames = new string[] { "position", "relatedAreaIds" };
    private static readonly uint[] _ambiguousInformationMsgFieldTags = new uint[] { 10, 16 };
    public static AmbiguousInformationMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AmbiguousInformationMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AmbiguousInformationMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_AmbiguousInformationMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AmbiguousInformationMsg, AmbiguousInformationMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_AmbiguousInformationMsg__FieldAccessorTable; }
    }
    
    public const int PositionFieldNumber = 1;
    private bool hasPosition;
    private global::sally.CellPosition position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::sally.CellPosition Position {
      get { return position_ ?? global::sally.CellPosition.DefaultInstance; }
    }
    
    public const int RelatedAreaIdsFieldNumber = 2;
    private pbc::PopsicleList<int> relatedAreaIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> RelatedAreaIdsList {
      get { return pbc::Lists.AsReadOnly(relatedAreaIds_); }
    }
    public int RelatedAreaIdsCount {
      get { return relatedAreaIds_.Count; }
    }
    public int GetRelatedAreaIds(int index) {
      return relatedAreaIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPosition) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ambiguousInformationMsgFieldNames;
      if (hasPosition) {
        output.WriteMessage(1, field_names[0], Position);
      }
      if (relatedAreaIds_.Count > 0) {
        output.WriteInt32Array(2, field_names[1], relatedAreaIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Position);
        }
        {
          int dataSize = 0;
          foreach (int element in RelatedAreaIdsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * relatedAreaIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AmbiguousInformationMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AmbiguousInformationMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AmbiguousInformationMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AmbiguousInformationMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AmbiguousInformationMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AmbiguousInformationMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AmbiguousInformationMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AmbiguousInformationMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AmbiguousInformationMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AmbiguousInformationMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AmbiguousInformationMsg MakeReadOnly() {
      relatedAreaIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AmbiguousInformationMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AmbiguousInformationMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AmbiguousInformationMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AmbiguousInformationMsg result;
      
      private AmbiguousInformationMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          AmbiguousInformationMsg original = result;
          result = new AmbiguousInformationMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AmbiguousInformationMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.AmbiguousInformationMsg.Descriptor; }
      }
      
      public override AmbiguousInformationMsg DefaultInstanceForType {
        get { return global::sally.AmbiguousInformationMsg.DefaultInstance; }
      }
      
      public override AmbiguousInformationMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AmbiguousInformationMsg) {
          return MergeFrom((AmbiguousInformationMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AmbiguousInformationMsg other) {
        if (other == global::sally.AmbiguousInformationMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.relatedAreaIds_.Count != 0) {
          result.relatedAreaIds_.Add(other.relatedAreaIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ambiguousInformationMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ambiguousInformationMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.CellPosition.Builder subBuilder = global::sally.CellPosition.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.relatedAreaIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::sally.CellPosition Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::sally.CellPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::sally.CellPosition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::sally.CellPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::sally.CellPosition.DefaultInstance) {
            result.position_ = global::sally.CellPosition.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> RelatedAreaIdsList {
        get { return PrepareBuilder().relatedAreaIds_; }
      }
      public int RelatedAreaIdsCount {
        get { return result.RelatedAreaIdsCount; }
      }
      public int GetRelatedAreaIds(int index) {
        return result.GetRelatedAreaIds(index);
      }
      public Builder SetRelatedAreaIds(int index, int value) {
        PrepareBuilder();
        result.relatedAreaIds_[index] = value;
        return this;
      }
      public Builder AddRelatedAreaIds(int value) {
        PrepareBuilder();
        result.relatedAreaIds_.Add(value);
        return this;
      }
      public Builder AddRangeRelatedAreaIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.relatedAreaIds_.Add(values);
        return this;
      }
      public Builder ClearRelatedAreaIds() {
        PrepareBuilder();
        result.relatedAreaIds_.Clear();
        return this;
      }
    }
    static AmbiguousInformationMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AffiliationInformationMsg : pb::GeneratedMessage<AffiliationInformationMsg, AffiliationInformationMsg.Builder> {
    private AffiliationInformationMsg() { }
    private static readonly AffiliationInformationMsg defaultInstance = new AffiliationInformationMsg().MakeReadOnly();
    private static readonly string[] _affiliationInformationMsgFieldNames = new string[] { "affiliatedIds", "id" };
    private static readonly uint[] _affiliationInformationMsgFieldTags = new uint[] { 16, 8 };
    public static AffiliationInformationMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AffiliationInformationMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AffiliationInformationMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_AffiliationInformationMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AffiliationInformationMsg, AffiliationInformationMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_AffiliationInformationMsg__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int AffiliatedIdsFieldNumber = 2;
    private pbc::PopsicleList<int> affiliatedIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> AffiliatedIdsList {
      get { return pbc::Lists.AsReadOnly(affiliatedIds_); }
    }
    public int AffiliatedIdsCount {
      get { return affiliatedIds_.Count; }
    }
    public int GetAffiliatedIds(int index) {
      return affiliatedIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _affiliationInformationMsgFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (affiliatedIds_.Count > 0) {
        output.WriteInt32Array(2, field_names[0], affiliatedIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        {
          int dataSize = 0;
          foreach (int element in AffiliatedIdsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * affiliatedIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AffiliationInformationMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AffiliationInformationMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AffiliationInformationMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AffiliationInformationMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AffiliationInformationMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AffiliationInformationMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AffiliationInformationMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AffiliationInformationMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AffiliationInformationMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AffiliationInformationMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AffiliationInformationMsg MakeReadOnly() {
      affiliatedIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AffiliationInformationMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AffiliationInformationMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AffiliationInformationMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AffiliationInformationMsg result;
      
      private AffiliationInformationMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          AffiliationInformationMsg original = result;
          result = new AffiliationInformationMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AffiliationInformationMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.AffiliationInformationMsg.Descriptor; }
      }
      
      public override AffiliationInformationMsg DefaultInstanceForType {
        get { return global::sally.AffiliationInformationMsg.DefaultInstance; }
      }
      
      public override AffiliationInformationMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AffiliationInformationMsg) {
          return MergeFrom((AffiliationInformationMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AffiliationInformationMsg other) {
        if (other == global::sally.AffiliationInformationMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.affiliatedIds_.Count != 0) {
          result.affiliatedIds_.Add(other.affiliatedIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_affiliationInformationMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _affiliationInformationMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.affiliatedIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> AffiliatedIdsList {
        get { return PrepareBuilder().affiliatedIds_; }
      }
      public int AffiliatedIdsCount {
        get { return result.AffiliatedIdsCount; }
      }
      public int GetAffiliatedIds(int index) {
        return result.GetAffiliatedIds(index);
      }
      public Builder SetAffiliatedIds(int index, int value) {
        PrepareBuilder();
        result.affiliatedIds_[index] = value;
        return this;
      }
      public Builder AddAffiliatedIds(int value) {
        PrepareBuilder();
        result.affiliatedIds_.Add(value);
        return this;
      }
      public Builder AddRangeAffiliatedIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.affiliatedIds_.Add(values);
        return this;
      }
      public Builder ClearAffiliatedIds() {
        PrepareBuilder();
        result.affiliatedIds_.Clear();
        return this;
      }
    }
    static AffiliationInformationMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ParsingResultMsg : pb::GeneratedMessage<ParsingResultMsg, ParsingResultMsg.Builder> {
    private ParsingResultMsg() { }
    private static readonly ParsingResultMsg defaultInstance = new ParsingResultMsg().MakeReadOnly();
    private static readonly string[] _parsingResultMsgFieldNames = new string[] { "affiliation", "ambig", "areas" };
    private static readonly uint[] _parsingResultMsgFieldTags = new uint[] { 26, 18, 10 };
    public static ParsingResultMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ParsingResultMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ParsingResultMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ParsingResultMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ParsingResultMsg, ParsingResultMsg.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ParsingResultMsg__FieldAccessorTable; }
    }
    
    public const int AreasFieldNumber = 1;
    private pbc::PopsicleList<global::sally.AreaInformationMsg> areas_ = new pbc::PopsicleList<global::sally.AreaInformationMsg>();
    public scg::IList<global::sally.AreaInformationMsg> AreasList {
      get { return areas_; }
    }
    public int AreasCount {
      get { return areas_.Count; }
    }
    public global::sally.AreaInformationMsg GetAreas(int index) {
      return areas_[index];
    }
    
    public const int AmbigFieldNumber = 2;
    private pbc::PopsicleList<global::sally.AmbiguousInformationMsg> ambig_ = new pbc::PopsicleList<global::sally.AmbiguousInformationMsg>();
    public scg::IList<global::sally.AmbiguousInformationMsg> AmbigList {
      get { return ambig_; }
    }
    public int AmbigCount {
      get { return ambig_.Count; }
    }
    public global::sally.AmbiguousInformationMsg GetAmbig(int index) {
      return ambig_[index];
    }
    
    public const int AffiliationFieldNumber = 3;
    private pbc::PopsicleList<global::sally.AffiliationInformationMsg> affiliation_ = new pbc::PopsicleList<global::sally.AffiliationInformationMsg>();
    public scg::IList<global::sally.AffiliationInformationMsg> AffiliationList {
      get { return affiliation_; }
    }
    public int AffiliationCount {
      get { return affiliation_.Count; }
    }
    public global::sally.AffiliationInformationMsg GetAffiliation(int index) {
      return affiliation_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::sally.AreaInformationMsg element in AreasList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::sally.AmbiguousInformationMsg element in AmbigList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::sally.AffiliationInformationMsg element in AffiliationList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _parsingResultMsgFieldNames;
      if (areas_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], areas_);
      }
      if (ambig_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], ambig_);
      }
      if (affiliation_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], affiliation_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.AreaInformationMsg element in AreasList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::sally.AmbiguousInformationMsg element in AmbigList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::sally.AffiliationInformationMsg element in AffiliationList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ParsingResultMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ParsingResultMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ParsingResultMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ParsingResultMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ParsingResultMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ParsingResultMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ParsingResultMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ParsingResultMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ParsingResultMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ParsingResultMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ParsingResultMsg MakeReadOnly() {
      areas_.MakeReadOnly();
      ambig_.MakeReadOnly();
      affiliation_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ParsingResultMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ParsingResultMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ParsingResultMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ParsingResultMsg result;
      
      private ParsingResultMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          ParsingResultMsg original = result;
          result = new ParsingResultMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ParsingResultMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ParsingResultMsg.Descriptor; }
      }
      
      public override ParsingResultMsg DefaultInstanceForType {
        get { return global::sally.ParsingResultMsg.DefaultInstance; }
      }
      
      public override ParsingResultMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ParsingResultMsg) {
          return MergeFrom((ParsingResultMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ParsingResultMsg other) {
        if (other == global::sally.ParsingResultMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.areas_.Count != 0) {
          result.areas_.Add(other.areas_);
        }
        if (other.ambig_.Count != 0) {
          result.ambig_.Add(other.ambig_);
        }
        if (other.affiliation_.Count != 0) {
          result.affiliation_.Add(other.affiliation_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_parsingResultMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _parsingResultMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.areas_, global::sally.AreaInformationMsg.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.ambig_, global::sally.AmbiguousInformationMsg.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.affiliation_, global::sally.AffiliationInformationMsg.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.AreaInformationMsg> AreasList {
        get { return PrepareBuilder().areas_; }
      }
      public int AreasCount {
        get { return result.AreasCount; }
      }
      public global::sally.AreaInformationMsg GetAreas(int index) {
        return result.GetAreas(index);
      }
      public Builder SetAreas(int index, global::sally.AreaInformationMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.areas_[index] = value;
        return this;
      }
      public Builder SetAreas(int index, global::sally.AreaInformationMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.areas_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAreas(global::sally.AreaInformationMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.areas_.Add(value);
        return this;
      }
      public Builder AddAreas(global::sally.AreaInformationMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.areas_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAreas(scg::IEnumerable<global::sally.AreaInformationMsg> values) {
        PrepareBuilder();
        result.areas_.Add(values);
        return this;
      }
      public Builder ClearAreas() {
        PrepareBuilder();
        result.areas_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.AmbiguousInformationMsg> AmbigList {
        get { return PrepareBuilder().ambig_; }
      }
      public int AmbigCount {
        get { return result.AmbigCount; }
      }
      public global::sally.AmbiguousInformationMsg GetAmbig(int index) {
        return result.GetAmbig(index);
      }
      public Builder SetAmbig(int index, global::sally.AmbiguousInformationMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ambig_[index] = value;
        return this;
      }
      public Builder SetAmbig(int index, global::sally.AmbiguousInformationMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ambig_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAmbig(global::sally.AmbiguousInformationMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ambig_.Add(value);
        return this;
      }
      public Builder AddAmbig(global::sally.AmbiguousInformationMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ambig_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAmbig(scg::IEnumerable<global::sally.AmbiguousInformationMsg> values) {
        PrepareBuilder();
        result.ambig_.Add(values);
        return this;
      }
      public Builder ClearAmbig() {
        PrepareBuilder();
        result.ambig_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.AffiliationInformationMsg> AffiliationList {
        get { return PrepareBuilder().affiliation_; }
      }
      public int AffiliationCount {
        get { return result.AffiliationCount; }
      }
      public global::sally.AffiliationInformationMsg GetAffiliation(int index) {
        return result.GetAffiliation(index);
      }
      public Builder SetAffiliation(int index, global::sally.AffiliationInformationMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.affiliation_[index] = value;
        return this;
      }
      public Builder SetAffiliation(int index, global::sally.AffiliationInformationMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.affiliation_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAffiliation(global::sally.AffiliationInformationMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.affiliation_.Add(value);
        return this;
      }
      public Builder AddAffiliation(global::sally.AffiliationInformationMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.affiliation_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAffiliation(scg::IEnumerable<global::sally.AffiliationInformationMsg> values) {
        PrepareBuilder();
        result.affiliation_.Add(values);
        return this;
      }
      public Builder ClearAffiliation() {
        PrepareBuilder();
        result.affiliation_.Clear();
        return this;
      }
    }
    static ParsingResultMsg() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SemanticActionData : pb::GeneratedMessage<SemanticActionData, SemanticActionData.Builder> {
    private SemanticActionData() { }
    private static readonly SemanticActionData defaultInstance = new SemanticActionData().MakeReadOnly();
    private static readonly string[] _semanticActionDataFieldNames = new string[] { "cd", "col", "coordinates", "fileName", "name", "row", "senderId", "sheetName" };
    private static readonly uint[] _semanticActionDataFieldTags = new uint[] { 10, 56, 66, 26, 18, 48, 34, 42 };
    public static SemanticActionData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SemanticActionData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SemanticActionData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_SemanticActionData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SemanticActionData, SemanticActionData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_SemanticActionData__FieldAccessorTable; }
    }
    
    public const int CdFieldNumber = 1;
    private bool hasCd;
    private string cd_ = "";
    public bool HasCd {
      get { return hasCd; }
    }
    public string Cd {
      get { return cd_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int FileNameFieldNumber = 3;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int SenderIdFieldNumber = 4;
    private bool hasSenderId;
    private string senderId_ = "";
    public bool HasSenderId {
      get { return hasSenderId; }
    }
    public string SenderId {
      get { return senderId_; }
    }
    
    public const int SheetNameFieldNumber = 5;
    private bool hasSheetName;
    private string sheetName_ = "";
    public bool HasSheetName {
      get { return hasSheetName; }
    }
    public string SheetName {
      get { return sheetName_; }
    }
    
    public const int RowFieldNumber = 6;
    private bool hasRow;
    private uint row_;
    public bool HasRow {
      get { return hasRow; }
    }
    [global::System.CLSCompliant(false)]
    public uint Row {
      get { return row_; }
    }
    
    public const int ColFieldNumber = 7;
    private bool hasCol;
    private uint col_;
    public bool HasCol {
      get { return hasCol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Col {
      get { return col_; }
    }
    
    public const int CoordinatesFieldNumber = 8;
    private bool hasCoordinates;
    private global::sally.ScreenCoordinates coordinates_;
    public bool HasCoordinates {
      get { return hasCoordinates; }
    }
    public global::sally.ScreenCoordinates Coordinates {
      get { return coordinates_ ?? global::sally.ScreenCoordinates.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasCoordinates) {
          if (!Coordinates.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _semanticActionDataFieldNames;
      if (hasCd) {
        output.WriteString(1, field_names[0], Cd);
      }
      if (hasName) {
        output.WriteString(2, field_names[4], Name);
      }
      if (hasFileName) {
        output.WriteString(3, field_names[3], FileName);
      }
      if (hasSenderId) {
        output.WriteString(4, field_names[6], SenderId);
      }
      if (hasSheetName) {
        output.WriteString(5, field_names[7], SheetName);
      }
      if (hasRow) {
        output.WriteUInt32(6, field_names[5], Row);
      }
      if (hasCol) {
        output.WriteUInt32(7, field_names[1], Col);
      }
      if (hasCoordinates) {
        output.WriteMessage(8, field_names[2], Coordinates);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCd) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Cd);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, FileName);
        }
        if (hasSenderId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, SenderId);
        }
        if (hasSheetName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, SheetName);
        }
        if (hasRow) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, Row);
        }
        if (hasCol) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, Col);
        }
        if (hasCoordinates) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Coordinates);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SemanticActionData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SemanticActionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SemanticActionData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SemanticActionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SemanticActionData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SemanticActionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SemanticActionData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SemanticActionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SemanticActionData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SemanticActionData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SemanticActionData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SemanticActionData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SemanticActionData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SemanticActionData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SemanticActionData result;
      
      private SemanticActionData PrepareBuilder() {
        if (resultIsReadOnly) {
          SemanticActionData original = result;
          result = new SemanticActionData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SemanticActionData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.SemanticActionData.Descriptor; }
      }
      
      public override SemanticActionData DefaultInstanceForType {
        get { return global::sally.SemanticActionData.DefaultInstance; }
      }
      
      public override SemanticActionData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SemanticActionData) {
          return MergeFrom((SemanticActionData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SemanticActionData other) {
        if (other == global::sally.SemanticActionData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCd) {
          Cd = other.Cd;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasSenderId) {
          SenderId = other.SenderId;
        }
        if (other.HasSheetName) {
          SheetName = other.SheetName;
        }
        if (other.HasRow) {
          Row = other.Row;
        }
        if (other.HasCol) {
          Col = other.Col;
        }
        if (other.HasCoordinates) {
          MergeCoordinates(other.Coordinates);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_semanticActionDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _semanticActionDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCd = input.ReadString(ref result.cd_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 34: {
              result.hasSenderId = input.ReadString(ref result.senderId_);
              break;
            }
            case 42: {
              result.hasSheetName = input.ReadString(ref result.sheetName_);
              break;
            }
            case 48: {
              result.hasRow = input.ReadUInt32(ref result.row_);
              break;
            }
            case 56: {
              result.hasCol = input.ReadUInt32(ref result.col_);
              break;
            }
            case 66: {
              global::sally.ScreenCoordinates.Builder subBuilder = global::sally.ScreenCoordinates.CreateBuilder();
              if (result.hasCoordinates) {
                subBuilder.MergeFrom(Coordinates);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Coordinates = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCd {
        get { return result.hasCd; }
      }
      public string Cd {
        get { return result.Cd; }
        set { SetCd(value); }
      }
      public Builder SetCd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCd = true;
        result.cd_ = value;
        return this;
      }
      public Builder ClearCd() {
        PrepareBuilder();
        result.hasCd = false;
        result.cd_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public bool HasSenderId {
        get { return result.hasSenderId; }
      }
      public string SenderId {
        get { return result.SenderId; }
        set { SetSenderId(value); }
      }
      public Builder SetSenderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = value;
        return this;
      }
      public Builder ClearSenderId() {
        PrepareBuilder();
        result.hasSenderId = false;
        result.senderId_ = "";
        return this;
      }
      
      public bool HasSheetName {
        get { return result.hasSheetName; }
      }
      public string SheetName {
        get { return result.SheetName; }
        set { SetSheetName(value); }
      }
      public Builder SetSheetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSheetName = true;
        result.sheetName_ = value;
        return this;
      }
      public Builder ClearSheetName() {
        PrepareBuilder();
        result.hasSheetName = false;
        result.sheetName_ = "";
        return this;
      }
      
      public bool HasRow {
        get { return result.hasRow; }
      }
      [global::System.CLSCompliant(false)]
      public uint Row {
        get { return result.Row; }
        set { SetRow(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRow(uint value) {
        PrepareBuilder();
        result.hasRow = true;
        result.row_ = value;
        return this;
      }
      public Builder ClearRow() {
        PrepareBuilder();
        result.hasRow = false;
        result.row_ = 0;
        return this;
      }
      
      public bool HasCol {
        get { return result.hasCol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Col {
        get { return result.Col; }
        set { SetCol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCol(uint value) {
        PrepareBuilder();
        result.hasCol = true;
        result.col_ = value;
        return this;
      }
      public Builder ClearCol() {
        PrepareBuilder();
        result.hasCol = false;
        result.col_ = 0;
        return this;
      }
      
      public bool HasCoordinates {
       get { return result.hasCoordinates; }
      }
      public global::sally.ScreenCoordinates Coordinates {
        get { return result.Coordinates; }
        set { SetCoordinates(value); }
      }
      public Builder SetCoordinates(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCoordinates = true;
        result.coordinates_ = value;
        return this;
      }
      public Builder SetCoordinates(global::sally.ScreenCoordinates.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCoordinates = true;
        result.coordinates_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCoordinates(global::sally.ScreenCoordinates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCoordinates &&
            result.coordinates_ != global::sally.ScreenCoordinates.DefaultInstance) {
            result.coordinates_ = global::sally.ScreenCoordinates.CreateBuilder(result.coordinates_).MergeFrom(value).BuildPartial();
        } else {
          result.coordinates_ = value;
        }
        result.hasCoordinates = true;
        return this;
      }
      public Builder ClearCoordinates() {
        PrepareBuilder();
        result.hasCoordinates = false;
        result.coordinates_ = null;
        return this;
      }
    }
    static SemanticActionData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SemanticData : pb::GeneratedMessage<SemanticData, SemanticData.Builder> {
    private SemanticData() { }
    private static readonly SemanticData defaultInstance = new SemanticData().MakeReadOnly();
    private static readonly string[] _semanticDataFieldNames = new string[] { "SpreadsheetModel", "fileName" };
    private static readonly uint[] _semanticDataFieldTags = new uint[] { 18, 10 };
    public static SemanticData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SemanticData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SemanticData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_SemanticData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SemanticData, SemanticData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_SemanticData__FieldAccessorTable; }
    }
    
    public const int FileNameFieldNumber = 1;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int SpreadsheetModelFieldNumber = 2;
    private bool hasSpreadsheetModel;
    private global::sally.SpreadsheetModel spreadsheetModel_;
    public bool HasSpreadsheetModel {
      get { return hasSpreadsheetModel; }
    }
    public global::sally.SpreadsheetModel SpreadsheetModel {
      get { return spreadsheetModel_ ?? global::sally.SpreadsheetModel.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileName) return false;
        if (!hasSpreadsheetModel) return false;
        if (!SpreadsheetModel.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _semanticDataFieldNames;
      if (hasFileName) {
        output.WriteString(1, field_names[1], FileName);
      }
      if (hasSpreadsheetModel) {
        output.WriteMessage(2, field_names[0], SpreadsheetModel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FileName);
        }
        if (hasSpreadsheetModel) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, SpreadsheetModel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SemanticData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SemanticData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SemanticData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SemanticData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SemanticData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SemanticData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SemanticData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SemanticData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SemanticData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SemanticData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SemanticData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SemanticData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SemanticData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SemanticData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SemanticData result;
      
      private SemanticData PrepareBuilder() {
        if (resultIsReadOnly) {
          SemanticData original = result;
          result = new SemanticData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SemanticData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.SemanticData.Descriptor; }
      }
      
      public override SemanticData DefaultInstanceForType {
        get { return global::sally.SemanticData.DefaultInstance; }
      }
      
      public override SemanticData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SemanticData) {
          return MergeFrom((SemanticData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SemanticData other) {
        if (other == global::sally.SemanticData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasSpreadsheetModel) {
          MergeSpreadsheetModel(other.SpreadsheetModel);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_semanticDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _semanticDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 18: {
              global::sally.SpreadsheetModel.Builder subBuilder = global::sally.SpreadsheetModel.CreateBuilder();
              if (result.hasSpreadsheetModel) {
                subBuilder.MergeFrom(SpreadsheetModel);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SpreadsheetModel = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public bool HasSpreadsheetModel {
       get { return result.hasSpreadsheetModel; }
      }
      public global::sally.SpreadsheetModel SpreadsheetModel {
        get { return result.SpreadsheetModel; }
        set { SetSpreadsheetModel(value); }
      }
      public Builder SetSpreadsheetModel(global::sally.SpreadsheetModel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpreadsheetModel = true;
        result.spreadsheetModel_ = value;
        return this;
      }
      public Builder SetSpreadsheetModel(global::sally.SpreadsheetModel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpreadsheetModel = true;
        result.spreadsheetModel_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpreadsheetModel(global::sally.SpreadsheetModel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpreadsheetModel &&
            result.spreadsheetModel_ != global::sally.SpreadsheetModel.DefaultInstance) {
            result.spreadsheetModel_ = global::sally.SpreadsheetModel.CreateBuilder(result.spreadsheetModel_).MergeFrom(value).BuildPartial();
        } else {
          result.spreadsheetModel_ = value;
        }
        result.hasSpreadsheetModel = true;
        return this;
      }
      public Builder ClearSpreadsheetModel() {
        PrepareBuilder();
        result.hasSpreadsheetModel = false;
        result.spreadsheetModel_ = null;
        return this;
      }
    }
    static SemanticData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SpreadsheetModel : pb::GeneratedMessage<SpreadsheetModel, SpreadsheetModel.Builder> {
    private SpreadsheetModel() { }
    private static readonly SpreadsheetModel defaultInstance = new SpreadsheetModel().MakeReadOnly();
    private static readonly string[] _spreadsheetModelFieldNames = new string[] { "asm", "ontomapping", "sheetMapping" };
    private static readonly uint[] _spreadsheetModelFieldTags = new uint[] { 10, 18, 26 };
    public static SpreadsheetModel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SpreadsheetModel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SpreadsheetModel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_SpreadsheetModel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SpreadsheetModel, SpreadsheetModel.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_SpreadsheetModel__FieldAccessorTable; }
    }
    
    public const int AsmFieldNumber = 1;
    private bool hasAsm;
    private global::sally.ModelDataMsg asm_;
    public bool HasAsm {
      get { return hasAsm; }
    }
    public global::sally.ModelDataMsg Asm {
      get { return asm_ ?? global::sally.ModelDataMsg.DefaultInstance; }
    }
    
    public const int OntomappingFieldNumber = 2;
    private pbc::PopsicleList<global::sally.SpreadsheetOntologyPair> ontomapping_ = new pbc::PopsicleList<global::sally.SpreadsheetOntologyPair>();
    public scg::IList<global::sally.SpreadsheetOntologyPair> OntomappingList {
      get { return ontomapping_; }
    }
    public int OntomappingCount {
      get { return ontomapping_.Count; }
    }
    public global::sally.SpreadsheetOntologyPair GetOntomapping(int index) {
      return ontomapping_[index];
    }
    
    public const int SheetMappingFieldNumber = 3;
    private pbc::PopsicleList<global::sally.WorksheetIDPair> sheetMapping_ = new pbc::PopsicleList<global::sally.WorksheetIDPair>();
    public scg::IList<global::sally.WorksheetIDPair> SheetMappingList {
      get { return sheetMapping_; }
    }
    public int SheetMappingCount {
      get { return sheetMapping_.Count; }
    }
    public global::sally.WorksheetIDPair GetSheetMapping(int index) {
      return sheetMapping_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAsm) return false;
        if (!Asm.IsInitialized) return false;
        foreach (global::sally.SpreadsheetOntologyPair element in OntomappingList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::sally.WorksheetIDPair element in SheetMappingList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _spreadsheetModelFieldNames;
      if (hasAsm) {
        output.WriteMessage(1, field_names[0], Asm);
      }
      if (ontomapping_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], ontomapping_);
      }
      if (sheetMapping_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], sheetMapping_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAsm) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Asm);
        }
        foreach (global::sally.SpreadsheetOntologyPair element in OntomappingList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::sally.WorksheetIDPair element in SheetMappingList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SpreadsheetModel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SpreadsheetModel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SpreadsheetModel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SpreadsheetModel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SpreadsheetModel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SpreadsheetModel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SpreadsheetModel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SpreadsheetModel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SpreadsheetModel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SpreadsheetModel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SpreadsheetModel MakeReadOnly() {
      ontomapping_.MakeReadOnly();
      sheetMapping_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SpreadsheetModel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SpreadsheetModel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SpreadsheetModel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SpreadsheetModel result;
      
      private SpreadsheetModel PrepareBuilder() {
        if (resultIsReadOnly) {
          SpreadsheetModel original = result;
          result = new SpreadsheetModel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SpreadsheetModel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.SpreadsheetModel.Descriptor; }
      }
      
      public override SpreadsheetModel DefaultInstanceForType {
        get { return global::sally.SpreadsheetModel.DefaultInstance; }
      }
      
      public override SpreadsheetModel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SpreadsheetModel) {
          return MergeFrom((SpreadsheetModel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SpreadsheetModel other) {
        if (other == global::sally.SpreadsheetModel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAsm) {
          MergeAsm(other.Asm);
        }
        if (other.ontomapping_.Count != 0) {
          result.ontomapping_.Add(other.ontomapping_);
        }
        if (other.sheetMapping_.Count != 0) {
          result.sheetMapping_.Add(other.sheetMapping_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_spreadsheetModelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _spreadsheetModelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.ModelDataMsg.Builder subBuilder = global::sally.ModelDataMsg.CreateBuilder();
              if (result.hasAsm) {
                subBuilder.MergeFrom(Asm);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Asm = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.ontomapping_, global::sally.SpreadsheetOntologyPair.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.sheetMapping_, global::sally.WorksheetIDPair.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAsm {
       get { return result.hasAsm; }
      }
      public global::sally.ModelDataMsg Asm {
        get { return result.Asm; }
        set { SetAsm(value); }
      }
      public Builder SetAsm(global::sally.ModelDataMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAsm = true;
        result.asm_ = value;
        return this;
      }
      public Builder SetAsm(global::sally.ModelDataMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAsm = true;
        result.asm_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAsm(global::sally.ModelDataMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAsm &&
            result.asm_ != global::sally.ModelDataMsg.DefaultInstance) {
            result.asm_ = global::sally.ModelDataMsg.CreateBuilder(result.asm_).MergeFrom(value).BuildPartial();
        } else {
          result.asm_ = value;
        }
        result.hasAsm = true;
        return this;
      }
      public Builder ClearAsm() {
        PrepareBuilder();
        result.hasAsm = false;
        result.asm_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.SpreadsheetOntologyPair> OntomappingList {
        get { return PrepareBuilder().ontomapping_; }
      }
      public int OntomappingCount {
        get { return result.OntomappingCount; }
      }
      public global::sally.SpreadsheetOntologyPair GetOntomapping(int index) {
        return result.GetOntomapping(index);
      }
      public Builder SetOntomapping(int index, global::sally.SpreadsheetOntologyPair value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ontomapping_[index] = value;
        return this;
      }
      public Builder SetOntomapping(int index, global::sally.SpreadsheetOntologyPair.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ontomapping_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOntomapping(global::sally.SpreadsheetOntologyPair value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ontomapping_.Add(value);
        return this;
      }
      public Builder AddOntomapping(global::sally.SpreadsheetOntologyPair.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ontomapping_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOntomapping(scg::IEnumerable<global::sally.SpreadsheetOntologyPair> values) {
        PrepareBuilder();
        result.ontomapping_.Add(values);
        return this;
      }
      public Builder ClearOntomapping() {
        PrepareBuilder();
        result.ontomapping_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.WorksheetIDPair> SheetMappingList {
        get { return PrepareBuilder().sheetMapping_; }
      }
      public int SheetMappingCount {
        get { return result.SheetMappingCount; }
      }
      public global::sally.WorksheetIDPair GetSheetMapping(int index) {
        return result.GetSheetMapping(index);
      }
      public Builder SetSheetMapping(int index, global::sally.WorksheetIDPair value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sheetMapping_[index] = value;
        return this;
      }
      public Builder SetSheetMapping(int index, global::sally.WorksheetIDPair.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sheetMapping_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSheetMapping(global::sally.WorksheetIDPair value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sheetMapping_.Add(value);
        return this;
      }
      public Builder AddSheetMapping(global::sally.WorksheetIDPair.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sheetMapping_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSheetMapping(scg::IEnumerable<global::sally.WorksheetIDPair> values) {
        PrepareBuilder();
        result.sheetMapping_.Add(values);
        return this;
      }
      public Builder ClearSheetMapping() {
        PrepareBuilder();
        result.sheetMapping_.Clear();
        return this;
      }
    }
    static SpreadsheetModel() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class WorksheetIDPair : pb::GeneratedMessage<WorksheetIDPair, WorksheetIDPair.Builder> {
    private WorksheetIDPair() { }
    private static readonly WorksheetIDPair defaultInstance = new WorksheetIDPair().MakeReadOnly();
    private static readonly string[] _worksheetIDPairFieldNames = new string[] { "id", "worksheet" };
    private static readonly uint[] _worksheetIDPairFieldTags = new uint[] { 16, 10 };
    public static WorksheetIDPair DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WorksheetIDPair DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WorksheetIDPair ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_WorksheetIDPair__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WorksheetIDPair, WorksheetIDPair.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_WorksheetIDPair__FieldAccessorTable; }
    }
    
    public const int WorksheetFieldNumber = 1;
    private bool hasWorksheet;
    private string worksheet_ = "";
    public bool HasWorksheet {
      get { return hasWorksheet; }
    }
    public string Worksheet {
      get { return worksheet_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorksheet) return false;
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _worksheetIDPairFieldNames;
      if (hasWorksheet) {
        output.WriteString(1, field_names[1], Worksheet);
      }
      if (hasId) {
        output.WriteInt32(2, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorksheet) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Worksheet);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WorksheetIDPair ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WorksheetIDPair ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WorksheetIDPair ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WorksheetIDPair ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WorksheetIDPair ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WorksheetIDPair ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WorksheetIDPair ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WorksheetIDPair ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WorksheetIDPair ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WorksheetIDPair ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WorksheetIDPair MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WorksheetIDPair prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<WorksheetIDPair, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WorksheetIDPair cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WorksheetIDPair result;
      
      private WorksheetIDPair PrepareBuilder() {
        if (resultIsReadOnly) {
          WorksheetIDPair original = result;
          result = new WorksheetIDPair();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WorksheetIDPair MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.WorksheetIDPair.Descriptor; }
      }
      
      public override WorksheetIDPair DefaultInstanceForType {
        get { return global::sally.WorksheetIDPair.DefaultInstance; }
      }
      
      public override WorksheetIDPair BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WorksheetIDPair) {
          return MergeFrom((WorksheetIDPair) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WorksheetIDPair other) {
        if (other == global::sally.WorksheetIDPair.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorksheet) {
          Worksheet = other.Worksheet;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_worksheetIDPairFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _worksheetIDPairFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorksheet = input.ReadString(ref result.worksheet_);
              break;
            }
            case 16: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorksheet {
        get { return result.hasWorksheet; }
      }
      public string Worksheet {
        get { return result.Worksheet; }
        set { SetWorksheet(value); }
      }
      public Builder SetWorksheet(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorksheet = true;
        result.worksheet_ = value;
        return this;
      }
      public Builder ClearWorksheet() {
        PrepareBuilder();
        result.hasWorksheet = false;
        result.worksheet_ = "";
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static WorksheetIDPair() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SpreadsheetOntologyPair : pb::GeneratedMessage<SpreadsheetOntologyPair, SpreadsheetOntologyPair.Builder> {
    private SpreadsheetOntologyPair() { }
    private static readonly SpreadsheetOntologyPair defaultInstance = new SpreadsheetOntologyPair().MakeReadOnly();
    private static readonly string[] _spreadsheetOntologyPairFieldNames = new string[] { "asmid", "uri" };
    private static readonly uint[] _spreadsheetOntologyPairFieldTags = new uint[] { 8, 18 };
    public static SpreadsheetOntologyPair DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SpreadsheetOntologyPair DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SpreadsheetOntologyPair ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_SpreadsheetOntologyPair__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SpreadsheetOntologyPair, SpreadsheetOntologyPair.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_SpreadsheetOntologyPair__FieldAccessorTable; }
    }
    
    public const int AsmidFieldNumber = 1;
    private bool hasAsmid;
    private int asmid_;
    public bool HasAsmid {
      get { return hasAsmid; }
    }
    public int Asmid {
      get { return asmid_; }
    }
    
    public const int UriFieldNumber = 2;
    private bool hasUri;
    private string uri_ = "";
    public bool HasUri {
      get { return hasUri; }
    }
    public string Uri {
      get { return uri_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAsmid) return false;
        if (!hasUri) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _spreadsheetOntologyPairFieldNames;
      if (hasAsmid) {
        output.WriteInt32(1, field_names[0], Asmid);
      }
      if (hasUri) {
        output.WriteString(2, field_names[1], Uri);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAsmid) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Asmid);
        }
        if (hasUri) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Uri);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SpreadsheetOntologyPair ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SpreadsheetOntologyPair ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SpreadsheetOntologyPair ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SpreadsheetOntologyPair ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SpreadsheetOntologyPair ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SpreadsheetOntologyPair ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SpreadsheetOntologyPair ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SpreadsheetOntologyPair ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SpreadsheetOntologyPair ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SpreadsheetOntologyPair ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SpreadsheetOntologyPair MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SpreadsheetOntologyPair prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SpreadsheetOntologyPair, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SpreadsheetOntologyPair cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SpreadsheetOntologyPair result;
      
      private SpreadsheetOntologyPair PrepareBuilder() {
        if (resultIsReadOnly) {
          SpreadsheetOntologyPair original = result;
          result = new SpreadsheetOntologyPair();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SpreadsheetOntologyPair MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.SpreadsheetOntologyPair.Descriptor; }
      }
      
      public override SpreadsheetOntologyPair DefaultInstanceForType {
        get { return global::sally.SpreadsheetOntologyPair.DefaultInstance; }
      }
      
      public override SpreadsheetOntologyPair BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SpreadsheetOntologyPair) {
          return MergeFrom((SpreadsheetOntologyPair) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SpreadsheetOntologyPair other) {
        if (other == global::sally.SpreadsheetOntologyPair.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAsmid) {
          Asmid = other.Asmid;
        }
        if (other.HasUri) {
          Uri = other.Uri;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_spreadsheetOntologyPairFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _spreadsheetOntologyPairFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAsmid = input.ReadInt32(ref result.asmid_);
              break;
            }
            case 18: {
              result.hasUri = input.ReadString(ref result.uri_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAsmid {
        get { return result.hasAsmid; }
      }
      public int Asmid {
        get { return result.Asmid; }
        set { SetAsmid(value); }
      }
      public Builder SetAsmid(int value) {
        PrepareBuilder();
        result.hasAsmid = true;
        result.asmid_ = value;
        return this;
      }
      public Builder ClearAsmid() {
        PrepareBuilder();
        result.hasAsmid = false;
        result.asmid_ = 0;
        return this;
      }
      
      public bool HasUri {
        get { return result.hasUri; }
      }
      public string Uri {
        get { return result.Uri; }
        set { SetUri(value); }
      }
      public Builder SetUri(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUri = true;
        result.uri_ = value;
        return this;
      }
      public Builder ClearUri() {
        PrepareBuilder();
        result.hasUri = false;
        result.uri_ = "";
        return this;
      }
    }
    static SpreadsheetOntologyPair() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MMTUri : pb::GeneratedMessage<MMTUri, MMTUri.Builder> {
    private MMTUri() { }
    private static readonly MMTUri defaultInstance = new MMTUri().MakeReadOnly();
    private static readonly string[] _mMTUriFieldNames = new string[] { "uri" };
    private static readonly uint[] _mMTUriFieldTags = new uint[] { 10 };
    public static MMTUri DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MMTUri DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MMTUri ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_MMTUri__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MMTUri, MMTUri.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_MMTUri__FieldAccessorTable; }
    }
    
    public const int UriFieldNumber = 1;
    private bool hasUri;
    private string uri_ = "";
    public bool HasUri {
      get { return hasUri; }
    }
    public string Uri {
      get { return uri_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUri) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mMTUriFieldNames;
      if (hasUri) {
        output.WriteString(1, field_names[0], Uri);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUri) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Uri);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MMTUri ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMTUri ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMTUri ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMTUri ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMTUri ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMTUri ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MMTUri ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MMTUri ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MMTUri ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMTUri ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MMTUri MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MMTUri prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MMTUri, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MMTUri cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MMTUri result;
      
      private MMTUri PrepareBuilder() {
        if (resultIsReadOnly) {
          MMTUri original = result;
          result = new MMTUri();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MMTUri MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.MMTUri.Descriptor; }
      }
      
      public override MMTUri DefaultInstanceForType {
        get { return global::sally.MMTUri.DefaultInstance; }
      }
      
      public override MMTUri BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MMTUri) {
          return MergeFrom((MMTUri) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MMTUri other) {
        if (other == global::sally.MMTUri.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUri) {
          Uri = other.Uri;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mMTUriFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mMTUriFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUri = input.ReadString(ref result.uri_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUri {
        get { return result.hasUri; }
      }
      public string Uri {
        get { return result.Uri; }
        set { SetUri(value); }
      }
      public Builder SetUri(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUri = true;
        result.uri_ = value;
        return this;
      }
      public Builder ClearUri() {
        PrepareBuilder();
        result.hasUri = false;
        result.uri_ = "";
        return this;
      }
    }
    static MMTUri() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class OntologyData : pb::GeneratedMessage<OntologyData, OntologyData.Builder> {
    private OntologyData() { }
    private static readonly OntologyData defaultInstance = new OntologyData().MakeReadOnly();
    private static readonly string[] _ontologyDataFieldNames = new string[] { "concepts", "relations" };
    private static readonly uint[] _ontologyDataFieldTags = new uint[] { 10, 18 };
    public static OntologyData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OntologyData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OntologyData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_OntologyData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OntologyData, OntologyData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_OntologyData__FieldAccessorTable; }
    }
    
    public const int ConceptsFieldNumber = 1;
    private pbc::PopsicleList<global::sally.OntologyConcept> concepts_ = new pbc::PopsicleList<global::sally.OntologyConcept>();
    public scg::IList<global::sally.OntologyConcept> ConceptsList {
      get { return concepts_; }
    }
    public int ConceptsCount {
      get { return concepts_.Count; }
    }
    public global::sally.OntologyConcept GetConcepts(int index) {
      return concepts_[index];
    }
    
    public const int RelationsFieldNumber = 2;
    private pbc::PopsicleList<global::sally.OntologyRelation> relations_ = new pbc::PopsicleList<global::sally.OntologyRelation>();
    public scg::IList<global::sally.OntologyRelation> RelationsList {
      get { return relations_; }
    }
    public int RelationsCount {
      get { return relations_.Count; }
    }
    public global::sally.OntologyRelation GetRelations(int index) {
      return relations_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::sally.OntologyConcept element in ConceptsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::sally.OntologyRelation element in RelationsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ontologyDataFieldNames;
      if (concepts_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], concepts_);
      }
      if (relations_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], relations_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.OntologyConcept element in ConceptsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::sally.OntologyRelation element in RelationsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OntologyData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OntologyData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OntologyData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OntologyData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OntologyData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OntologyData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OntologyData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OntologyData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OntologyData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OntologyData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OntologyData MakeReadOnly() {
      concepts_.MakeReadOnly();
      relations_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OntologyData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<OntologyData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OntologyData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OntologyData result;
      
      private OntologyData PrepareBuilder() {
        if (resultIsReadOnly) {
          OntologyData original = result;
          result = new OntologyData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OntologyData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.OntologyData.Descriptor; }
      }
      
      public override OntologyData DefaultInstanceForType {
        get { return global::sally.OntologyData.DefaultInstance; }
      }
      
      public override OntologyData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OntologyData) {
          return MergeFrom((OntologyData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OntologyData other) {
        if (other == global::sally.OntologyData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.concepts_.Count != 0) {
          result.concepts_.Add(other.concepts_);
        }
        if (other.relations_.Count != 0) {
          result.relations_.Add(other.relations_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ontologyDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ontologyDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.concepts_, global::sally.OntologyConcept.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.relations_, global::sally.OntologyRelation.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.OntologyConcept> ConceptsList {
        get { return PrepareBuilder().concepts_; }
      }
      public int ConceptsCount {
        get { return result.ConceptsCount; }
      }
      public global::sally.OntologyConcept GetConcepts(int index) {
        return result.GetConcepts(index);
      }
      public Builder SetConcepts(int index, global::sally.OntologyConcept value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.concepts_[index] = value;
        return this;
      }
      public Builder SetConcepts(int index, global::sally.OntologyConcept.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.concepts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddConcepts(global::sally.OntologyConcept value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.concepts_.Add(value);
        return this;
      }
      public Builder AddConcepts(global::sally.OntologyConcept.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.concepts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeConcepts(scg::IEnumerable<global::sally.OntologyConcept> values) {
        PrepareBuilder();
        result.concepts_.Add(values);
        return this;
      }
      public Builder ClearConcepts() {
        PrepareBuilder();
        result.concepts_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.OntologyRelation> RelationsList {
        get { return PrepareBuilder().relations_; }
      }
      public int RelationsCount {
        get { return result.RelationsCount; }
      }
      public global::sally.OntologyRelation GetRelations(int index) {
        return result.GetRelations(index);
      }
      public Builder SetRelations(int index, global::sally.OntologyRelation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.relations_[index] = value;
        return this;
      }
      public Builder SetRelations(int index, global::sally.OntologyRelation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.relations_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRelations(global::sally.OntologyRelation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.relations_.Add(value);
        return this;
      }
      public Builder AddRelations(global::sally.OntologyRelation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.relations_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRelations(scg::IEnumerable<global::sally.OntologyRelation> values) {
        PrepareBuilder();
        result.relations_.Add(values);
        return this;
      }
      public Builder ClearRelations() {
        PrepareBuilder();
        result.relations_.Clear();
        return this;
      }
    }
    static OntologyData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class OntologyConcept : pb::GeneratedMessage<OntologyConcept, OntologyConcept.Builder> {
    private OntologyConcept() { }
    private static readonly OntologyConcept defaultInstance = new OntologyConcept().MakeReadOnly();
    private static readonly string[] _ontologyConceptFieldNames = new string[] { "params", "uri" };
    private static readonly uint[] _ontologyConceptFieldTags = new uint[] { 18, 10 };
    public static OntologyConcept DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OntologyConcept DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OntologyConcept ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_OntologyConcept__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OntologyConcept, OntologyConcept.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_OntologyConcept__FieldAccessorTable; }
    }
    
    public const int UriFieldNumber = 1;
    private bool hasUri;
    private string uri_ = "";
    public bool HasUri {
      get { return hasUri; }
    }
    public string Uri {
      get { return uri_; }
    }
    
    public const int ParamsFieldNumber = 2;
    private pbc::PopsicleList<string> params_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParamsList {
      get { return pbc::Lists.AsReadOnly(params_); }
    }
    public int ParamsCount {
      get { return params_.Count; }
    }
    public string GetParams(int index) {
      return params_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUri) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ontologyConceptFieldNames;
      if (hasUri) {
        output.WriteString(1, field_names[1], Uri);
      }
      if (params_.Count > 0) {
        output.WriteStringArray(2, field_names[0], params_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUri) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Uri);
        }
        {
          int dataSize = 0;
          foreach (string element in ParamsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * params_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OntologyConcept ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OntologyConcept ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OntologyConcept ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OntologyConcept ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OntologyConcept ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OntologyConcept ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OntologyConcept ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OntologyConcept ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OntologyConcept ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OntologyConcept ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OntologyConcept MakeReadOnly() {
      params_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OntologyConcept prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<OntologyConcept, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OntologyConcept cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OntologyConcept result;
      
      private OntologyConcept PrepareBuilder() {
        if (resultIsReadOnly) {
          OntologyConcept original = result;
          result = new OntologyConcept();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OntologyConcept MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.OntologyConcept.Descriptor; }
      }
      
      public override OntologyConcept DefaultInstanceForType {
        get { return global::sally.OntologyConcept.DefaultInstance; }
      }
      
      public override OntologyConcept BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OntologyConcept) {
          return MergeFrom((OntologyConcept) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OntologyConcept other) {
        if (other == global::sally.OntologyConcept.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUri) {
          Uri = other.Uri;
        }
        if (other.params_.Count != 0) {
          result.params_.Add(other.params_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ontologyConceptFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ontologyConceptFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUri = input.ReadString(ref result.uri_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.params_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUri {
        get { return result.hasUri; }
      }
      public string Uri {
        get { return result.Uri; }
        set { SetUri(value); }
      }
      public Builder SetUri(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUri = true;
        result.uri_ = value;
        return this;
      }
      public Builder ClearUri() {
        PrepareBuilder();
        result.hasUri = false;
        result.uri_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> ParamsList {
        get { return PrepareBuilder().params_; }
      }
      public int ParamsCount {
        get { return result.ParamsCount; }
      }
      public string GetParams(int index) {
        return result.GetParams(index);
      }
      public Builder SetParams(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_[index] = value;
        return this;
      }
      public Builder AddParams(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_.Add(value);
        return this;
      }
      public Builder AddRangeParams(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.params_.Add(values);
        return this;
      }
      public Builder ClearParams() {
        PrepareBuilder();
        result.params_.Clear();
        return this;
      }
    }
    static OntologyConcept() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class OntologyRelation : pb::GeneratedMessage<OntologyRelation, OntologyRelation.Builder> {
    private OntologyRelation() { }
    private static readonly OntologyRelation defaultInstance = new OntologyRelation().MakeReadOnly();
    private static readonly string[] _ontologyRelationFieldNames = new string[] { "destConcept", "srcConcept", "uri" };
    private static readonly uint[] _ontologyRelationFieldTags = new uint[] { 26, 18, 10 };
    public static OntologyRelation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OntologyRelation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OntologyRelation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_OntologyRelation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OntologyRelation, OntologyRelation.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_OntologyRelation__FieldAccessorTable; }
    }
    
    public const int UriFieldNumber = 1;
    private bool hasUri;
    private string uri_ = "";
    public bool HasUri {
      get { return hasUri; }
    }
    public string Uri {
      get { return uri_; }
    }
    
    public const int SrcConceptFieldNumber = 2;
    private bool hasSrcConcept;
    private string srcConcept_ = "";
    public bool HasSrcConcept {
      get { return hasSrcConcept; }
    }
    public string SrcConcept {
      get { return srcConcept_; }
    }
    
    public const int DestConceptFieldNumber = 3;
    private bool hasDestConcept;
    private string destConcept_ = "";
    public bool HasDestConcept {
      get { return hasDestConcept; }
    }
    public string DestConcept {
      get { return destConcept_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUri) return false;
        if (!hasSrcConcept) return false;
        if (!hasDestConcept) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ontologyRelationFieldNames;
      if (hasUri) {
        output.WriteString(1, field_names[2], Uri);
      }
      if (hasSrcConcept) {
        output.WriteString(2, field_names[1], SrcConcept);
      }
      if (hasDestConcept) {
        output.WriteString(3, field_names[0], DestConcept);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUri) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Uri);
        }
        if (hasSrcConcept) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SrcConcept);
        }
        if (hasDestConcept) {
          size += pb::CodedOutputStream.ComputeStringSize(3, DestConcept);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OntologyRelation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OntologyRelation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OntologyRelation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OntologyRelation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OntologyRelation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OntologyRelation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OntologyRelation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OntologyRelation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OntologyRelation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OntologyRelation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OntologyRelation MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OntologyRelation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<OntologyRelation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OntologyRelation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OntologyRelation result;
      
      private OntologyRelation PrepareBuilder() {
        if (resultIsReadOnly) {
          OntologyRelation original = result;
          result = new OntologyRelation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OntologyRelation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.OntologyRelation.Descriptor; }
      }
      
      public override OntologyRelation DefaultInstanceForType {
        get { return global::sally.OntologyRelation.DefaultInstance; }
      }
      
      public override OntologyRelation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OntologyRelation) {
          return MergeFrom((OntologyRelation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OntologyRelation other) {
        if (other == global::sally.OntologyRelation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUri) {
          Uri = other.Uri;
        }
        if (other.HasSrcConcept) {
          SrcConcept = other.SrcConcept;
        }
        if (other.HasDestConcept) {
          DestConcept = other.DestConcept;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ontologyRelationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ontologyRelationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUri = input.ReadString(ref result.uri_);
              break;
            }
            case 18: {
              result.hasSrcConcept = input.ReadString(ref result.srcConcept_);
              break;
            }
            case 26: {
              result.hasDestConcept = input.ReadString(ref result.destConcept_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUri {
        get { return result.hasUri; }
      }
      public string Uri {
        get { return result.Uri; }
        set { SetUri(value); }
      }
      public Builder SetUri(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUri = true;
        result.uri_ = value;
        return this;
      }
      public Builder ClearUri() {
        PrepareBuilder();
        result.hasUri = false;
        result.uri_ = "";
        return this;
      }
      
      public bool HasSrcConcept {
        get { return result.hasSrcConcept; }
      }
      public string SrcConcept {
        get { return result.SrcConcept; }
        set { SetSrcConcept(value); }
      }
      public Builder SetSrcConcept(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSrcConcept = true;
        result.srcConcept_ = value;
        return this;
      }
      public Builder ClearSrcConcept() {
        PrepareBuilder();
        result.hasSrcConcept = false;
        result.srcConcept_ = "";
        return this;
      }
      
      public bool HasDestConcept {
        get { return result.hasDestConcept; }
      }
      public string DestConcept {
        get { return result.DestConcept; }
        set { SetDestConcept(value); }
      }
      public Builder SetDestConcept(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDestConcept = true;
        result.destConcept_ = value;
        return this;
      }
      public Builder ClearDestConcept() {
        PrepareBuilder();
        result.hasDestConcept = false;
        result.destConcept_ = "";
        return this;
      }
    }
    static OntologyRelation() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StringMap : pb::GeneratedMessage<StringMap, StringMap.Builder> {
    private StringMap() { }
    private static readonly StringMap defaultInstance = new StringMap().MakeReadOnly();
    private static readonly string[] _stringMapFieldNames = new string[] { "key", "value" };
    private static readonly uint[] _stringMapFieldTags = new uint[] { 10, 18 };
    public static StringMap DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StringMap DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StringMap ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_StringMap__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StringMap, StringMap.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_StringMap__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stringMapFieldNames;
      if (hasKey) {
        output.WriteString(1, field_names[0], Key);
      }
      if (hasValue) {
        output.WriteString(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Key);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StringMap ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StringMap ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StringMap ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StringMap ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StringMap ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StringMap ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StringMap ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StringMap ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StringMap ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StringMap ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StringMap MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StringMap prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StringMap, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StringMap cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StringMap result;
      
      private StringMap PrepareBuilder() {
        if (resultIsReadOnly) {
          StringMap original = result;
          result = new StringMap();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StringMap MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.StringMap.Descriptor; }
      }
      
      public override StringMap DefaultInstanceForType {
        get { return global::sally.StringMap.DefaultInstance; }
      }
      
      public override StringMap BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StringMap) {
          return MergeFrom((StringMap) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StringMap other) {
        if (other == global::sally.StringMap.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stringMapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stringMapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static StringMap() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class KnowledgeObject : pb::GeneratedMessage<KnowledgeObject, KnowledgeObject.Builder> {
    private KnowledgeObject() { }
    private static readonly KnowledgeObject defaultInstance = new KnowledgeObject().MakeReadOnly();
    private static readonly string[] _knowledgeObjectFieldNames = new string[] { "uri", "values" };
    private static readonly uint[] _knowledgeObjectFieldTags = new uint[] { 10, 18 };
    public static KnowledgeObject DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override KnowledgeObject DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override KnowledgeObject ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_KnowledgeObject__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<KnowledgeObject, KnowledgeObject.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_KnowledgeObject__FieldAccessorTable; }
    }
    
    public const int UriFieldNumber = 1;
    private bool hasUri;
    private string uri_ = "";
    public bool HasUri {
      get { return hasUri; }
    }
    public string Uri {
      get { return uri_; }
    }
    
    public const int ValuesFieldNumber = 2;
    private pbc::PopsicleList<global::sally.StringMap> values_ = new pbc::PopsicleList<global::sally.StringMap>();
    public scg::IList<global::sally.StringMap> ValuesList {
      get { return values_; }
    }
    public int ValuesCount {
      get { return values_.Count; }
    }
    public global::sally.StringMap GetValues(int index) {
      return values_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUri) return false;
        foreach (global::sally.StringMap element in ValuesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _knowledgeObjectFieldNames;
      if (hasUri) {
        output.WriteString(1, field_names[0], Uri);
      }
      if (values_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], values_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUri) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Uri);
        }
        foreach (global::sally.StringMap element in ValuesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static KnowledgeObject ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KnowledgeObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KnowledgeObject ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KnowledgeObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KnowledgeObject ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KnowledgeObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static KnowledgeObject ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static KnowledgeObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static KnowledgeObject ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KnowledgeObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private KnowledgeObject MakeReadOnly() {
      values_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(KnowledgeObject prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<KnowledgeObject, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(KnowledgeObject cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private KnowledgeObject result;
      
      private KnowledgeObject PrepareBuilder() {
        if (resultIsReadOnly) {
          KnowledgeObject original = result;
          result = new KnowledgeObject();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override KnowledgeObject MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.KnowledgeObject.Descriptor; }
      }
      
      public override KnowledgeObject DefaultInstanceForType {
        get { return global::sally.KnowledgeObject.DefaultInstance; }
      }
      
      public override KnowledgeObject BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is KnowledgeObject) {
          return MergeFrom((KnowledgeObject) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(KnowledgeObject other) {
        if (other == global::sally.KnowledgeObject.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUri) {
          Uri = other.Uri;
        }
        if (other.values_.Count != 0) {
          result.values_.Add(other.values_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_knowledgeObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _knowledgeObjectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUri = input.ReadString(ref result.uri_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.values_, global::sally.StringMap.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUri {
        get { return result.hasUri; }
      }
      public string Uri {
        get { return result.Uri; }
        set { SetUri(value); }
      }
      public Builder SetUri(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUri = true;
        result.uri_ = value;
        return this;
      }
      public Builder ClearUri() {
        PrepareBuilder();
        result.hasUri = false;
        result.uri_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.StringMap> ValuesList {
        get { return PrepareBuilder().values_; }
      }
      public int ValuesCount {
        get { return result.ValuesCount; }
      }
      public global::sally.StringMap GetValues(int index) {
        return result.GetValues(index);
      }
      public Builder SetValues(int index, global::sally.StringMap value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.values_[index] = value;
        return this;
      }
      public Builder SetValues(int index, global::sally.StringMap.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.values_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddValues(global::sally.StringMap value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.values_.Add(value);
        return this;
      }
      public Builder AddValues(global::sally.StringMap.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.values_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeValues(scg::IEnumerable<global::sally.StringMap> values) {
        PrepareBuilder();
        result.values_.Add(values);
        return this;
      }
      public Builder ClearValues() {
        PrepareBuilder();
        result.values_.Clear();
        return this;
      }
    }
    static KnowledgeObject() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class KnowledgeBase : pb::GeneratedMessage<KnowledgeBase, KnowledgeBase.Builder> {
    private KnowledgeBase() { }
    private static readonly KnowledgeBase defaultInstance = new KnowledgeBase().MakeReadOnly();
    private static readonly string[] _knowledgeBaseFieldNames = new string[] { "fileName", "objects" };
    private static readonly uint[] _knowledgeBaseFieldTags = new uint[] { 18, 10 };
    public static KnowledgeBase DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override KnowledgeBase DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override KnowledgeBase ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_KnowledgeBase__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<KnowledgeBase, KnowledgeBase.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_KnowledgeBase__FieldAccessorTable; }
    }
    
    public const int ObjectsFieldNumber = 1;
    private pbc::PopsicleList<global::sally.KnowledgeObject> objects_ = new pbc::PopsicleList<global::sally.KnowledgeObject>();
    public scg::IList<global::sally.KnowledgeObject> ObjectsList {
      get { return objects_; }
    }
    public int ObjectsCount {
      get { return objects_.Count; }
    }
    public global::sally.KnowledgeObject GetObjects(int index) {
      return objects_[index];
    }
    
    public const int FileNameFieldNumber = 2;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileName) return false;
        foreach (global::sally.KnowledgeObject element in ObjectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _knowledgeBaseFieldNames;
      if (objects_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], objects_);
      }
      if (hasFileName) {
        output.WriteString(2, field_names[0], FileName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.KnowledgeObject element in ObjectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FileName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static KnowledgeBase ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KnowledgeBase ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KnowledgeBase ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KnowledgeBase ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KnowledgeBase ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KnowledgeBase ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static KnowledgeBase ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static KnowledgeBase ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static KnowledgeBase ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KnowledgeBase ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private KnowledgeBase MakeReadOnly() {
      objects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(KnowledgeBase prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<KnowledgeBase, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(KnowledgeBase cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private KnowledgeBase result;
      
      private KnowledgeBase PrepareBuilder() {
        if (resultIsReadOnly) {
          KnowledgeBase original = result;
          result = new KnowledgeBase();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override KnowledgeBase MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.KnowledgeBase.Descriptor; }
      }
      
      public override KnowledgeBase DefaultInstanceForType {
        get { return global::sally.KnowledgeBase.DefaultInstance; }
      }
      
      public override KnowledgeBase BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is KnowledgeBase) {
          return MergeFrom((KnowledgeBase) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(KnowledgeBase other) {
        if (other == global::sally.KnowledgeBase.DefaultInstance) return this;
        PrepareBuilder();
        if (other.objects_.Count != 0) {
          result.objects_.Add(other.objects_);
        }
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_knowledgeBaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _knowledgeBaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.objects_, global::sally.KnowledgeObject.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.KnowledgeObject> ObjectsList {
        get { return PrepareBuilder().objects_; }
      }
      public int ObjectsCount {
        get { return result.ObjectsCount; }
      }
      public global::sally.KnowledgeObject GetObjects(int index) {
        return result.GetObjects(index);
      }
      public Builder SetObjects(int index, global::sally.KnowledgeObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.objects_[index] = value;
        return this;
      }
      public Builder SetObjects(int index, global::sally.KnowledgeObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.objects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddObjects(global::sally.KnowledgeObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.objects_.Add(value);
        return this;
      }
      public Builder AddObjects(global::sally.KnowledgeObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.objects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeObjects(scg::IEnumerable<global::sally.KnowledgeObject> values) {
        PrepareBuilder();
        result.objects_.Add(values);
        return this;
      }
      public Builder ClearObjects() {
        PrepareBuilder();
        result.objects_.Clear();
        return this;
      }
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
    }
    static KnowledgeBase() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class OntologyItem : pb::GeneratedMessage<OntologyItem, OntologyItem.Builder> {
    private OntologyItem() { }
    private static readonly OntologyItem defaultInstance = new OntologyItem().MakeReadOnly();
    private static readonly string[] _ontologyItemFieldNames = new string[] { "symbol", "theory" };
    private static readonly uint[] _ontologyItemFieldTags = new uint[] { 18, 10 };
    public static OntologyItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OntologyItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OntologyItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_OntologyItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OntologyItem, OntologyItem.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_OntologyItem__FieldAccessorTable; }
    }
    
    public const int TheoryFieldNumber = 1;
    private bool hasTheory;
    private string theory_ = "";
    public bool HasTheory {
      get { return hasTheory; }
    }
    public string Theory {
      get { return theory_; }
    }
    
    public const int SymbolFieldNumber = 2;
    private bool hasSymbol;
    private string symbol_ = "";
    public bool HasSymbol {
      get { return hasSymbol; }
    }
    public string Symbol {
      get { return symbol_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTheory) return false;
        if (!hasSymbol) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ontologyItemFieldNames;
      if (hasTheory) {
        output.WriteString(1, field_names[1], Theory);
      }
      if (hasSymbol) {
        output.WriteString(2, field_names[0], Symbol);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTheory) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Theory);
        }
        if (hasSymbol) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Symbol);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OntologyItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OntologyItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OntologyItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OntologyItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OntologyItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OntologyItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OntologyItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OntologyItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OntologyItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OntologyItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OntologyItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OntologyItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<OntologyItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OntologyItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OntologyItem result;
      
      private OntologyItem PrepareBuilder() {
        if (resultIsReadOnly) {
          OntologyItem original = result;
          result = new OntologyItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OntologyItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.OntologyItem.Descriptor; }
      }
      
      public override OntologyItem DefaultInstanceForType {
        get { return global::sally.OntologyItem.DefaultInstance; }
      }
      
      public override OntologyItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OntologyItem) {
          return MergeFrom((OntologyItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OntologyItem other) {
        if (other == global::sally.OntologyItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTheory) {
          Theory = other.Theory;
        }
        if (other.HasSymbol) {
          Symbol = other.Symbol;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ontologyItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ontologyItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTheory = input.ReadString(ref result.theory_);
              break;
            }
            case 18: {
              result.hasSymbol = input.ReadString(ref result.symbol_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTheory {
        get { return result.hasTheory; }
      }
      public string Theory {
        get { return result.Theory; }
        set { SetTheory(value); }
      }
      public Builder SetTheory(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTheory = true;
        result.theory_ = value;
        return this;
      }
      public Builder ClearTheory() {
        PrepareBuilder();
        result.hasTheory = false;
        result.theory_ = "";
        return this;
      }
      
      public bool HasSymbol {
        get { return result.hasSymbol; }
      }
      public string Symbol {
        get { return result.Symbol; }
        set { SetSymbol(value); }
      }
      public Builder SetSymbol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSymbol = true;
        result.symbol_ = value;
        return this;
      }
      public Builder ClearSymbol() {
        PrepareBuilder();
        result.hasSymbol = false;
        result.symbol_ = "";
        return this;
      }
    }
    static OntologyItem() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ResourceContext : pb::GeneratedMessage<ResourceContext, ResourceContext.Builder> {
    private ResourceContext() { }
    private static readonly ResourceContext defaultInstance = new ResourceContext().MakeReadOnly();
    private static readonly string[] _resourceContextFieldNames = new string[] { "actionId" };
    private static readonly uint[] _resourceContextFieldTags = new uint[] { 10 };
    public static ResourceContext DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ResourceContext DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ResourceContext ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ResourceContext__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ResourceContext, ResourceContext.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ResourceContext__FieldAccessorTable; }
    }
    
    public const int ActionIdFieldNumber = 1;
    private bool hasActionId;
    private string actionId_ = "";
    public bool HasActionId {
      get { return hasActionId; }
    }
    public string ActionId {
      get { return actionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasActionId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resourceContextFieldNames;
      if (hasActionId) {
        output.WriteString(1, field_names[0], ActionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasActionId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ActionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ResourceContext ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResourceContext ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResourceContext ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResourceContext ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResourceContext ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResourceContext ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ResourceContext ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ResourceContext ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ResourceContext ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResourceContext ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ResourceContext MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ResourceContext prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ResourceContext, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ResourceContext cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ResourceContext result;
      
      private ResourceContext PrepareBuilder() {
        if (resultIsReadOnly) {
          ResourceContext original = result;
          result = new ResourceContext();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ResourceContext MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ResourceContext.Descriptor; }
      }
      
      public override ResourceContext DefaultInstanceForType {
        get { return global::sally.ResourceContext.DefaultInstance; }
      }
      
      public override ResourceContext BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ResourceContext) {
          return MergeFrom((ResourceContext) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ResourceContext other) {
        if (other == global::sally.ResourceContext.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasActionId) {
          ActionId = other.ActionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resourceContextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resourceContextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasActionId = input.ReadString(ref result.actionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasActionId {
        get { return result.hasActionId; }
      }
      public string ActionId {
        get { return result.ActionId; }
        set { SetActionId(value); }
      }
      public Builder SetActionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionId = true;
        result.actionId_ = value;
        return this;
      }
      public Builder ClearActionId() {
        PrepareBuilder();
        result.hasActionId = false;
        result.actionId_ = "";
        return this;
      }
    }
    static ResourceContext() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ContextKnowledge : pb::GeneratedMessage<ContextKnowledge, ContextKnowledge.Builder> {
    private ContextKnowledge() { }
    private static readonly ContextKnowledge defaultInstance = new ContextKnowledge().MakeReadOnly();
    private static readonly string[] _contextKnowledgeFieldNames = new string[] { "context" };
    private static readonly uint[] _contextKnowledgeFieldTags = new uint[] { 10 };
    public static ContextKnowledge DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ContextKnowledge DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ContextKnowledge ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ContextKnowledge__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ContextKnowledge, ContextKnowledge.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ContextKnowledge__FieldAccessorTable; }
    }
    
    public const int ContextFieldNumber = 1;
    private pbc::PopsicleList<global::sally.OntologyItem> context_ = new pbc::PopsicleList<global::sally.OntologyItem>();
    public scg::IList<global::sally.OntologyItem> ContextList {
      get { return context_; }
    }
    public int ContextCount {
      get { return context_.Count; }
    }
    public global::sally.OntologyItem GetContext(int index) {
      return context_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::sally.OntologyItem element in ContextList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _contextKnowledgeFieldNames;
      if (context_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], context_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::sally.OntologyItem element in ContextList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ContextKnowledge ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContextKnowledge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContextKnowledge ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContextKnowledge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContextKnowledge ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContextKnowledge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ContextKnowledge ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ContextKnowledge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ContextKnowledge ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContextKnowledge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ContextKnowledge MakeReadOnly() {
      context_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ContextKnowledge prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ContextKnowledge, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ContextKnowledge cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ContextKnowledge result;
      
      private ContextKnowledge PrepareBuilder() {
        if (resultIsReadOnly) {
          ContextKnowledge original = result;
          result = new ContextKnowledge();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ContextKnowledge MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ContextKnowledge.Descriptor; }
      }
      
      public override ContextKnowledge DefaultInstanceForType {
        get { return global::sally.ContextKnowledge.DefaultInstance; }
      }
      
      public override ContextKnowledge BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ContextKnowledge) {
          return MergeFrom((ContextKnowledge) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ContextKnowledge other) {
        if (other == global::sally.ContextKnowledge.DefaultInstance) return this;
        PrepareBuilder();
        if (other.context_.Count != 0) {
          result.context_.Add(other.context_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_contextKnowledgeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _contextKnowledgeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.context_, global::sally.OntologyItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::sally.OntologyItem> ContextList {
        get { return PrepareBuilder().context_; }
      }
      public int ContextCount {
        get { return result.ContextCount; }
      }
      public global::sally.OntologyItem GetContext(int index) {
        return result.GetContext(index);
      }
      public Builder SetContext(int index, global::sally.OntologyItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.context_[index] = value;
        return this;
      }
      public Builder SetContext(int index, global::sally.OntologyItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.context_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContext(global::sally.OntologyItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.context_.Add(value);
        return this;
      }
      public Builder AddContext(global::sally.OntologyItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.context_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContext(scg::IEnumerable<global::sally.OntologyItem> values) {
        PrepareBuilder();
        result.context_.Add(values);
        return this;
      }
      public Builder ClearContext() {
        PrepareBuilder();
        result.context_.Clear();
        return this;
      }
    }
    static ContextKnowledge() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FormulaRequest : pb::GeneratedMessage<FormulaRequest, FormulaRequest.Builder> {
    private FormulaRequest() { }
    private static readonly FormulaRequest defaultInstance = new FormulaRequest().MakeReadOnly();
    private static readonly string[] _formulaRequestFieldNames = new string[] { "actionId" };
    private static readonly uint[] _formulaRequestFieldTags = new uint[] { 10 };
    public static FormulaRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FormulaRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FormulaRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FormulaRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FormulaRequest, FormulaRequest.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FormulaRequest__FieldAccessorTable; }
    }
    
    public const int ActionIdFieldNumber = 1;
    private bool hasActionId;
    private string actionId_ = "";
    public bool HasActionId {
      get { return hasActionId; }
    }
    public string ActionId {
      get { return actionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasActionId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _formulaRequestFieldNames;
      if (hasActionId) {
        output.WriteString(1, field_names[0], ActionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasActionId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ActionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FormulaRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FormulaRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FormulaRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FormulaRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FormulaRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FormulaRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FormulaRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FormulaRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FormulaRequest result;
      
      private FormulaRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          FormulaRequest original = result;
          result = new FormulaRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FormulaRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FormulaRequest.Descriptor; }
      }
      
      public override FormulaRequest DefaultInstanceForType {
        get { return global::sally.FormulaRequest.DefaultInstance; }
      }
      
      public override FormulaRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FormulaRequest) {
          return MergeFrom((FormulaRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FormulaRequest other) {
        if (other == global::sally.FormulaRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasActionId) {
          ActionId = other.ActionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_formulaRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _formulaRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasActionId = input.ReadString(ref result.actionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasActionId {
        get { return result.hasActionId; }
      }
      public string ActionId {
        get { return result.ActionId; }
        set { SetActionId(value); }
      }
      public Builder SetActionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionId = true;
        result.actionId_ = value;
        return this;
      }
      public Builder ClearActionId() {
        PrepareBuilder();
        result.hasActionId = false;
        result.actionId_ = "";
        return this;
      }
    }
    static FormulaRequest() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FormulaInfo : pb::GeneratedMessage<FormulaInfo, FormulaInfo.Builder> {
    private FormulaInfo() { }
    private static readonly FormulaInfo defaultInstance = new FormulaInfo().MakeReadOnly();
    private static readonly string[] _formulaInfoFieldNames = new string[] { "json" };
    private static readonly uint[] _formulaInfoFieldTags = new uint[] { 10 };
    public static FormulaInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FormulaInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FormulaInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FormulaInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FormulaInfo, FormulaInfo.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FormulaInfo__FieldAccessorTable; }
    }
    
    public const int JsonFieldNumber = 1;
    private bool hasJson;
    private string json_ = "";
    public bool HasJson {
      get { return hasJson; }
    }
    public string Json {
      get { return json_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasJson) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _formulaInfoFieldNames;
      if (hasJson) {
        output.WriteString(1, field_names[0], Json);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasJson) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Json);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FormulaInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FormulaInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FormulaInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FormulaInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FormulaInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FormulaInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FormulaInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FormulaInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FormulaInfo result;
      
      private FormulaInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          FormulaInfo original = result;
          result = new FormulaInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FormulaInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FormulaInfo.Descriptor; }
      }
      
      public override FormulaInfo DefaultInstanceForType {
        get { return global::sally.FormulaInfo.DefaultInstance; }
      }
      
      public override FormulaInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FormulaInfo) {
          return MergeFrom((FormulaInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FormulaInfo other) {
        if (other == global::sally.FormulaInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasJson) {
          Json = other.Json;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_formulaInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _formulaInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasJson = input.ReadString(ref result.json_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasJson {
        get { return result.hasJson; }
      }
      public string Json {
        get { return result.Json; }
        set { SetJson(value); }
      }
      public Builder SetJson(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJson = true;
        result.json_ = value;
        return this;
      }
      public Builder ClearJson() {
        PrepareBuilder();
        result.hasJson = false;
        result.json_ = "";
        return this;
      }
    }
    static FormulaInfo() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TheoNavigateTo : pb::GeneratedMessage<TheoNavigateTo, TheoNavigateTo.Builder> {
    private TheoNavigateTo() { }
    private static readonly TheoNavigateTo defaultInstance = new TheoNavigateTo().MakeReadOnly();
    private static readonly string[] _theoNavigateToFieldNames = new string[] { "actionId", "term" };
    private static readonly uint[] _theoNavigateToFieldTags = new uint[] { 18, 10 };
    public static TheoNavigateTo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TheoNavigateTo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TheoNavigateTo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_TheoNavigateTo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TheoNavigateTo, TheoNavigateTo.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_TheoNavigateTo__FieldAccessorTable; }
    }
    
    public const int TermFieldNumber = 1;
    private bool hasTerm;
    private global::sally.OntologyItem term_;
    public bool HasTerm {
      get { return hasTerm; }
    }
    public global::sally.OntologyItem Term {
      get { return term_ ?? global::sally.OntologyItem.DefaultInstance; }
    }
    
    public const int ActionIdFieldNumber = 2;
    private bool hasActionId;
    private string actionId_ = "";
    public bool HasActionId {
      get { return hasActionId; }
    }
    public string ActionId {
      get { return actionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTerm) return false;
        if (!hasActionId) return false;
        if (!Term.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _theoNavigateToFieldNames;
      if (hasTerm) {
        output.WriteMessage(1, field_names[1], Term);
      }
      if (hasActionId) {
        output.WriteString(2, field_names[0], ActionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTerm) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Term);
        }
        if (hasActionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ActionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TheoNavigateTo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TheoNavigateTo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TheoNavigateTo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TheoNavigateTo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TheoNavigateTo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TheoNavigateTo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TheoNavigateTo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TheoNavigateTo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TheoNavigateTo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TheoNavigateTo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TheoNavigateTo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TheoNavigateTo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TheoNavigateTo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TheoNavigateTo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TheoNavigateTo result;
      
      private TheoNavigateTo PrepareBuilder() {
        if (resultIsReadOnly) {
          TheoNavigateTo original = result;
          result = new TheoNavigateTo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TheoNavigateTo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.TheoNavigateTo.Descriptor; }
      }
      
      public override TheoNavigateTo DefaultInstanceForType {
        get { return global::sally.TheoNavigateTo.DefaultInstance; }
      }
      
      public override TheoNavigateTo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TheoNavigateTo) {
          return MergeFrom((TheoNavigateTo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TheoNavigateTo other) {
        if (other == global::sally.TheoNavigateTo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTerm) {
          MergeTerm(other.Term);
        }
        if (other.HasActionId) {
          ActionId = other.ActionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_theoNavigateToFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _theoNavigateToFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.OntologyItem.Builder subBuilder = global::sally.OntologyItem.CreateBuilder();
              if (result.hasTerm) {
                subBuilder.MergeFrom(Term);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Term = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasActionId = input.ReadString(ref result.actionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTerm {
       get { return result.hasTerm; }
      }
      public global::sally.OntologyItem Term {
        get { return result.Term; }
        set { SetTerm(value); }
      }
      public Builder SetTerm(global::sally.OntologyItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTerm = true;
        result.term_ = value;
        return this;
      }
      public Builder SetTerm(global::sally.OntologyItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTerm = true;
        result.term_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTerm(global::sally.OntologyItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTerm &&
            result.term_ != global::sally.OntologyItem.DefaultInstance) {
            result.term_ = global::sally.OntologyItem.CreateBuilder(result.term_).MergeFrom(value).BuildPartial();
        } else {
          result.term_ = value;
        }
        result.hasTerm = true;
        return this;
      }
      public Builder ClearTerm() {
        PrepareBuilder();
        result.hasTerm = false;
        result.term_ = null;
        return this;
      }
      
      public bool HasActionId {
        get { return result.hasActionId; }
      }
      public string ActionId {
        get { return result.ActionId; }
        set { SetActionId(value); }
      }
      public Builder SetActionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionId = true;
        result.actionId_ = value;
        return this;
      }
      public Builder ClearActionId() {
        PrepareBuilder();
        result.hasActionId = false;
        result.actionId_ = "";
        return this;
      }
    }
    static TheoNavigateTo() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Frame : pb::GeneratedMessage<Frame, Frame.Builder> {
    private Frame() { }
    private static readonly Frame defaultInstance = new Frame().MakeReadOnly();
    private static readonly string[] _frameFieldNames = new string[] { "actionId", "uid" };
    private static readonly uint[] _frameFieldTags = new uint[] { 18, 10 };
    public static Frame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Frame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Frame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_Frame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Frame, Frame.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_Frame__FieldAccessorTable; }
    }
    
    public const int UidFieldNumber = 1;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }
    
    public const int ActionIdFieldNumber = 2;
    private bool hasActionId;
    private string actionId_ = "";
    public bool HasActionId {
      get { return hasActionId; }
    }
    public string ActionId {
      get { return actionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUid) return false;
        if (!hasActionId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _frameFieldNames;
      if (hasUid) {
        output.WriteString(1, field_names[1], Uid);
      }
      if (hasActionId) {
        output.WriteString(2, field_names[0], ActionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUid) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Uid);
        }
        if (hasActionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ActionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Frame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Frame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Frame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Frame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Frame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Frame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Frame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Frame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Frame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Frame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Frame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Frame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Frame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Frame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Frame result;
      
      private Frame PrepareBuilder() {
        if (resultIsReadOnly) {
          Frame original = result;
          result = new Frame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Frame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.Frame.Descriptor; }
      }
      
      public override Frame DefaultInstanceForType {
        get { return global::sally.Frame.DefaultInstance; }
      }
      
      public override Frame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Frame) {
          return MergeFrom((Frame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Frame other) {
        if (other == global::sally.Frame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasActionId) {
          ActionId = other.ActionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_frameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _frameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 18: {
              result.hasActionId = input.ReadString(ref result.actionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
      
      public bool HasActionId {
        get { return result.hasActionId; }
      }
      public string ActionId {
        get { return result.ActionId; }
        set { SetActionId(value); }
      }
      public Builder SetActionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionId = true;
        result.actionId_ = value;
        return this;
      }
      public Builder ClearActionId() {
        PrepareBuilder();
        result.hasActionId = false;
        result.actionId_ = "";
        return this;
      }
    }
    static Frame() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServiceCall : pb::GeneratedMessage<ServiceCall, ServiceCall.Builder> {
    private ServiceCall() { }
    private static readonly ServiceCall defaultInstance = new ServiceCall().MakeReadOnly();
    private static readonly string[] _serviceCallFieldNames = new string[] { "uid" };
    private static readonly uint[] _serviceCallFieldTags = new uint[] { 10 };
    public static ServiceCall DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServiceCall DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServiceCall ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_ServiceCall__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServiceCall, ServiceCall.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_ServiceCall__FieldAccessorTable; }
    }
    
    public const int UidFieldNumber = 1;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serviceCallFieldNames;
      if (hasUid) {
        output.WriteString(1, field_names[0], Uid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUid) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Uid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServiceCall ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceCall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceCall ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceCall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceCall ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceCall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServiceCall ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServiceCall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServiceCall ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceCall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServiceCall MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServiceCall prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServiceCall, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServiceCall cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServiceCall result;
      
      private ServiceCall PrepareBuilder() {
        if (resultIsReadOnly) {
          ServiceCall original = result;
          result = new ServiceCall();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServiceCall MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.ServiceCall.Descriptor; }
      }
      
      public override ServiceCall DefaultInstanceForType {
        get { return global::sally.ServiceCall.DefaultInstance; }
      }
      
      public override ServiceCall BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServiceCall) {
          return MergeFrom((ServiceCall) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServiceCall other) {
        if (other == global::sally.ServiceCall.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUid) {
          Uid = other.Uid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceCallFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceCallFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
    }
    static ServiceCall() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FormulaCell : pb::GeneratedMessage<FormulaCell, FormulaCell.Builder> {
    private FormulaCell() { }
    private static readonly FormulaCell defaultInstance = new FormulaCell().MakeReadOnly();
    private static readonly string[] _formulaCellFieldNames = new string[] { "col", "formula", "row", "value" };
    private static readonly uint[] _formulaCellFieldTags = new uint[] { 32, 10, 24, 18 };
    public static FormulaCell DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FormulaCell DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FormulaCell ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FormulaCell__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FormulaCell, FormulaCell.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FormulaCell__FieldAccessorTable; }
    }
    
    public const int RowFieldNumber = 3;
    private bool hasRow;
    private int row_;
    public bool HasRow {
      get { return hasRow; }
    }
    public int Row {
      get { return row_; }
    }
    
    public const int ColFieldNumber = 4;
    private bool hasCol;
    private int col_;
    public bool HasCol {
      get { return hasCol; }
    }
    public int Col {
      get { return col_; }
    }
    
    public const int FormulaFieldNumber = 1;
    private bool hasFormula;
    private string formula_ = "";
    public bool HasFormula {
      get { return hasFormula; }
    }
    public string Formula {
      get { return formula_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRow) return false;
        if (!hasCol) return false;
        if (!hasFormula) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _formulaCellFieldNames;
      if (hasFormula) {
        output.WriteString(1, field_names[1], Formula);
      }
      if (hasValue) {
        output.WriteString(2, field_names[3], Value);
      }
      if (hasRow) {
        output.WriteInt32(3, field_names[2], Row);
      }
      if (hasCol) {
        output.WriteInt32(4, field_names[0], Col);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Row);
        }
        if (hasCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Col);
        }
        if (hasFormula) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Formula);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FormulaCell ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaCell ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaCell ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaCell ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaCell ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaCell ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FormulaCell ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FormulaCell ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FormulaCell ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaCell ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FormulaCell MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FormulaCell prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FormulaCell, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FormulaCell cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FormulaCell result;
      
      private FormulaCell PrepareBuilder() {
        if (resultIsReadOnly) {
          FormulaCell original = result;
          result = new FormulaCell();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FormulaCell MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FormulaCell.Descriptor; }
      }
      
      public override FormulaCell DefaultInstanceForType {
        get { return global::sally.FormulaCell.DefaultInstance; }
      }
      
      public override FormulaCell BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FormulaCell) {
          return MergeFrom((FormulaCell) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FormulaCell other) {
        if (other == global::sally.FormulaCell.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRow) {
          Row = other.Row;
        }
        if (other.HasCol) {
          Col = other.Col;
        }
        if (other.HasFormula) {
          Formula = other.Formula;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_formulaCellFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _formulaCellFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFormula = input.ReadString(ref result.formula_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
            case 24: {
              result.hasRow = input.ReadInt32(ref result.row_);
              break;
            }
            case 32: {
              result.hasCol = input.ReadInt32(ref result.col_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRow {
        get { return result.hasRow; }
      }
      public int Row {
        get { return result.Row; }
        set { SetRow(value); }
      }
      public Builder SetRow(int value) {
        PrepareBuilder();
        result.hasRow = true;
        result.row_ = value;
        return this;
      }
      public Builder ClearRow() {
        PrepareBuilder();
        result.hasRow = false;
        result.row_ = 0;
        return this;
      }
      
      public bool HasCol {
        get { return result.hasCol; }
      }
      public int Col {
        get { return result.Col; }
        set { SetCol(value); }
      }
      public Builder SetCol(int value) {
        PrepareBuilder();
        result.hasCol = true;
        result.col_ = value;
        return this;
      }
      public Builder ClearCol() {
        PrepareBuilder();
        result.hasCol = false;
        result.col_ = 0;
        return this;
      }
      
      public bool HasFormula {
        get { return result.hasFormula; }
      }
      public string Formula {
        get { return result.Formula; }
        set { SetFormula(value); }
      }
      public Builder SetFormula(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFormula = true;
        result.formula_ = value;
        return this;
      }
      public Builder ClearFormula() {
        PrepareBuilder();
        result.hasFormula = false;
        result.formula_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static FormulaCell() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FormulaSheetData : pb::GeneratedMessage<FormulaSheetData, FormulaSheetData.Builder> {
    private FormulaSheetData() { }
    private static readonly FormulaSheetData defaultInstance = new FormulaSheetData().MakeReadOnly();
    private static readonly string[] _formulaSheetDataFieldNames = new string[] { "cellinf", "endCol", "endRow", "sheetname", "startCol", "startRow" };
    private static readonly uint[] _formulaSheetDataFieldTags = new uint[] { 18, 48, 40, 10, 32, 24 };
    public static FormulaSheetData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FormulaSheetData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FormulaSheetData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FormulaSheetData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FormulaSheetData, FormulaSheetData.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FormulaSheetData__FieldAccessorTable; }
    }
    
    public const int SheetnameFieldNumber = 1;
    private bool hasSheetname;
    private string sheetname_ = "";
    public bool HasSheetname {
      get { return hasSheetname; }
    }
    public string Sheetname {
      get { return sheetname_; }
    }
    
    public const int StartRowFieldNumber = 3;
    private bool hasStartRow;
    private int startRow_;
    public bool HasStartRow {
      get { return hasStartRow; }
    }
    public int StartRow {
      get { return startRow_; }
    }
    
    public const int StartColFieldNumber = 4;
    private bool hasStartCol;
    private int startCol_;
    public bool HasStartCol {
      get { return hasStartCol; }
    }
    public int StartCol {
      get { return startCol_; }
    }
    
    public const int EndRowFieldNumber = 5;
    private bool hasEndRow;
    private int endRow_;
    public bool HasEndRow {
      get { return hasEndRow; }
    }
    public int EndRow {
      get { return endRow_; }
    }
    
    public const int EndColFieldNumber = 6;
    private bool hasEndCol;
    private int endCol_;
    public bool HasEndCol {
      get { return hasEndCol; }
    }
    public int EndCol {
      get { return endCol_; }
    }
    
    public const int CellinfFieldNumber = 2;
    private pbc::PopsicleList<global::sally.FormulaCell> cellinf_ = new pbc::PopsicleList<global::sally.FormulaCell>();
    public scg::IList<global::sally.FormulaCell> CellinfList {
      get { return cellinf_; }
    }
    public int CellinfCount {
      get { return cellinf_.Count; }
    }
    public global::sally.FormulaCell GetCellinf(int index) {
      return cellinf_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSheetname) return false;
        if (!hasStartRow) return false;
        if (!hasStartCol) return false;
        if (!hasEndRow) return false;
        if (!hasEndCol) return false;
        foreach (global::sally.FormulaCell element in CellinfList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _formulaSheetDataFieldNames;
      if (hasSheetname) {
        output.WriteString(1, field_names[3], Sheetname);
      }
      if (cellinf_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], cellinf_);
      }
      if (hasStartRow) {
        output.WriteInt32(3, field_names[5], StartRow);
      }
      if (hasStartCol) {
        output.WriteInt32(4, field_names[4], StartCol);
      }
      if (hasEndRow) {
        output.WriteInt32(5, field_names[2], EndRow);
      }
      if (hasEndCol) {
        output.WriteInt32(6, field_names[1], EndCol);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSheetname) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Sheetname);
        }
        if (hasStartRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, StartRow);
        }
        if (hasStartCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, StartCol);
        }
        if (hasEndRow) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, EndRow);
        }
        if (hasEndCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, EndCol);
        }
        foreach (global::sally.FormulaCell element in CellinfList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FormulaSheetData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaSheetData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaSheetData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaSheetData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaSheetData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaSheetData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FormulaSheetData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FormulaSheetData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FormulaSheetData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaSheetData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FormulaSheetData MakeReadOnly() {
      cellinf_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FormulaSheetData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FormulaSheetData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FormulaSheetData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FormulaSheetData result;
      
      private FormulaSheetData PrepareBuilder() {
        if (resultIsReadOnly) {
          FormulaSheetData original = result;
          result = new FormulaSheetData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FormulaSheetData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FormulaSheetData.Descriptor; }
      }
      
      public override FormulaSheetData DefaultInstanceForType {
        get { return global::sally.FormulaSheetData.DefaultInstance; }
      }
      
      public override FormulaSheetData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FormulaSheetData) {
          return MergeFrom((FormulaSheetData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FormulaSheetData other) {
        if (other == global::sally.FormulaSheetData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSheetname) {
          Sheetname = other.Sheetname;
        }
        if (other.HasStartRow) {
          StartRow = other.StartRow;
        }
        if (other.HasStartCol) {
          StartCol = other.StartCol;
        }
        if (other.HasEndRow) {
          EndRow = other.EndRow;
        }
        if (other.HasEndCol) {
          EndCol = other.EndCol;
        }
        if (other.cellinf_.Count != 0) {
          result.cellinf_.Add(other.cellinf_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_formulaSheetDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _formulaSheetDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSheetname = input.ReadString(ref result.sheetname_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.cellinf_, global::sally.FormulaCell.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasStartRow = input.ReadInt32(ref result.startRow_);
              break;
            }
            case 32: {
              result.hasStartCol = input.ReadInt32(ref result.startCol_);
              break;
            }
            case 40: {
              result.hasEndRow = input.ReadInt32(ref result.endRow_);
              break;
            }
            case 48: {
              result.hasEndCol = input.ReadInt32(ref result.endCol_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSheetname {
        get { return result.hasSheetname; }
      }
      public string Sheetname {
        get { return result.Sheetname; }
        set { SetSheetname(value); }
      }
      public Builder SetSheetname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSheetname = true;
        result.sheetname_ = value;
        return this;
      }
      public Builder ClearSheetname() {
        PrepareBuilder();
        result.hasSheetname = false;
        result.sheetname_ = "";
        return this;
      }
      
      public bool HasStartRow {
        get { return result.hasStartRow; }
      }
      public int StartRow {
        get { return result.StartRow; }
        set { SetStartRow(value); }
      }
      public Builder SetStartRow(int value) {
        PrepareBuilder();
        result.hasStartRow = true;
        result.startRow_ = value;
        return this;
      }
      public Builder ClearStartRow() {
        PrepareBuilder();
        result.hasStartRow = false;
        result.startRow_ = 0;
        return this;
      }
      
      public bool HasStartCol {
        get { return result.hasStartCol; }
      }
      public int StartCol {
        get { return result.StartCol; }
        set { SetStartCol(value); }
      }
      public Builder SetStartCol(int value) {
        PrepareBuilder();
        result.hasStartCol = true;
        result.startCol_ = value;
        return this;
      }
      public Builder ClearStartCol() {
        PrepareBuilder();
        result.hasStartCol = false;
        result.startCol_ = 0;
        return this;
      }
      
      public bool HasEndRow {
        get { return result.hasEndRow; }
      }
      public int EndRow {
        get { return result.EndRow; }
        set { SetEndRow(value); }
      }
      public Builder SetEndRow(int value) {
        PrepareBuilder();
        result.hasEndRow = true;
        result.endRow_ = value;
        return this;
      }
      public Builder ClearEndRow() {
        PrepareBuilder();
        result.hasEndRow = false;
        result.endRow_ = 0;
        return this;
      }
      
      public bool HasEndCol {
        get { return result.hasEndCol; }
      }
      public int EndCol {
        get { return result.EndCol; }
        set { SetEndCol(value); }
      }
      public Builder SetEndCol(int value) {
        PrepareBuilder();
        result.hasEndCol = true;
        result.endCol_ = value;
        return this;
      }
      public Builder ClearEndCol() {
        PrepareBuilder();
        result.hasEndCol = false;
        result.endCol_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.FormulaCell> CellinfList {
        get { return PrepareBuilder().cellinf_; }
      }
      public int CellinfCount {
        get { return result.CellinfCount; }
      }
      public global::sally.FormulaCell GetCellinf(int index) {
        return result.GetCellinf(index);
      }
      public Builder SetCellinf(int index, global::sally.FormulaCell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cellinf_[index] = value;
        return this;
      }
      public Builder SetCellinf(int index, global::sally.FormulaCell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cellinf_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCellinf(global::sally.FormulaCell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cellinf_.Add(value);
        return this;
      }
      public Builder AddCellinf(global::sally.FormulaCell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cellinf_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCellinf(scg::IEnumerable<global::sally.FormulaCell> values) {
        PrepareBuilder();
        result.cellinf_.Add(values);
        return this;
      }
      public Builder ClearCellinf() {
        PrepareBuilder();
        result.cellinf_.Clear();
        return this;
      }
    }
    static FormulaSheetData() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FormulaMap : pb::GeneratedMessage<FormulaMap, FormulaMap.Builder> {
    private FormulaMap() { }
    private static readonly FormulaMap defaultInstance = new FormulaMap().MakeReadOnly();
    private static readonly string[] _formulaMapFieldNames = new string[] { "filename", "sheets" };
    private static readonly uint[] _formulaMapFieldTags = new uint[] { 10, 18 };
    public static FormulaMap DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FormulaMap DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FormulaMap ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FormulaMap__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FormulaMap, FormulaMap.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FormulaMap__FieldAccessorTable; }
    }
    
    public const int FilenameFieldNumber = 1;
    private bool hasFilename;
    private string filename_ = "";
    public bool HasFilename {
      get { return hasFilename; }
    }
    public string Filename {
      get { return filename_; }
    }
    
    public const int SheetsFieldNumber = 2;
    private pbc::PopsicleList<global::sally.FormulaSheetData> sheets_ = new pbc::PopsicleList<global::sally.FormulaSheetData>();
    public scg::IList<global::sally.FormulaSheetData> SheetsList {
      get { return sheets_; }
    }
    public int SheetsCount {
      get { return sheets_.Count; }
    }
    public global::sally.FormulaSheetData GetSheets(int index) {
      return sheets_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFilename) return false;
        foreach (global::sally.FormulaSheetData element in SheetsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _formulaMapFieldNames;
      if (hasFilename) {
        output.WriteString(1, field_names[0], Filename);
      }
      if (sheets_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], sheets_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFilename) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Filename);
        }
        foreach (global::sally.FormulaSheetData element in SheetsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FormulaMap ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaMap ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaMap ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FormulaMap ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FormulaMap ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaMap ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FormulaMap ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FormulaMap ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FormulaMap ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FormulaMap ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FormulaMap MakeReadOnly() {
      sheets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FormulaMap prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FormulaMap, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FormulaMap cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FormulaMap result;
      
      private FormulaMap PrepareBuilder() {
        if (resultIsReadOnly) {
          FormulaMap original = result;
          result = new FormulaMap();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FormulaMap MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FormulaMap.Descriptor; }
      }
      
      public override FormulaMap DefaultInstanceForType {
        get { return global::sally.FormulaMap.DefaultInstance; }
      }
      
      public override FormulaMap BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FormulaMap) {
          return MergeFrom((FormulaMap) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FormulaMap other) {
        if (other == global::sally.FormulaMap.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFilename) {
          Filename = other.Filename;
        }
        if (other.sheets_.Count != 0) {
          result.sheets_.Add(other.sheets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_formulaMapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _formulaMapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFilename = input.ReadString(ref result.filename_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.sheets_, global::sally.FormulaSheetData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFilename {
        get { return result.hasFilename; }
      }
      public string Filename {
        get { return result.Filename; }
        set { SetFilename(value); }
      }
      public Builder SetFilename(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilename = true;
        result.filename_ = value;
        return this;
      }
      public Builder ClearFilename() {
        PrepareBuilder();
        result.hasFilename = false;
        result.filename_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.FormulaSheetData> SheetsList {
        get { return PrepareBuilder().sheets_; }
      }
      public int SheetsCount {
        get { return result.SheetsCount; }
      }
      public global::sally.FormulaSheetData GetSheets(int index) {
        return result.GetSheets(index);
      }
      public Builder SetSheets(int index, global::sally.FormulaSheetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sheets_[index] = value;
        return this;
      }
      public Builder SetSheets(int index, global::sally.FormulaSheetData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sheets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSheets(global::sally.FormulaSheetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sheets_.Add(value);
        return this;
      }
      public Builder AddSheets(global::sally.FormulaSheetData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sheets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSheets(scg::IEnumerable<global::sally.FormulaSheetData> values) {
        PrepareBuilder();
        result.sheets_.Add(values);
        return this;
      }
      public Builder ClearSheets() {
        PrepareBuilder();
        result.sheets_.Clear();
        return this;
      }
    }
    static FormulaMap() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RequestASM : pb::GeneratedMessage<RequestASM, RequestASM.Builder> {
    private RequestASM() { }
    private static readonly RequestASM defaultInstance = new RequestASM().MakeReadOnly();
    private static readonly string[] _requestASMFieldNames = new string[] { "filename" };
    private static readonly uint[] _requestASMFieldTags = new uint[] { 10 };
    public static RequestASM DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RequestASM DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RequestASM ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_RequestASM__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RequestASM, RequestASM.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_RequestASM__FieldAccessorTable; }
    }
    
    public const int FilenameFieldNumber = 1;
    private bool hasFilename;
    private string filename_ = "";
    public bool HasFilename {
      get { return hasFilename; }
    }
    public string Filename {
      get { return filename_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFilename) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestASMFieldNames;
      if (hasFilename) {
        output.WriteString(1, field_names[0], Filename);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFilename) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Filename);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RequestASM ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestASM ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestASM ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestASM ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestASM ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestASM ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RequestASM ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RequestASM ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RequestASM ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestASM ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RequestASM MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RequestASM prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RequestASM, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RequestASM cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RequestASM result;
      
      private RequestASM PrepareBuilder() {
        if (resultIsReadOnly) {
          RequestASM original = result;
          result = new RequestASM();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RequestASM MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.RequestASM.Descriptor; }
      }
      
      public override RequestASM DefaultInstanceForType {
        get { return global::sally.RequestASM.DefaultInstance; }
      }
      
      public override RequestASM BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RequestASM) {
          return MergeFrom((RequestASM) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RequestASM other) {
        if (other == global::sally.RequestASM.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFilename) {
          Filename = other.Filename;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestASMFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestASMFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFilename = input.ReadString(ref result.filename_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFilename {
        get { return result.hasFilename; }
      }
      public string Filename {
        get { return result.Filename; }
        set { SetFilename(value); }
      }
      public Builder SetFilename(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilename = true;
        result.filename_ = value;
        return this;
      }
      public Builder ClearFilename() {
        PrepareBuilder();
        result.hasFilename = false;
        result.filename_ = "";
        return this;
      }
    }
    static RequestASM() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SaveASM : pb::GeneratedMessage<SaveASM, SaveASM.Builder> {
    private SaveASM() { }
    private static readonly SaveASM defaultInstance = new SaveASM().MakeReadOnly();
    private static readonly string[] _saveASMFieldNames = new string[] { "semanticData" };
    private static readonly uint[] _saveASMFieldTags = new uint[] { 10 };
    public static SaveASM DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SaveASM DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SaveASM ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_SaveASM__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SaveASM, SaveASM.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_SaveASM__FieldAccessorTable; }
    }
    
    public const int SemanticDataFieldNumber = 1;
    private bool hasSemanticData;
    private string semanticData_ = "";
    public bool HasSemanticData {
      get { return hasSemanticData; }
    }
    public string SemanticData {
      get { return semanticData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSemanticData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _saveASMFieldNames;
      if (hasSemanticData) {
        output.WriteString(1, field_names[0], SemanticData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSemanticData) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SemanticData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SaveASM ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SaveASM ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SaveASM ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SaveASM ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SaveASM ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SaveASM ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SaveASM ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SaveASM ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SaveASM ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SaveASM ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SaveASM MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SaveASM prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SaveASM, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SaveASM cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SaveASM result;
      
      private SaveASM PrepareBuilder() {
        if (resultIsReadOnly) {
          SaveASM original = result;
          result = new SaveASM();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SaveASM MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.SaveASM.Descriptor; }
      }
      
      public override SaveASM DefaultInstanceForType {
        get { return global::sally.SaveASM.DefaultInstance; }
      }
      
      public override SaveASM BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SaveASM) {
          return MergeFrom((SaveASM) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SaveASM other) {
        if (other == global::sally.SaveASM.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSemanticData) {
          SemanticData = other.SemanticData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_saveASMFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _saveASMFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSemanticData = input.ReadString(ref result.semanticData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSemanticData {
        get { return result.hasSemanticData; }
      }
      public string SemanticData {
        get { return result.SemanticData; }
        set { SetSemanticData(value); }
      }
      public Builder SetSemanticData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSemanticData = true;
        result.semanticData_ = value;
        return this;
      }
      public Builder ClearSemanticData() {
        PrepareBuilder();
        result.hasSemanticData = false;
        result.semanticData_ = "";
        return this;
      }
    }
    static SaveASM() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FileRef : pb::GeneratedMessage<FileRef, FileRef.Builder> {
    private FileRef() { }
    private static readonly FileRef defaultInstance = new FileRef().MakeReadOnly();
    private static readonly string[] _fileRefFieldNames = new string[] { "mime", "resourceURI" };
    private static readonly uint[] _fileRefFieldTags = new uint[] { 18, 10 };
    public static FileRef DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FileRef DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FileRef ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FileRef__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FileRef, FileRef.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FileRef__FieldAccessorTable; }
    }
    
    public const int ResourceURIFieldNumber = 1;
    private bool hasResourceURI;
    private string resourceURI_ = "";
    public bool HasResourceURI {
      get { return hasResourceURI; }
    }
    public string ResourceURI {
      get { return resourceURI_; }
    }
    
    public const int MimeFieldNumber = 2;
    private bool hasMime;
    private string mime_ = "";
    public bool HasMime {
      get { return hasMime; }
    }
    public string Mime {
      get { return mime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResourceURI) return false;
        if (!hasMime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fileRefFieldNames;
      if (hasResourceURI) {
        output.WriteString(1, field_names[1], ResourceURI);
      }
      if (hasMime) {
        output.WriteString(2, field_names[0], Mime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasResourceURI) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ResourceURI);
        }
        if (hasMime) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Mime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FileRef ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileRef ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileRef ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileRef ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileRef ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileRef ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FileRef ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FileRef ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FileRef ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileRef ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FileRef MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FileRef prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FileRef, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FileRef cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FileRef result;
      
      private FileRef PrepareBuilder() {
        if (resultIsReadOnly) {
          FileRef original = result;
          result = new FileRef();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FileRef MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FileRef.Descriptor; }
      }
      
      public override FileRef DefaultInstanceForType {
        get { return global::sally.FileRef.DefaultInstance; }
      }
      
      public override FileRef BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FileRef) {
          return MergeFrom((FileRef) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FileRef other) {
        if (other == global::sally.FileRef.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResourceURI) {
          ResourceURI = other.ResourceURI;
        }
        if (other.HasMime) {
          Mime = other.Mime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fileRefFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fileRefFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasResourceURI = input.ReadString(ref result.resourceURI_);
              break;
            }
            case 18: {
              result.hasMime = input.ReadString(ref result.mime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResourceURI {
        get { return result.hasResourceURI; }
      }
      public string ResourceURI {
        get { return result.ResourceURI; }
        set { SetResourceURI(value); }
      }
      public Builder SetResourceURI(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResourceURI = true;
        result.resourceURI_ = value;
        return this;
      }
      public Builder ClearResourceURI() {
        PrepareBuilder();
        result.hasResourceURI = false;
        result.resourceURI_ = "";
        return this;
      }
      
      public bool HasMime {
        get { return result.hasMime; }
      }
      public string Mime {
        get { return result.Mime; }
        set { SetMime(value); }
      }
      public Builder SetMime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMime = true;
        result.mime_ = value;
        return this;
      }
      public Builder ClearMime() {
        PrepareBuilder();
        result.hasMime = false;
        result.mime_ = "";
        return this;
      }
    }
    static FileRef() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FileContents : pb::GeneratedMessage<FileContents, FileContents.Builder> {
    private FileContents() { }
    private static readonly FileContents defaultInstance = new FileContents().MakeReadOnly();
    private static readonly string[] _fileContentsFieldNames = new string[] { "contents", "file" };
    private static readonly uint[] _fileContentsFieldTags = new uint[] { 18, 10 };
    public static FileContents DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FileContents DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FileContents ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_FileContents__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FileContents, FileContents.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_FileContents__FieldAccessorTable; }
    }
    
    public const int FileFieldNumber = 1;
    private bool hasFile;
    private global::sally.FileRef file_;
    public bool HasFile {
      get { return hasFile; }
    }
    public global::sally.FileRef File {
      get { return file_ ?? global::sally.FileRef.DefaultInstance; }
    }
    
    public const int ContentsFieldNumber = 2;
    private bool hasContents;
    private string contents_ = "";
    public bool HasContents {
      get { return hasContents; }
    }
    public string Contents {
      get { return contents_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFile) return false;
        if (!hasContents) return false;
        if (!File.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fileContentsFieldNames;
      if (hasFile) {
        output.WriteMessage(1, field_names[1], File);
      }
      if (hasContents) {
        output.WriteString(2, field_names[0], Contents);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFile) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, File);
        }
        if (hasContents) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Contents);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FileContents ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileContents ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileContents ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileContents ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileContents ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileContents ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FileContents ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FileContents ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FileContents ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileContents ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FileContents MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FileContents prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FileContents, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FileContents cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FileContents result;
      
      private FileContents PrepareBuilder() {
        if (resultIsReadOnly) {
          FileContents original = result;
          result = new FileContents();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FileContents MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.FileContents.Descriptor; }
      }
      
      public override FileContents DefaultInstanceForType {
        get { return global::sally.FileContents.DefaultInstance; }
      }
      
      public override FileContents BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FileContents) {
          return MergeFrom((FileContents) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FileContents other) {
        if (other == global::sally.FileContents.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFile) {
          MergeFile(other.File);
        }
        if (other.HasContents) {
          Contents = other.Contents;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fileContentsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fileContentsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.FileRef.Builder subBuilder = global::sally.FileRef.CreateBuilder();
              if (result.hasFile) {
                subBuilder.MergeFrom(File);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              File = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasContents = input.ReadString(ref result.contents_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFile {
       get { return result.hasFile; }
      }
      public global::sally.FileRef File {
        get { return result.File; }
        set { SetFile(value); }
      }
      public Builder SetFile(global::sally.FileRef value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFile = true;
        result.file_ = value;
        return this;
      }
      public Builder SetFile(global::sally.FileRef.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFile = true;
        result.file_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFile(global::sally.FileRef value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFile &&
            result.file_ != global::sally.FileRef.DefaultInstance) {
            result.file_ = global::sally.FileRef.CreateBuilder(result.file_).MergeFrom(value).BuildPartial();
        } else {
          result.file_ = value;
        }
        result.hasFile = true;
        return this;
      }
      public Builder ClearFile() {
        PrepareBuilder();
        result.hasFile = false;
        result.file_ = null;
        return this;
      }
      
      public bool HasContents {
        get { return result.hasContents; }
      }
      public string Contents {
        get { return result.Contents; }
        set { SetContents(value); }
      }
      public Builder SetContents(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContents = true;
        result.contents_ = value;
        return this;
      }
      public Builder ClearContents() {
        PrepareBuilder();
        result.hasContents = false;
        result.contents_ = "";
        return this;
      }
    }
    static FileContents() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TextPosition : pb::GeneratedMessage<TextPosition, TextPosition.Builder> {
    private TextPosition() { }
    private static readonly TextPosition defaultInstance = new TextPosition().MakeReadOnly();
    private static readonly string[] _textPositionFieldNames = new string[] { "col", "line" };
    private static readonly uint[] _textPositionFieldTags = new uint[] { 16, 8 };
    public static TextPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TextPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TextPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_TextPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TextPosition, TextPosition.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_TextPosition__FieldAccessorTable; }
    }
    
    public const int LineFieldNumber = 1;
    private bool hasLine;
    private int line_;
    public bool HasLine {
      get { return hasLine; }
    }
    public int Line {
      get { return line_; }
    }
    
    public const int ColFieldNumber = 2;
    private bool hasCol;
    private int col_;
    public bool HasCol {
      get { return hasCol; }
    }
    public int Col {
      get { return col_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLine) return false;
        if (!hasCol) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _textPositionFieldNames;
      if (hasLine) {
        output.WriteInt32(1, field_names[1], Line);
      }
      if (hasCol) {
        output.WriteInt32(2, field_names[0], Col);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLine) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Line);
        }
        if (hasCol) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Col);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TextPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TextPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TextPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TextPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TextPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TextPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TextPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TextPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TextPosition result;
      
      private TextPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          TextPosition original = result;
          result = new TextPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TextPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.TextPosition.Descriptor; }
      }
      
      public override TextPosition DefaultInstanceForType {
        get { return global::sally.TextPosition.DefaultInstance; }
      }
      
      public override TextPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TextPosition) {
          return MergeFrom((TextPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TextPosition other) {
        if (other == global::sally.TextPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLine) {
          Line = other.Line;
        }
        if (other.HasCol) {
          Col = other.Col;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_textPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _textPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLine = input.ReadInt32(ref result.line_);
              break;
            }
            case 16: {
              result.hasCol = input.ReadInt32(ref result.col_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLine {
        get { return result.hasLine; }
      }
      public int Line {
        get { return result.Line; }
        set { SetLine(value); }
      }
      public Builder SetLine(int value) {
        PrepareBuilder();
        result.hasLine = true;
        result.line_ = value;
        return this;
      }
      public Builder ClearLine() {
        PrepareBuilder();
        result.hasLine = false;
        result.line_ = 0;
        return this;
      }
      
      public bool HasCol {
        get { return result.hasCol; }
      }
      public int Col {
        get { return result.Col; }
        set { SetCol(value); }
      }
      public Builder SetCol(int value) {
        PrepareBuilder();
        result.hasCol = true;
        result.col_ = value;
        return this;
      }
      public Builder ClearCol() {
        PrepareBuilder();
        result.hasCol = false;
        result.col_ = 0;
        return this;
      }
    }
    static TextPosition() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class XMLPosition : pb::GeneratedMessage<XMLPosition, XMLPosition.Builder> {
    private XMLPosition() { }
    private static readonly XMLPosition defaultInstance = new XMLPosition().MakeReadOnly();
    private static readonly string[] _xMLPositionFieldNames = new string[] { "xpath" };
    private static readonly uint[] _xMLPositionFieldTags = new uint[] { 10 };
    public static XMLPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override XMLPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override XMLPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_XMLPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<XMLPosition, XMLPosition.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_XMLPosition__FieldAccessorTable; }
    }
    
    public const int XpathFieldNumber = 1;
    private bool hasXpath;
    private string xpath_ = "";
    public bool HasXpath {
      get { return hasXpath; }
    }
    public string Xpath {
      get { return xpath_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasXpath) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _xMLPositionFieldNames;
      if (hasXpath) {
        output.WriteString(1, field_names[0], Xpath);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasXpath) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Xpath);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static XMLPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static XMLPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static XMLPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static XMLPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static XMLPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static XMLPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static XMLPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static XMLPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static XMLPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static XMLPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private XMLPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(XMLPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<XMLPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(XMLPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private XMLPosition result;
      
      private XMLPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          XMLPosition original = result;
          result = new XMLPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override XMLPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.XMLPosition.Descriptor; }
      }
      
      public override XMLPosition DefaultInstanceForType {
        get { return global::sally.XMLPosition.DefaultInstance; }
      }
      
      public override XMLPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is XMLPosition) {
          return MergeFrom((XMLPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(XMLPosition other) {
        if (other == global::sally.XMLPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasXpath) {
          Xpath = other.Xpath;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_xMLPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _xMLPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasXpath = input.ReadString(ref result.xpath_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasXpath {
        get { return result.hasXpath; }
      }
      public string Xpath {
        get { return result.Xpath; }
        set { SetXpath(value); }
      }
      public Builder SetXpath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasXpath = true;
        result.xpath_ = value;
        return this;
      }
      public Builder ClearXpath() {
        PrepareBuilder();
        result.hasXpath = false;
        result.xpath_ = "";
        return this;
      }
    }
    static XMLPosition() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class XMLNotification : pb::GeneratedMessage<XMLNotification, XMLNotification.Builder> {
    private XMLNotification() { }
    private static readonly XMLNotification defaultInstance = new XMLNotification().MakeReadOnly();
    private static readonly string[] _xMLNotificationFieldNames = new string[] { "msg", "pos", "uri" };
    private static readonly uint[] _xMLNotificationFieldTags = new uint[] { 18, 10, 26 };
    public static XMLNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override XMLNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override XMLNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_XMLNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<XMLNotification, XMLNotification.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_XMLNotification__FieldAccessorTable; }
    }
    
    public const int PosFieldNumber = 1;
    private bool hasPos;
    private global::sally.XMLPosition pos_;
    public bool HasPos {
      get { return hasPos; }
    }
    public global::sally.XMLPosition Pos {
      get { return pos_ ?? global::sally.XMLPosition.DefaultInstance; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public const int UriFieldNumber = 3;
    private bool hasUri;
    private string uri_ = "";
    public bool HasUri {
      get { return hasUri; }
    }
    public string Uri {
      get { return uri_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPos) return false;
        if (!hasMsg) return false;
        if (!hasUri) return false;
        if (!Pos.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _xMLNotificationFieldNames;
      if (hasPos) {
        output.WriteMessage(1, field_names[1], Pos);
      }
      if (hasMsg) {
        output.WriteString(2, field_names[0], Msg);
      }
      if (hasUri) {
        output.WriteString(3, field_names[2], Uri);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPos) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Pos);
        }
        if (hasMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
        }
        if (hasUri) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Uri);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static XMLNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static XMLNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static XMLNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static XMLNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static XMLNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static XMLNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static XMLNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static XMLNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static XMLNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static XMLNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private XMLNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(XMLNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<XMLNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(XMLNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private XMLNotification result;
      
      private XMLNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          XMLNotification original = result;
          result = new XMLNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override XMLNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.XMLNotification.Descriptor; }
      }
      
      public override XMLNotification DefaultInstanceForType {
        get { return global::sally.XMLNotification.DefaultInstance; }
      }
      
      public override XMLNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is XMLNotification) {
          return MergeFrom((XMLNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(XMLNotification other) {
        if (other == global::sally.XMLNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPos) {
          MergePos(other.Pos);
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        if (other.HasUri) {
          Uri = other.Uri;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_xMLNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _xMLNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.XMLPosition.Builder subBuilder = global::sally.XMLPosition.CreateBuilder();
              if (result.hasPos) {
                subBuilder.MergeFrom(Pos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pos = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
            case 26: {
              result.hasUri = input.ReadString(ref result.uri_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPos {
       get { return result.hasPos; }
      }
      public global::sally.XMLPosition Pos {
        get { return result.Pos; }
        set { SetPos(value); }
      }
      public Builder SetPos(global::sally.XMLPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = value;
        return this;
      }
      public Builder SetPos(global::sally.XMLPosition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = builderForValue.Build();
        return this;
      }
      public Builder MergePos(global::sally.XMLPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPos &&
            result.pos_ != global::sally.XMLPosition.DefaultInstance) {
            result.pos_ = global::sally.XMLPosition.CreateBuilder(result.pos_).MergeFrom(value).BuildPartial();
        } else {
          result.pos_ = value;
        }
        result.hasPos = true;
        return this;
      }
      public Builder ClearPos() {
        PrepareBuilder();
        result.hasPos = false;
        result.pos_ = null;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
      
      public bool HasUri {
        get { return result.hasUri; }
      }
      public string Uri {
        get { return result.Uri; }
        set { SetUri(value); }
      }
      public Builder SetUri(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUri = true;
        result.uri_ = value;
        return this;
      }
      public Builder ClearUri() {
        PrepareBuilder();
        result.hasUri = false;
        result.uri_ = "";
        return this;
      }
    }
    static XMLNotification() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TextNotification : pb::GeneratedMessage<TextNotification, TextNotification.Builder> {
    private TextNotification() { }
    private static readonly TextNotification defaultInstance = new TextNotification().MakeReadOnly();
    private static readonly string[] _textNotificationFieldNames = new string[] { "msg", "pos", "uri" };
    private static readonly uint[] _textNotificationFieldTags = new uint[] { 18, 10, 26 };
    public static TextNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TextNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TextNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_TextNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TextNotification, TextNotification.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_TextNotification__FieldAccessorTable; }
    }
    
    public const int PosFieldNumber = 1;
    private bool hasPos;
    private global::sally.TextPosition pos_;
    public bool HasPos {
      get { return hasPos; }
    }
    public global::sally.TextPosition Pos {
      get { return pos_ ?? global::sally.TextPosition.DefaultInstance; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public const int UriFieldNumber = 3;
    private bool hasUri;
    private string uri_ = "";
    public bool HasUri {
      get { return hasUri; }
    }
    public string Uri {
      get { return uri_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPos) return false;
        if (!hasMsg) return false;
        if (!hasUri) return false;
        if (!Pos.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _textNotificationFieldNames;
      if (hasPos) {
        output.WriteMessage(1, field_names[1], Pos);
      }
      if (hasMsg) {
        output.WriteString(2, field_names[0], Msg);
      }
      if (hasUri) {
        output.WriteString(3, field_names[2], Uri);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPos) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Pos);
        }
        if (hasMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
        }
        if (hasUri) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Uri);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TextNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TextNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TextNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TextNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TextNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TextNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TextNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TextNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TextNotification result;
      
      private TextNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          TextNotification original = result;
          result = new TextNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TextNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.TextNotification.Descriptor; }
      }
      
      public override TextNotification DefaultInstanceForType {
        get { return global::sally.TextNotification.DefaultInstance; }
      }
      
      public override TextNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TextNotification) {
          return MergeFrom((TextNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TextNotification other) {
        if (other == global::sally.TextNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPos) {
          MergePos(other.Pos);
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        if (other.HasUri) {
          Uri = other.Uri;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_textNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _textNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.TextPosition.Builder subBuilder = global::sally.TextPosition.CreateBuilder();
              if (result.hasPos) {
                subBuilder.MergeFrom(Pos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pos = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
            case 26: {
              result.hasUri = input.ReadString(ref result.uri_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPos {
       get { return result.hasPos; }
      }
      public global::sally.TextPosition Pos {
        get { return result.Pos; }
        set { SetPos(value); }
      }
      public Builder SetPos(global::sally.TextPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = value;
        return this;
      }
      public Builder SetPos(global::sally.TextPosition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = builderForValue.Build();
        return this;
      }
      public Builder MergePos(global::sally.TextPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPos &&
            result.pos_ != global::sally.TextPosition.DefaultInstance) {
            result.pos_ = global::sally.TextPosition.CreateBuilder(result.pos_).MergeFrom(value).BuildPartial();
        } else {
          result.pos_ = value;
        }
        result.hasPos = true;
        return this;
      }
      public Builder ClearPos() {
        PrepareBuilder();
        result.hasPos = false;
        result.pos_ = null;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
      
      public bool HasUri {
        get { return result.hasUri; }
      }
      public string Uri {
        get { return result.Uri; }
        set { SetUri(value); }
      }
      public Builder SetUri(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUri = true;
        result.uri_ = value;
        return this;
      }
      public Builder ClearUri() {
        PrepareBuilder();
        result.hasUri = false;
        result.uri_ = "";
        return this;
      }
    }
    static TextNotification() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TextFileNotifications : pb::GeneratedMessage<TextFileNotifications, TextFileNotifications.Builder> {
    private TextFileNotifications() { }
    private static readonly TextFileNotifications defaultInstance = new TextFileNotifications().MakeReadOnly();
    private static readonly string[] _textFileNotificationsFieldNames = new string[] { "file", "notifications" };
    private static readonly uint[] _textFileNotificationsFieldTags = new uint[] { 10, 18 };
    public static TextFileNotifications DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TextFileNotifications DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TextFileNotifications ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_TextFileNotifications__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TextFileNotifications, TextFileNotifications.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_TextFileNotifications__FieldAccessorTable; }
    }
    
    public const int FileFieldNumber = 1;
    private bool hasFile;
    private global::sally.FileRef file_;
    public bool HasFile {
      get { return hasFile; }
    }
    public global::sally.FileRef File {
      get { return file_ ?? global::sally.FileRef.DefaultInstance; }
    }
    
    public const int NotificationsFieldNumber = 2;
    private pbc::PopsicleList<global::sally.TextNotification> notifications_ = new pbc::PopsicleList<global::sally.TextNotification>();
    public scg::IList<global::sally.TextNotification> NotificationsList {
      get { return notifications_; }
    }
    public int NotificationsCount {
      get { return notifications_.Count; }
    }
    public global::sally.TextNotification GetNotifications(int index) {
      return notifications_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFile) return false;
        if (!File.IsInitialized) return false;
        foreach (global::sally.TextNotification element in NotificationsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _textFileNotificationsFieldNames;
      if (hasFile) {
        output.WriteMessage(1, field_names[0], File);
      }
      if (notifications_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], notifications_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFile) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, File);
        }
        foreach (global::sally.TextNotification element in NotificationsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TextFileNotifications ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextFileNotifications ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextFileNotifications ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextFileNotifications ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextFileNotifications ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextFileNotifications ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TextFileNotifications ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TextFileNotifications ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TextFileNotifications ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextFileNotifications ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TextFileNotifications MakeReadOnly() {
      notifications_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TextFileNotifications prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TextFileNotifications, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TextFileNotifications cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TextFileNotifications result;
      
      private TextFileNotifications PrepareBuilder() {
        if (resultIsReadOnly) {
          TextFileNotifications original = result;
          result = new TextFileNotifications();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TextFileNotifications MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.TextFileNotifications.Descriptor; }
      }
      
      public override TextFileNotifications DefaultInstanceForType {
        get { return global::sally.TextFileNotifications.DefaultInstance; }
      }
      
      public override TextFileNotifications BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TextFileNotifications) {
          return MergeFrom((TextFileNotifications) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TextFileNotifications other) {
        if (other == global::sally.TextFileNotifications.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFile) {
          MergeFile(other.File);
        }
        if (other.notifications_.Count != 0) {
          result.notifications_.Add(other.notifications_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_textFileNotificationsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _textFileNotificationsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.FileRef.Builder subBuilder = global::sally.FileRef.CreateBuilder();
              if (result.hasFile) {
                subBuilder.MergeFrom(File);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              File = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.notifications_, global::sally.TextNotification.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFile {
       get { return result.hasFile; }
      }
      public global::sally.FileRef File {
        get { return result.File; }
        set { SetFile(value); }
      }
      public Builder SetFile(global::sally.FileRef value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFile = true;
        result.file_ = value;
        return this;
      }
      public Builder SetFile(global::sally.FileRef.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFile = true;
        result.file_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFile(global::sally.FileRef value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFile &&
            result.file_ != global::sally.FileRef.DefaultInstance) {
            result.file_ = global::sally.FileRef.CreateBuilder(result.file_).MergeFrom(value).BuildPartial();
        } else {
          result.file_ = value;
        }
        result.hasFile = true;
        return this;
      }
      public Builder ClearFile() {
        PrepareBuilder();
        result.hasFile = false;
        result.file_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::sally.TextNotification> NotificationsList {
        get { return PrepareBuilder().notifications_; }
      }
      public int NotificationsCount {
        get { return result.NotificationsCount; }
      }
      public global::sally.TextNotification GetNotifications(int index) {
        return result.GetNotifications(index);
      }
      public Builder SetNotifications(int index, global::sally.TextNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.notifications_[index] = value;
        return this;
      }
      public Builder SetNotifications(int index, global::sally.TextNotification.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.notifications_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNotifications(global::sally.TextNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.notifications_.Add(value);
        return this;
      }
      public Builder AddNotifications(global::sally.TextNotification.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.notifications_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNotifications(scg::IEnumerable<global::sally.TextNotification> values) {
        PrepareBuilder();
        result.notifications_.Add(values);
        return this;
      }
      public Builder ClearNotifications() {
        PrepareBuilder();
        result.notifications_.Clear();
        return this;
      }
    }
    static TextFileNotifications() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TextAutocomplete : pb::GeneratedMessage<TextAutocomplete, TextAutocomplete.Builder> {
    private TextAutocomplete() { }
    private static readonly TextAutocomplete defaultInstance = new TextAutocomplete().MakeReadOnly();
    private static readonly string[] _textAutocompleteFieldNames = new string[] { "file", "fileContents", "offset" };
    private static readonly uint[] _textAutocompleteFieldTags = new uint[] { 10, 26, 16 };
    public static TextAutocomplete DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TextAutocomplete DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TextAutocomplete ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::sally.Comm.internal__static_sally_TextAutocomplete__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TextAutocomplete, TextAutocomplete.Builder> InternalFieldAccessors {
      get { return global::sally.Comm.internal__static_sally_TextAutocomplete__FieldAccessorTable; }
    }
    
    public const int FileFieldNumber = 1;
    private bool hasFile;
    private global::sally.FileRef file_;
    public bool HasFile {
      get { return hasFile; }
    }
    public global::sally.FileRef File {
      get { return file_ ?? global::sally.FileRef.DefaultInstance; }
    }
    
    public const int OffsetFieldNumber = 2;
    private bool hasOffset;
    private int offset_;
    public bool HasOffset {
      get { return hasOffset; }
    }
    public int Offset {
      get { return offset_; }
    }
    
    public const int FileContentsFieldNumber = 3;
    private bool hasFileContents;
    private string fileContents_ = "";
    public bool HasFileContents {
      get { return hasFileContents; }
    }
    public string FileContents {
      get { return fileContents_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFile) return false;
        if (!hasOffset) return false;
        if (!File.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _textAutocompleteFieldNames;
      if (hasFile) {
        output.WriteMessage(1, field_names[0], File);
      }
      if (hasOffset) {
        output.WriteInt32(2, field_names[2], Offset);
      }
      if (hasFileContents) {
        output.WriteString(3, field_names[1], FileContents);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFile) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, File);
        }
        if (hasOffset) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Offset);
        }
        if (hasFileContents) {
          size += pb::CodedOutputStream.ComputeStringSize(3, FileContents);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TextAutocomplete ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextAutocomplete ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextAutocomplete ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextAutocomplete ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextAutocomplete ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextAutocomplete ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TextAutocomplete ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TextAutocomplete ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TextAutocomplete ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextAutocomplete ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TextAutocomplete MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TextAutocomplete prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TextAutocomplete, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TextAutocomplete cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TextAutocomplete result;
      
      private TextAutocomplete PrepareBuilder() {
        if (resultIsReadOnly) {
          TextAutocomplete original = result;
          result = new TextAutocomplete();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TextAutocomplete MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::sally.TextAutocomplete.Descriptor; }
      }
      
      public override TextAutocomplete DefaultInstanceForType {
        get { return global::sally.TextAutocomplete.DefaultInstance; }
      }
      
      public override TextAutocomplete BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TextAutocomplete) {
          return MergeFrom((TextAutocomplete) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TextAutocomplete other) {
        if (other == global::sally.TextAutocomplete.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFile) {
          MergeFile(other.File);
        }
        if (other.HasOffset) {
          Offset = other.Offset;
        }
        if (other.HasFileContents) {
          FileContents = other.FileContents;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_textAutocompleteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _textAutocompleteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::sally.FileRef.Builder subBuilder = global::sally.FileRef.CreateBuilder();
              if (result.hasFile) {
                subBuilder.MergeFrom(File);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              File = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOffset = input.ReadInt32(ref result.offset_);
              break;
            }
            case 26: {
              result.hasFileContents = input.ReadString(ref result.fileContents_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFile {
       get { return result.hasFile; }
      }
      public global::sally.FileRef File {
        get { return result.File; }
        set { SetFile(value); }
      }
      public Builder SetFile(global::sally.FileRef value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFile = true;
        result.file_ = value;
        return this;
      }
      public Builder SetFile(global::sally.FileRef.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFile = true;
        result.file_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFile(global::sally.FileRef value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFile &&
            result.file_ != global::sally.FileRef.DefaultInstance) {
            result.file_ = global::sally.FileRef.CreateBuilder(result.file_).MergeFrom(value).BuildPartial();
        } else {
          result.file_ = value;
        }
        result.hasFile = true;
        return this;
      }
      public Builder ClearFile() {
        PrepareBuilder();
        result.hasFile = false;
        result.file_ = null;
        return this;
      }
      
      public bool HasOffset {
        get { return result.hasOffset; }
      }
      public int Offset {
        get { return result.Offset; }
        set { SetOffset(value); }
      }
      public Builder SetOffset(int value) {
        PrepareBuilder();
        result.hasOffset = true;
        result.offset_ = value;
        return this;
      }
      public Builder ClearOffset() {
        PrepareBuilder();
        result.hasOffset = false;
        result.offset_ = 0;
        return this;
      }
      
      public bool HasFileContents {
        get { return result.hasFileContents; }
      }
      public string FileContents {
        get { return result.FileContents; }
        set { SetFileContents(value); }
      }
      public Builder SetFileContents(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileContents = true;
        result.fileContents_ = value;
        return this;
      }
      public Builder ClearFileContents() {
        PrepareBuilder();
        result.hasFileContents = false;
        result.fileContents_ = "";
        return this;
      }
    }
    static TextAutocomplete() {
      object.ReferenceEquals(global::sally.Comm.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
