package info.kwarc.sally.model.document.spreadsheet;

public class CellInformation {
	private String value, formula;
	private CellSpaceInformation cellCoordinates, cellSize;
	
	void init(CellSpaceInformation cellCoordinates, String value, String formula, int rowSize, int columnSize) {
		this.cellCoordinates = cellCoordinates;
		this.cellSize = new CellSpaceInformation(rowSize, columnSize);
		this.value = value;
		this.formula = formula;
	}
	
	CellInformation(String pos, String value, String formula, int rowSize, int columnSize) {
		init(Util.convertCellPosition(pos), value, formula, rowSize, columnSize);
	}

	CellInformation(int row, int column, String value, String formula, int rowSize, int columnSize) {
		init(new CellSpaceInformation(row, columnSize), value, formula, rowSize, columnSize);
	}

	// Generated by Eclipse
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((cellCoordinates == null) ? 0 : cellCoordinates.hashCode());
		result = prime * result
				+ ((cellSize == null) ? 0 : cellSize.hashCode());
		result = prime * result + ((formula == null) ? 0 : formula.hashCode());
		result = prime * result + ((value == null) ? 0 : value.hashCode());
		return result;
	}

	// Generated by Eclipse
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CellInformation other = (CellInformation) obj;
		if (cellCoordinates == null) {
			if (other.cellCoordinates != null)
				return false;
		} else if (!cellCoordinates.equals(other.cellCoordinates))
			return false;
		if (cellSize == null) {
			if (other.cellSize != null)
				return false;
		} else if (!cellSize.equals(other.cellSize))
			return false;
		if (formula == null) {
			if (other.formula != null)
				return false;
		} else if (!formula.equals(other.formula))
			return false;
		if (value == null) {
			if (other.value != null)
				return false;
		} else if (!value.equals(other.value))
			return false;
		return true;
	}

	public String getValue() {
		return value;
	}
	
	public String getFormula() {
		return formula;
	}
	
	public int getRowSize() {
		return cellSize.getRow();
	}
	
	public int getColumnSize() {
		return cellSize.getColumn();
	}
	
	public CellSpaceInformation getSize() {
		return cellSize;
	}
	
	public CellSpaceInformation getCellCoordinates() {
		return cellCoordinates;
	}
	
	public ContentValueType getCellType() {
		
		ContentValueType type = ContentValueType.OTHER;
		Boolean succeed = false;
		
		if (value.isEmpty()) {
			type = ContentValueType.EMPTY;
			succeed = true;
		}
		if (!succeed) {
			try {
				new Integer(value);
				type = ContentValueType.STRING_NUMBER;
				succeed = true;
			} catch(NumberFormatException ex) {}
		}
		if (!succeed) {
			try {
				new Float(value);
				type = ContentValueType.FLOAT;
				succeed = true;
			} catch(NumberFormatException ex) {}
		}
		if (!succeed)
			type = ContentValueType.STRING_NUMBER;
		
		return type;	
	}
	
}
