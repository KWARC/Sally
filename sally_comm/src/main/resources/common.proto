package sally; 

/**
* very important, otherwise serialization will not work
*/

option java_multiple_files = true;

/**
 * -------------------- THEO Messages ---------------------------
 */

/**
 * Message storing Cookie information
 */
message Cookie {
	required string url = 1;
	required string cookie = 2;
}

/**
 * Message sent to Alexes telling them to make themselves top most
 */

message SwitchToApp {
	required string fileName = 1;
}


/**
 * Opens a new Theo window at screen coordinates and browser URL
 */
message TheoOpenWindow {
	required ScreenCoordinates position = 1;
	required string url = 2;
	optional int32 sizeX = 3;
	optional int32 sizeY = 4;
	optional string title = 5;
	optional Cookie cookie = 6;
}

/**
 * Opens a new Theo window at screen coordinates and browser URL
 */
message TheoChangeWindow {
	optional ScreenCoordinates position = 1;
	optional string url = 2;
	optional int32 sizeX = 3;
	optional int32 sizeY = 4;
	optional string title = 5;
	optional Cookie cookie = 6;
	required int32 windowid = 7;
}

/**
 * Closes a Theo window specified by certain ID
 */
message TheoCloseWindow {
	required int32 windowid = 1;
}


/**
 * --------------- Alexes --------------------
 */

/**
 * Message
 */
 message WhoAmI {
	enum ClientType {
		Alex = 0;
		Theo = 1;
	}

	/**
	 * Environment in which the client in running
	 */
	enum EnvironmentType {
		Desktop = 0;
		Web = 1;
	}

	/**
 	* Type of document
 	*/
 	enum DocType {
		Spreadsheet = 0;
		Text = 1;
		CAD = 2;
		Sketch = 3;
	}

	required ClientType clientType = 1;
	required EnvironmentType environmentType = 2;
	required DocType documentType = 3;
}

/**
 * Message containing all the Sally specific information
 */
message AlexData {
	optional string fileName = 1;
	optional string data = 2;
}

/**
 * Message telling sally to show the Sally Frames
 */
message SallyFrame {
	optional string fileName = 1;
}

message SallyFrameChoice {
	required string fileName = 1;
	required int32 choiceId = 2;
	required int64 callbackToken = 3;
}

message SallyFrameService {
	required int32 id = 1;
	required string name = 2;
	optional string description = 3;
}

message SallyFrameResponse {
	required string frameName = 1;
	repeated SallyFrameService frameServices = 2;
}

message SallyFrameList {
	repeated SallyFrameResponse frames = 1;
	optional int64 callbackToken = 2;
}

/**
 * Screen Coordinates
 */
message ScreenCoordinates {
	required int32 x = 1;
	required int32 y = 2;
}

message Parameter {
	required string key = 1;
	required string value = 2;
}


/**
 * --------------- Spreadsheet Alexes ----------------------------
 */

/**
* Range Selection
*/
message RangeSelection {
	required int32 startRow = 1;
	required int32 startCol = 2;
	required int32 endRow = 3;
	required int32 endCol = 4;
	optional string sheet = 5;
}

/**
 * message to a SpreadsheetAlex to perform an action on a range e.g.
 * if sent to /service/get/data channel, it should return data in that Range
 * if sent to /service/alex/select channel, it should select given range
 */
message AlexRangeRequest {
	required string fileName = 1;
	repeated RangeSelection selection = 2;
}

/**
 * A spreadsheet Alex clicked
 */
message AlexClick {
	required string Sheet = 1;
	required RangeSelection range = 2;
	required ScreenCoordinates position = 3;
	required string fileName = 4;
}

/**
 *Generic Message for starting a workflow
 */
message StartSubTask {
	required string workflowID = 1;
	optional int64 callbackToken = 2;
}

// --------------------------------------------CAD MESSAGES-----------------------------------------------------------

message CADAlexClick {
	required string cadNodeId = 1;
	required ScreenCoordinates position = 2;
	required string fileName = 3;
}

message CADNavigateTo {
	required string fileName = 1;
	required string cadNodeId = 2;
}

message CADNode {
	required string id = 1;
	optional string im_uri = 2;
	repeated CADNode children = 3;
	repeated Parameter parameters = 4;
}

message CADSemanticData {
	required string fileName = 1;
	required CADNode root_node = 2;
}

// ++ Some Messages for semantic information ++++

message SpreadsheetAlexData {
	optional ModelDataMsg asm = 2;
}

message MMTUri {
	required string uri = 1;
}

// ----------------------------------------------
// ---------- New Spreadsheet Messages ----------
// ----------------------------------------------

message BlockInfo {
	optional string name = 1;
	optional string range = 2;
	optional string meaning = 3;
	optional int32 order = 4;
	optional int32 id = 5;
}

message SpreadsheetDocMeta {
	required string fileName = 1;
	repeated string sheets = 2;
}

// Message to get Meta-information about the spreadsheet document
message GetMeta {
	optional string fileName = 1;
	// callback token - will be set automatically
	optional int64 callbackToken = 2;
}

// Message that is used for getting a list of blocks
message GetBlocks {
	// name of the spreadsheet file
	// if absent, the file associated with current workflow is taken
	optional string fileName = 1;

	// get only blocks belonging to a certain sheet
	optional string sheet = 2;

	// callback token - will be set automatically
	optional int64 callbackToken = 3;
}

message BlockList {
	repeated BlockInfo blocks = 1;
}

message CreateBlock {
	required BlockInfo blockInfo = 1;
	optional int64 callbackToken = 2;
}

message BuilderMsg {
	enum Type {
		MathML = 1;
		OpenMath = 2;
	}

	required Type type = 1;
}

message ValueInterpretationMsg {
	required string pattern = 1;
	required string interpretationTemplate = 2;
	required BuilderMsg builderML = 3;

}

message CellSpaceInformationMsg {
	required string worksheet = 1;
	required int32 row = 2;
	required int32 column = 3;
	optional int32 height = 4;
	optional int32 width = 5;
}

message BlockMsg {
	enum Type {
		Atomic = 1;
		Composed = 2;
	}

	required Type type = 1;
	required int32 id = 2;
	required string worksheet = 3;
	repeated ValueInterpretationMsg valueInterpretations = 4;

	optional CellSpaceInformationMsg position = 5;	// For atomic blocks
	repeated int32 subBlockIds = 6;					// For composed blocks
}

message CellTupleMsg {
	repeated CellSpaceInformationMsg tuple = 1;
}

message CellDependencyDescriptionMsg {
	required int32 minX = 1;
	required int32 maxX = 2;
	required int32 minY = 3;
	required int32 maxY = 4;
	required string cellRelation = 5;
}

message RelationMsg {
	required int32 id = 1;
	required int32 relationType = 2;
	required string uri = 3;
	repeated int32 blockIDs = 4;
	repeated CellTupleMsg cellRelations = 5;
	repeated CellDependencyDescriptionMsg cellDependencyDescriptions = 6;
}

message ModelDataMsg {
	repeated BlockMsg blocks = 1;
	repeated RelationMsg relations = 2;
}

/**
 * Sketch Alex
 */

message SketchSelect {
	required int32 id = 1;
	required string fileName = 2;
	required ScreenCoordinates position = 3;
}

message SketchAtomic {
	required int32 id = 1;
	required MMTUri mmturi = 2;
}

message SketchRelation {
	repeated int32 parts = 1;
	repeated MMTUri relation = 2;
}

message SketchASM {
	repeated SketchAtomic parts = 1;
	repeated SketchRelation relations = 2;
}